// Generated by dart2js (NullSafetyMode.sound, csp, deferred-serialization, intern-composite-values), the Dart to JavaScript compiler version: 2.19.6.
self.$__dart_deferred_initializers__ = self.$__dart_deferred_initializers__ || Object.create(null);
$__dart_deferred_initializers__.current = function(hunkHelpers, init, holdersList, $) {
  var A = {
    _InitializedCell$named(_name, _initializer) {
      var t1 = new A._InitializedCell(_initializer);
      return t1.__late_helper$_value = t1;
    },
    _InitializedCell: function _InitializedCell(t0) {
      this.__late_helper$_value = null;
      this.__late_helper$_initializer = t0;
    },
    PathOperation: function PathOperation(t0, t1) {
      this.index = t0;
      this._core$_name = t1;
    },
    ThreePointCubic: function ThreePointCubic() {
    },
    SizeTween: function SizeTween(t0, t1) {
      this.begin = t0;
      this.end = t1;
    },
    CupertinoButton$(alignment, borderRadius, child, color, disabledColor, minSize, onPressed, padding, pressedOpacity) {
      return new A.CupertinoButton(child, padding, color, disabledColor, onPressed, minSize, pressedOpacity, borderRadius, alignment, null);
    },
    CupertinoButton: function CupertinoButton(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9) {
      var _ = this;
      _.child = t0;
      _.padding = t1;
      _.color = t2;
      _.disabledColor = t3;
      _.onPressed = t4;
      _.minSize = t5;
      _.pressedOpacity = t6;
      _.borderRadius = t7;
      _.alignment = t8;
      _.key = t9;
    },
    _CupertinoButtonState: function _CupertinoButtonState(t0, t1, t2, t3) {
      var _ = this;
      _._opacityTween = t0;
      _.___CupertinoButtonState__opacityAnimation_A = _.___CupertinoButtonState__animationController_A = $;
      _._buttonHeldDown = false;
      _.SingleTickerProviderStateMixin__ticker = t1;
      _.SingleTickerProviderStateMixin__tickerModeNotifier = t2;
      _._widget = null;
      _._debugLifecycleState = t3;
      _._framework$_element = null;
    },
    _CupertinoButtonState__animate_closure: function _CupertinoButtonState__animate_closure(t0, t1) {
      this.$this = t0;
      this.wasHeldDown = t1;
    },
    __CupertinoButtonState_State_SingleTickerProviderStateMixin: function __CupertinoButtonState_State_SingleTickerProviderStateMixin() {
    },
    _CupertinoDesktopTextSelectionHandleControls: function _CupertinoDesktopTextSelectionHandleControls() {
    },
    CupertinoDesktopTextSelectionControls: function CupertinoDesktopTextSelectionControls() {
    },
    __CupertinoDesktopTextSelectionHandleControls_CupertinoDesktopTextSelectionControls_TextSelectionHandleControls: function __CupertinoDesktopTextSelectionHandleControls_CupertinoDesktopTextSelectionControls_TextSelectionHandleControls() {
    },
    CupertinoDesktopTextSelectionToolbar: function CupertinoDesktopTextSelectionToolbar(t0, t1, t2) {
      this.anchor = t0;
      this.children = t1;
      this.key = t2;
    },
    CupertinoDesktopTextSelectionToolbarButton$text(context, onPressed, text) {
      var _null = null;
      return new A.CupertinoDesktopTextSelectionToolbarButton(onPressed, B.Text$(text, _null, C.TextOverflow_2, _null, D.TextStyle_Ybt.copyWith$1$color(D.CupertinoDynamicColor_aTW.resolveFrom$1(context)), _null, _null), _null);
    },
    CupertinoDesktopTextSelectionToolbarButton: function CupertinoDesktopTextSelectionToolbarButton(t0, t1, t2) {
      this.onPressed = t0;
      this.child = t1;
      this.key = t2;
    },
    _CupertinoDesktopTextSelectionToolbarButtonState: function _CupertinoDesktopTextSelectionToolbarButtonState(t0) {
      var _ = this;
      _._isHovered = false;
      _._widget = null;
      _._debugLifecycleState = t0;
      _._framework$_element = null;
    },
    _CupertinoDesktopTextSelectionToolbarButtonState__onEnter_closure: function _CupertinoDesktopTextSelectionToolbarButtonState__onEnter_closure(t0) {
      this.$this = t0;
    },
    _CupertinoDesktopTextSelectionToolbarButtonState__onExit_closure: function _CupertinoDesktopTextSelectionToolbarButtonState__onExit_closure(t0) {
      this.$this = t0;
    },
    CupertinoTextMagnifier: function CupertinoTextMagnifier(t0, t1, t2) {
      this.controller = t0;
      this.magnifierInfo = t1;
      this.key = t2;
    },
    _CupertinoTextMagnifierState: function _CupertinoTextMagnifierState(t0, t1, t2, t3) {
      var _ = this;
      _._currentAdjustedMagnifierPosition = t0;
      _._verticalFocalPointAdjustment = 0;
      _.___CupertinoTextMagnifierState__ioAnimation_A = _.___CupertinoTextMagnifierState__ioAnimationController_A = $;
      _.SingleTickerProviderStateMixin__ticker = t1;
      _.SingleTickerProviderStateMixin__tickerModeNotifier = t2;
      _._widget = null;
      _._debugLifecycleState = t3;
      _._framework$_element = null;
    },
    _CupertinoTextMagnifierState_initState_closure: function _CupertinoTextMagnifierState_initState_closure(t0) {
      this.$this = t0;
    },
    _CupertinoTextMagnifierState_initState__closure: function _CupertinoTextMagnifierState_initState__closure() {
    },
    _CupertinoTextMagnifierState__determineMagnifierPositionAndFocalPoint_closure: function _CupertinoTextMagnifierState__determineMagnifierPositionAndFocalPoint_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.adjustedMagnifierPosition = t1;
      _.verticalCenterOfCurrentLine = t2;
      _.verticalPositionOfLens = t3;
    },
    CupertinoMagnifier: function CupertinoMagnifier(t0, t1, t2) {
      this.inOutAnimation = t0;
      this.additionalFocalPointOffset = t1;
      this.key = t2;
    },
    __CupertinoTextMagnifierState_State_SingleTickerProviderStateMixin: function __CupertinoTextMagnifierState_State_SingleTickerProviderStateMixin() {
    },
    _TextSelectionHandlePainter0: function _TextSelectionHandlePainter0(t0, t1) {
      this.color = t0;
      this._repaint = t1;
    },
    CupertinoTextSelectionHandleControls: function CupertinoTextSelectionHandleControls() {
    },
    CupertinoTextSelectionControls: function CupertinoTextSelectionControls() {
    },
    CupertinoTextSelectionControls_buildToolbar_closure: function CupertinoTextSelectionControls_buildToolbar_closure(t0, t1) {
      this.$this = t0;
      this.delegate = t1;
    },
    CupertinoTextSelectionControls_buildToolbar_closure0: function CupertinoTextSelectionControls_buildToolbar_closure0(t0, t1) {
      this.$this = t0;
      this.delegate = t1;
    },
    CupertinoTextSelectionControls_buildToolbar_closure1: function CupertinoTextSelectionControls_buildToolbar_closure1(t0, t1) {
      this.$this = t0;
      this.delegate = t1;
    },
    CupertinoTextSelectionControls_buildToolbar_closure2: function CupertinoTextSelectionControls_buildToolbar_closure2(t0, t1) {
      this.$this = t0;
      this.delegate = t1;
    },
    _CupertinoTextSelectionControlsToolbar: function _CupertinoTextSelectionControlsToolbar(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9) {
      var _ = this;
      _.clipboardStatus = t0;
      _.endpoints = t1;
      _.globalEditableRegion = t2;
      _.handleCopy = t3;
      _.handleCut = t4;
      _.handlePaste = t5;
      _.handleSelectAll = t6;
      _.selectionMidpoint = t7;
      _.textLineHeight = t8;
      _.key = t9;
    },
    _CupertinoTextSelectionControlsToolbarState: function _CupertinoTextSelectionControlsToolbarState(t0) {
      this._widget = null;
      this._debugLifecycleState = t0;
      this._framework$_element = null;
    },
    _CupertinoTextSelectionControlsToolbarState_build_addToolbarButton: function _CupertinoTextSelectionControlsToolbarState_build_addToolbarButton(t0, t1) {
      this.items = t0;
      this.onePhysicalPixelVerticalDivider = t1;
    },
    _CupertinoTextSelectionHandleControls_CupertinoTextSelectionControls_TextSelectionHandleControls: function _CupertinoTextSelectionHandleControls_CupertinoTextSelectionControls_TextSelectionHandleControls() {
    },
    CupertinoTextSelectionToolbar$(anchorAbove, anchorBelow, children) {
      return new A.CupertinoTextSelectionToolbar(anchorAbove, anchorBelow, children, null);
    },
    CupertinoTextSelectionToolbar__addChildrenSpacers(children) {
      var i, child,
        nextChildren = B._setArrayType([], type$.JSArray_Widget);
      for (i = 0; i < children.length; ++i) {
        child = children[i];
        if (i !== 0)
          C.JSArray_methods.add$1(nextChildren, new A._CupertinoToolbarButtonDivider(null));
        C.JSArray_methods.add$1(nextChildren, child);
      }
      return nextChildren;
    },
    CupertinoTextSelectionToolbar__defaultToolbarBuilder(context, anchor, isAbove, child) {
      type$.BuildContext._as(context);
      return new A._CupertinoTextSelectionToolbarShape(type$.Offset._as(anchor), B._asBool(isAbove), B.DecoratedBox$(type$.Widget._as(child), D.BoxDecoration_c0h, C.DecorationPosition_0), null);
    },
    _RenderCupertinoTextSelectionToolbarItems_hitTestChild(child, result, position) {
      var t1;
      if (child == null)
        return false;
      t1 = child.parentData;
      t1.toString;
      type$.ToolbarItemsParentData._as(t1);
      if (!t1.shouldPaint)
        return false;
      return result.addWithPaintOffset$3$hitTest$offset$position(new A._RenderCupertinoTextSelectionToolbarItems_hitTestChild_closure(position, t1, child), t1.offset, position);
    },
    _CupertinoToolbarButtonDivider: function _CupertinoToolbarButtonDivider(t0) {
      this.key = t0;
    },
    CupertinoTextSelectionToolbar: function CupertinoTextSelectionToolbar(t0, t1, t2, t3) {
      var _ = this;
      _.anchorAbove = t0;
      _.anchorBelow = t1;
      _.children = t2;
      _.key = t3;
    },
    _CupertinoTextSelectionToolbarShape: function _CupertinoTextSelectionToolbarShape(t0, t1, t2, t3) {
      var _ = this;
      _._anchor = t0;
      _._text_selection_toolbar0$_isAbove = t1;
      _.child = t2;
      _.key = t3;
    },
    _RenderCupertinoTextSelectionToolbarShape: function _RenderCupertinoTextSelectionToolbarShape(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._anchor = t0;
      _._text_selection_toolbar0$_isAbove = t1;
      _._heightConstraint = t2;
      _._clipPathLayer = t3;
      _._text_selection_toolbar0$_debugPaint = null;
      _.RenderObjectWithChildMixin__child = t4;
      _._cachedDryLayoutSizes = _._cachedIntrinsicDimensions = null;
      _._computingThisDryLayout = false;
      _._cachedBaselines = _._size = null;
      _._debugActivePointers = 0;
      _._debugDisposed = false;
      _.debugCreator = _.parentData = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _._debugDoingThisPaint = false;
      _.__RenderObject__wasRepaintBoundary_A = $;
      _._layerHandle = t5;
      _._needsCompositingBitsUpdate = false;
      _.__RenderObject__needsCompositing_A = $;
      _._needsPaint = true;
      _._needsCompositedLayerUpdate = false;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    _RenderCupertinoTextSelectionToolbarShape_paint_closure: function _RenderCupertinoTextSelectionToolbarShape_paint_closure(t0) {
      this.$this = t0;
    },
    _CupertinoTextSelectionToolbarContent: function _CupertinoTextSelectionToolbarContent(t0, t1, t2, t3, t4) {
      var _ = this;
      _.anchor = t0;
      _.children = t1;
      _.isAbove = t2;
      _.toolbarBuilder = t3;
      _.key = t4;
    },
    _CupertinoTextSelectionToolbarContentState: function _CupertinoTextSelectionToolbarContentState(t0, t1, t2) {
      var _ = this;
      _.___CupertinoTextSelectionToolbarContentState__controller_A = $;
      _._text_selection_toolbar0$_page = 0;
      _._nextPage = null;
      _.TickerProviderStateMixin__tickers = t0;
      _.TickerProviderStateMixin__tickerModeNotifier = t1;
      _._widget = null;
      _._debugLifecycleState = t2;
      _._framework$_element = null;
    },
    _CupertinoTextSelectionToolbarContentState__statusListener_closure: function _CupertinoTextSelectionToolbarContentState__statusListener_closure(t0) {
      this.$this = t0;
    },
    _CupertinoTextSelectionToolbarItems: function _CupertinoTextSelectionToolbarItems(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.backButton = t0;
      _.children = t1;
      _.dividerWidth = t2;
      _.nextButton = t3;
      _.nextButtonDisabled = t4;
      _.page = t5;
      _.key = t6;
    },
    _CupertinoTextSelectionToolbarItemsElement: function _CupertinoTextSelectionToolbarItemsElement(t0, t1, t2, t3) {
      var _ = this;
      _.___CupertinoTextSelectionToolbarItemsElement__children_A = $;
      _.slotToChild = t0;
      _._text_selection_toolbar0$_forgottenChildren = t1;
      _._renderObject = null;
      _._debugDoingBuild = false;
      _._slot = _._notificationTree = _._debugReassembleConfig = _._framework$_parent = _._ancestorRenderObjectElement = null;
      _.__Element__depth_A = $;
      _._widget = t2;
      _._owner = null;
      _._lifecycleState = t3;
      _._dependencies = _._inheritedWidgets = null;
      _._hadUnsatisfiedDependencies = false;
      _._dirty = true;
      _._debugBuiltOnce = _._inDirtyList = false;
    },
    _RenderCupertinoTextSelectionToolbarItems: function _RenderCupertinoTextSelectionToolbarItems(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.slottedChildren = t0;
      _._text_selection_toolbar0$_page = t1;
      _._dividerWidth = t2;
      _._nextButtonDisabled = _._nextButton = _._backButton = null;
      _.ContainerRenderObjectMixin__childCount = t3;
      _.ContainerRenderObjectMixin__firstChild = t4;
      _.ContainerRenderObjectMixin__lastChild = t5;
      _._cachedDryLayoutSizes = _._cachedIntrinsicDimensions = null;
      _._computingThisDryLayout = false;
      _._cachedBaselines = _._size = null;
      _._debugActivePointers = 0;
      _._debugDisposed = false;
      _.debugCreator = _.parentData = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _._debugDoingThisPaint = false;
      _.__RenderObject__wasRepaintBoundary_A = $;
      _._layerHandle = t6;
      _._needsCompositingBitsUpdate = false;
      _.__RenderObject__needsCompositing_A = $;
      _._needsPaint = true;
      _._needsCompositedLayerUpdate = false;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    _RenderCupertinoTextSelectionToolbarItems_performLayout_closure: function _RenderCupertinoTextSelectionToolbarItems_performLayout_closure() {
    },
    _RenderCupertinoTextSelectionToolbarItems_performLayout_closure0: function _RenderCupertinoTextSelectionToolbarItems_performLayout_closure0(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._box_0 = t0;
      _.$this = t1;
      _.subsequentPageButtonsWidth = t2;
      _.firstPageWidth = t3;
      _.greatestHeight = t4;
      _.toolbarWidth = t5;
    },
    _RenderCupertinoTextSelectionToolbarItems_paint_closure: function _RenderCupertinoTextSelectionToolbarItems_paint_closure(t0, t1) {
      this.offset = t0;
      this.context = t1;
    },
    _RenderCupertinoTextSelectionToolbarItems_hitTestChild_closure: function _RenderCupertinoTextSelectionToolbarItems_hitTestChild_closure(t0, t1, t2) {
      this.position = t0;
      this.childParentData = t1;
      this.child = t2;
    },
    _RenderCupertinoTextSelectionToolbarItems_redepthChildren_closure: function _RenderCupertinoTextSelectionToolbarItems_redepthChildren_closure(t0) {
      this.$this = t0;
    },
    _RenderCupertinoTextSelectionToolbarItems_visitChildrenForSemantics_closure: function _RenderCupertinoTextSelectionToolbarItems_visitChildrenForSemantics_closure(t0) {
      this.visitor = t0;
    },
    _CupertinoTextSelectionToolbarItemsSlot: function _CupertinoTextSelectionToolbarItemsSlot(t0, t1) {
      this.index = t0;
      this._core$_name = t1;
    },
    _NullElement0: function _NullElement0(t0, t1) {
      var _ = this;
      _._slot = _._notificationTree = _._debugReassembleConfig = _._framework$_parent = null;
      _.__Element__depth_A = $;
      _._widget = t0;
      _._owner = null;
      _._lifecycleState = t1;
      _._dependencies = _._inheritedWidgets = null;
      _._hadUnsatisfiedDependencies = false;
      _._dirty = true;
      _._debugBuiltOnce = _._inDirtyList = false;
    },
    _NullWidget3: function _NullWidget3(t0) {
      this.key = t0;
    },
    __CupertinoTextSelectionToolbarContentState_State_TickerProviderStateMixin: function __CupertinoTextSelectionToolbarContentState_State_TickerProviderStateMixin() {
    },
    __RenderCupertinoTextSelectionToolbarItems_RenderBox_ContainerRenderObjectMixin: function __RenderCupertinoTextSelectionToolbarItems_RenderBox_ContainerRenderObjectMixin() {
    },
    __RenderCupertinoTextSelectionToolbarItems_RenderBox_ContainerRenderObjectMixin_RenderBoxContainerDefaultsMixin: function __RenderCupertinoTextSelectionToolbarItems_RenderBox_ContainerRenderObjectMixin_RenderBoxContainerDefaultsMixin() {
    },
    CupertinoTextSelectionToolbarButton$text(onPressed, text) {
      var _null = null;
      return new A.CupertinoTextSelectionToolbarButton(B.Text$(text, _null, C.TextOverflow_2, _null, D.TextStyle_Ybt.copyWith$1$color(onPressed != null ? C.Color_4294967295 : C.CupertinoDynamicColor_YIZ), _null, _null), onPressed, _null);
    },
    CupertinoTextSelectionToolbarButton_getButtonLabel(context, buttonItem) {
      B.Localizations_of(context, D.Type_CupertinoLocalizations_10U, type$.CupertinoLocalizations).toString;
      switch (buttonItem.type.index) {
        case 0:
          return "Cut";
        case 1:
          return "Copy";
        case 2:
          return "Paste";
        case 3:
          return "Select All";
        case 4:
          return "";
      }
    },
    CupertinoTextSelectionToolbarButton: function CupertinoTextSelectionToolbarButton(t0, t1, t2) {
      this.child = t0;
      this.onPressed = t1;
      this.key = t2;
    },
    AdaptiveTextSelectionToolbar_getButtonLabel(context, buttonItem) {
      switch (B.Theme_of(context).platform.index) {
        case 2:
        case 4:
          return A.CupertinoTextSelectionToolbarButton_getButtonLabel(context, buttonItem);
        case 0:
        case 1:
        case 3:
        case 5:
          B.Localizations_of(context, C.Type_MaterialLocalizations_flR, type$.MaterialLocalizations).toString;
          switch (buttonItem.type.index) {
            case 0:
              return "Cut";
            case 1:
              return "Copy";
            case 2:
              return "Paste";
            case 3:
              return "Select all";
            case 4:
              return "";
          }
          break;
      }
    },
    AdaptiveTextSelectionToolbar_getAdaptiveButtons(context, buttonItems) {
      var t1, buttons, i, buttonItem, position, t2, _null = null;
      switch (B.Theme_of(context).platform.index) {
        case 2:
          t1 = B._arrayInstanceType(buttonItems);
          return new B.MappedListIterable(buttonItems, t1._eval$1("Widget(1)")._as(new A.AdaptiveTextSelectionToolbar_getAdaptiveButtons_closure(context)), t1._eval$1("MappedListIterable<1,Widget>"));
        case 1:
        case 0:
          buttons = B._setArrayType([], type$.JSArray_Widget);
          for (i = 0; t1 = buttonItems.length, i < t1; ++i) {
            buttonItem = buttonItems[i];
            position = A.TextSelectionToolbarTextButton__getPosition(i, t1);
            t1 = A.TextSelectionToolbarTextButton__getLeftPadding(position);
            t2 = A.TextSelectionToolbarTextButton__getRightPadding(position);
            C.JSArray_methods.add$1(buttons, new A.TextSelectionToolbarTextButton(B.Text$(A.AdaptiveTextSelectionToolbar_getButtonLabel(context, buttonItem), _null, _null, _null, _null, _null, _null), buttonItem.onPressed, new B.EdgeInsets(t1, 0, t2, 0), _null));
          }
          return buttons;
        case 3:
        case 5:
          t1 = B._arrayInstanceType(buttonItems);
          return new B.MappedListIterable(buttonItems, t1._eval$1("Widget(1)")._as(new A.AdaptiveTextSelectionToolbar_getAdaptiveButtons_closure0(context)), t1._eval$1("MappedListIterable<1,Widget>"));
        case 4:
          t1 = B._arrayInstanceType(buttonItems);
          return new B.MappedListIterable(buttonItems, t1._eval$1("Widget(1)")._as(new A.AdaptiveTextSelectionToolbar_getAdaptiveButtons_closure1(context)), t1._eval$1("MappedListIterable<1,Widget>"));
      }
    },
    AdaptiveTextSelectionToolbar: function AdaptiveTextSelectionToolbar(t0, t1, t2) {
      this.buttonItems = t0;
      this.anchors = t1;
      this.key = t2;
    },
    AdaptiveTextSelectionToolbar_getAdaptiveButtons_closure: function AdaptiveTextSelectionToolbar_getAdaptiveButtons_closure(t0) {
      this.context = t0;
    },
    AdaptiveTextSelectionToolbar_getAdaptiveButtons_closure0: function AdaptiveTextSelectionToolbar_getAdaptiveButtons_closure0(t0) {
      this.context = t0;
    },
    AdaptiveTextSelectionToolbar_getAdaptiveButtons_closure1: function AdaptiveTextSelectionToolbar_getAdaptiveButtons_closure1(t0) {
      this.context = t0;
    },
    _DesktopTextSelectionHandleControls: function _DesktopTextSelectionHandleControls() {
    },
    DesktopTextSelectionControls: function DesktopTextSelectionControls() {
    },
    __DesktopTextSelectionHandleControls_DesktopTextSelectionControls_TextSelectionHandleControls: function __DesktopTextSelectionHandleControls_DesktopTextSelectionControls_TextSelectionHandleControls() {
    },
    DesktopTextSelectionToolbar: function DesktopTextSelectionToolbar(t0, t1, t2) {
      this.anchor = t0;
      this.children = t1;
      this.key = t2;
    },
    DesktopTextSelectionToolbarButton$text(context, onPressed, text) {
      var _null = null;
      return new A.DesktopTextSelectionToolbarButton(onPressed, B.Text$(text, _null, C.TextOverflow_2, _null, D.TextStyle_Ybt.copyWith$1$color(B.Theme_of(context).colorScheme.brightness === C.Brightness_0 ? C.Color_4294967295 : C.Color_3707764736), _null, _null), _null);
    },
    DesktopTextSelectionToolbarButton: function DesktopTextSelectionToolbarButton(t0, t1, t2) {
      this.onPressed = t0;
      this.child = t1;
      this.key = t2;
    },
    InputBorder: function InputBorder() {
    },
    _NoInputBorder: function _NoInputBorder(t0) {
      this.borderSide = t0;
    },
    UnderlineInputBorder: function UnderlineInputBorder(t0, t1) {
      this.borderRadius = t0;
      this.borderSide = t1;
    },
    InputDecorator$(baseStyle, child, decoration, expands, isEmpty, isFocused, isHovering, textAlign, textAlignVertical) {
      return new A.InputDecorator(decoration, baseStyle, textAlign, textAlignVertical, isFocused, isHovering, false, isEmpty, child, null);
    },
    _InputBorderGap: function _InputBorderGap(t0) {
      var _ = this;
      _._input_decorator$_start = null;
      _.ChangeNotifier__count = _._extent = 0;
      _.ChangeNotifier__listeners = t0;
      _.ChangeNotifier__reentrantlyRemovedListeners = _.ChangeNotifier__notificationCallStackDepth = 0;
      _.ChangeNotifier__creationDispatched = _.ChangeNotifier__debugDisposed = false;
    },
    _InputBorderTween: function _InputBorderTween(t0, t1) {
      this.begin = t0;
      this.end = t1;
    },
    _InputBorderPainter: function _InputBorderPainter(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _.borderAnimation = t0;
      _.border = t1;
      _.gapAnimation = t2;
      _.gap = t3;
      _.textDirection = t4;
      _.fillColor = t5;
      _.hoverColorTween = t6;
      _.hoverAnimation = t7;
      _._repaint = t8;
    },
    _BorderContainer: function _BorderContainer(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.border = t0;
      _.gap = t1;
      _.gapAnimation = t2;
      _.fillColor = t3;
      _.hoverColor = t4;
      _.isHovering = t5;
      _.key = t6;
    },
    _BorderContainerState: function _BorderContainerState(t0, t1, t2) {
      var _ = this;
      _.___BorderContainerState__hoverColorTween_A = _.___BorderContainerState__hoverAnimation_A = _.___BorderContainerState__border_A = _.___BorderContainerState__borderAnimation_A = _.___BorderContainerState__hoverColorController_A = _.___BorderContainerState__controller_A = $;
      _.TickerProviderStateMixin__tickers = t0;
      _.TickerProviderStateMixin__tickerModeNotifier = t1;
      _._widget = null;
      _._debugLifecycleState = t2;
      _._framework$_element = null;
    },
    _HelperError: function _HelperError(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.textAlign = t0;
      _.helperText = t1;
      _.helperStyle = t2;
      _.helperMaxLines = t3;
      _.errorText = t4;
      _.errorStyle = t5;
      _.errorMaxLines = t6;
      _.key = t7;
    },
    _HelperErrorState: function _HelperErrorState(t0, t1, t2) {
      var _ = this;
      _.___HelperErrorState__controller_A = $;
      _._error = _._helper = null;
      _.SingleTickerProviderStateMixin__ticker = t0;
      _.SingleTickerProviderStateMixin__tickerModeNotifier = t1;
      _._widget = null;
      _._debugLifecycleState = t2;
      _._framework$_element = null;
    },
    _HelperErrorState__handleChange_closure: function _HelperErrorState__handleChange_closure() {
    },
    _DecorationSlot: function _DecorationSlot(t0, t1) {
      this.index = t0;
      this._core$_name = t1;
    },
    _Decoration: function _Decoration(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20) {
      var _ = this;
      _.contentPadding = t0;
      _.isCollapsed = t1;
      _.floatingLabelHeight = t2;
      _.floatingLabelProgress = t3;
      _.floatingLabelAlignment = t4;
      _.border = t5;
      _.borderGap = t6;
      _.alignLabelWithHint = t7;
      _.isDense = t8;
      _.visualDensity = t9;
      _.icon = t10;
      _.input = t11;
      _.label = t12;
      _.hint = t13;
      _.prefix = t14;
      _.suffix = t15;
      _.prefixIcon = t16;
      _.suffixIcon = t17;
      _.helperError = t18;
      _.counter = t19;
      _.container = t20;
    },
    _RenderDecorationLayout: function _RenderDecorationLayout(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.boxToBaseline = t0;
      _.inputBaseline = t1;
      _.outlineBaseline = t2;
      _.subtextBaseline = t3;
      _.containerHeight = t4;
      _.subtextHeight = t5;
    },
    _RenderDecoration: function _RenderDecoration(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _._input_decorator$_decoration = t0;
      _._input_decorator$_textDirection = t1;
      _._input_decorator$_textBaseline = t2;
      _._textAlignVertical = t3;
      _._isFocused = t4;
      _._input_decorator$_expands = t5;
      _._material3 = t6;
      _._labelTransform = null;
      _.SlottedContainerRenderObjectMixin__slotToChild = t7;
      _._cachedDryLayoutSizes = _._cachedIntrinsicDimensions = null;
      _._computingThisDryLayout = false;
      _._cachedBaselines = _._size = null;
      _._debugActivePointers = 0;
      _._debugDisposed = false;
      _.debugCreator = _.parentData = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _._debugDoingThisPaint = false;
      _.__RenderObject__wasRepaintBoundary_A = $;
      _._layerHandle = t8;
      _._needsCompositingBitsUpdate = false;
      _.__RenderObject__needsCompositing_A = $;
      _._needsPaint = true;
      _._needsCompositedLayerUpdate = false;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    _RenderDecoration_performLayout_centerLayout: function _RenderDecoration_performLayout_centerLayout(t0) {
      this.height = t0;
    },
    _RenderDecoration_performLayout_baselineLayout: function _RenderDecoration_performLayout_baselineLayout(t0, t1) {
      this.baseline = t0;
      this.layout = t1;
    },
    _RenderDecoration_paint_doPaint: function _RenderDecoration_paint_doPaint(t0, t1) {
      this.context = t0;
      this.offset = t1;
    },
    _RenderDecoration_hitTestChildren_closure: function _RenderDecoration_hitTestChildren_closure(t0, t1, t2) {
      this.position = t0;
      this.offset = t1;
      this.child = t2;
    },
    _Decorator: function _Decorator(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.decoration = t0;
      _.textDirection = t1;
      _.textBaseline = t2;
      _.textAlignVertical = t3;
      _.isFocused = t4;
      _.expands = t5;
      _.key = t6;
    },
    InputDecorator: function InputDecorator(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9) {
      var _ = this;
      _.decoration = t0;
      _.baseStyle = t1;
      _.textAlign = t2;
      _.textAlignVertical = t3;
      _.isFocused = t4;
      _.isHovering = t5;
      _.expands = t6;
      _.isEmpty = t7;
      _.child = t8;
      _.key = t9;
    },
    _InputDecoratorState: function _InputDecoratorState(t0, t1, t2, t3) {
      var _ = this;
      _.___InputDecoratorState__shakingLabelController_A = _.___InputDecoratorState__floatingLabelController_A = $;
      _._borderGap = t0;
      _._effectiveDecoration = null;
      _.TickerProviderStateMixin__tickers = t1;
      _.TickerProviderStateMixin__tickerModeNotifier = t2;
      _._widget = null;
      _._debugLifecycleState = t3;
      _._framework$_element = null;
    },
    _InputDecoratorState__handleChange_closure: function _InputDecoratorState__handleChange_closure() {
    },
    InputDecoration: function InputDecoration(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49) {
      var _ = this;
      _.icon = t0;
      _.iconColor = t1;
      _.label = t2;
      _.labelText = t3;
      _.labelStyle = t4;
      _.floatingLabelStyle = t5;
      _.helperText = t6;
      _.helperStyle = t7;
      _.helperMaxLines = t8;
      _.hintText = t9;
      _.hintStyle = t10;
      _.hintTextDirection = t11;
      _.hintMaxLines = t12;
      _.errorText = t13;
      _.errorStyle = t14;
      _.errorMaxLines = t15;
      _.floatingLabelBehavior = t16;
      _.floatingLabelAlignment = t17;
      _.isDense = t18;
      _.contentPadding = t19;
      _.isCollapsed = t20;
      _.prefixIcon = t21;
      _.prefixIconConstraints = t22;
      _.prefix = t23;
      _.prefixText = t24;
      _.prefixStyle = t25;
      _.prefixIconColor = t26;
      _.suffixIcon = t27;
      _.suffix = t28;
      _.suffixText = t29;
      _.suffixStyle = t30;
      _.suffixIconColor = t31;
      _.suffixIconConstraints = t32;
      _.counterText = t33;
      _.counter = t34;
      _.counterStyle = t35;
      _.filled = t36;
      _.fillColor = t37;
      _.focusColor = t38;
      _.hoverColor = t39;
      _.errorBorder = t40;
      _.focusedBorder = t41;
      _.focusedErrorBorder = t42;
      _.disabledBorder = t43;
      _.enabledBorder = t44;
      _.border = t45;
      _.enabled = t46;
      _.semanticCounterText = t47;
      _.alignLabelWithHint = t48;
      _.constraints = t49;
    },
    _InputDecoratorDefaultsM2: function _InputDecoratorDefaultsM2(t0) {
      this.context = t0;
    },
    _InputDecoratorDefaultsM2_hintStyle_closure: function _InputDecoratorDefaultsM2_hintStyle_closure(t0) {
      this.$this = t0;
    },
    _InputDecoratorDefaultsM2_labelStyle_closure: function _InputDecoratorDefaultsM2_labelStyle_closure(t0) {
      this.$this = t0;
    },
    _InputDecoratorDefaultsM2_floatingLabelStyle_closure: function _InputDecoratorDefaultsM2_floatingLabelStyle_closure(t0) {
      this.$this = t0;
    },
    _InputDecoratorDefaultsM2_helperStyle_closure: function _InputDecoratorDefaultsM2_helperStyle_closure(t0) {
      this.$this = t0;
    },
    _InputDecoratorDefaultsM2_errorStyle_closure: function _InputDecoratorDefaultsM2_errorStyle_closure(t0) {
      this.$this = t0;
    },
    _InputDecoratorDefaultsM2_fillColor_closure: function _InputDecoratorDefaultsM2_fillColor_closure(t0) {
      this.$this = t0;
    },
    _InputDecoratorDefaultsM2_iconColor_closure: function _InputDecoratorDefaultsM2_iconColor_closure(t0) {
      this.$this = t0;
    },
    _InputDecoratorDefaultsM2_prefixIconColor_closure: function _InputDecoratorDefaultsM2_prefixIconColor_closure(t0) {
      this.$this = t0;
    },
    _InputDecoratorDefaultsM2_suffixIconColor_closure: function _InputDecoratorDefaultsM2_suffixIconColor_closure(t0) {
      this.$this = t0;
    },
    __BorderContainerState_State_TickerProviderStateMixin: function __BorderContainerState_State_TickerProviderStateMixin() {
    },
    __Decorator_RenderObjectWidget_SlottedMultiChildRenderObjectWidgetMixin: function __Decorator_RenderObjectWidget_SlottedMultiChildRenderObjectWidgetMixin() {
    },
    __HelperErrorState_State_SingleTickerProviderStateMixin: function __HelperErrorState_State_SingleTickerProviderStateMixin() {
    },
    __InputDecoratorState_State_TickerProviderStateMixin: function __InputDecoratorState_State_TickerProviderStateMixin() {
    },
    __RenderDecoration_RenderBox_SlottedContainerRenderObjectMixin: function __RenderDecoration_RenderBox_SlottedContainerRenderObjectMixin() {
    },
    TextMagnifier: function TextMagnifier(t0, t1) {
      this.magnifierInfo = t0;
      this.key = t1;
    },
    TextMagnifier_adaptiveMagnifierConfiguration_closure: function TextMagnifier_adaptiveMagnifierConfiguration_closure() {
    },
    _TextMagnifierState: function _TextMagnifierState(t0, t1) {
      var _ = this;
      _._positionShouldBeAnimatedTimer = _._magnifierPosition = null;
      _._extraFocalPointOffset = t0;
      _._widget = null;
      _._debugLifecycleState = t1;
      _._framework$_element = null;
    },
    _TextMagnifierState__determineMagnifierPositionAndFocalPoint_closure: function _TextMagnifierState__determineMagnifierPositionAndFocalPoint_closure(t0) {
      this.$this = t0;
    },
    _TextMagnifierState__determineMagnifierPositionAndFocalPoint__closure: function _TextMagnifierState__determineMagnifierPositionAndFocalPoint__closure(t0) {
      this.$this = t0;
    },
    _TextMagnifierState__determineMagnifierPositionAndFocalPoint_closure0: function _TextMagnifierState__determineMagnifierPositionAndFocalPoint_closure0(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.$this = t1;
      _.finalMagnifierPosition = t2;
      _.focalPointAdjustmentForScreenBoundsAdjustment = t3;
    },
    Magnifier: function Magnifier(t0, t1) {
      this.additionalFocalPointOffset = t0;
      this.key = t1;
    },
    _MaterialStateTextStyle$(_resolve) {
      var _null = null;
      return new A._MaterialStateTextStyle(_resolve, true, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null);
    },
    MaterialStateTextStyle: function MaterialStateTextStyle() {
    },
    _MaterialStateTextStyle: function _MaterialStateTextStyle(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26) {
      var _ = this;
      _._material_state$_resolve = t0;
      _.inherit = t1;
      _.color = t2;
      _.backgroundColor = t3;
      _.fontFamily = t4;
      _._text_style$_fontFamilyFallback = t5;
      _._package = t6;
      _.fontSize = t7;
      _.fontWeight = t8;
      _.fontStyle = t9;
      _.letterSpacing = t10;
      _.wordSpacing = t11;
      _.textBaseline = t12;
      _.height = t13;
      _.leadingDistribution = t14;
      _.locale = t15;
      _.foreground = t16;
      _.background = t17;
      _.decoration = t18;
      _.decorationColor = t19;
      _.decorationStyle = t20;
      _.decorationThickness = t21;
      _.debugLabel = t22;
      _.shadows = t23;
      _.fontFeatures = t24;
      _.fontVariations = t25;
      _.overflow = t26;
    },
    TextButton$(child, onPressed, style) {
      var _null = null;
      return new A.TextButton(onPressed, _null, _null, _null, style, C.Clip_0, _null, false, _null, child, _null);
    },
    _scaledPadding(context) {
      var t1 = B.MediaQuery_maybeOf(context);
      t1 = t1 == null ? null : t1.textScaleFactor;
      return A.ButtonStyleButton_scaledPadding(G.EdgeInsets_8_8_8_8, D.EdgeInsets_8_0_8_0, D.EdgeInsets_4_0_4_0, t1 == null ? 1 : t1);
    },
    TextButton: function TextButton(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10) {
      var _ = this;
      _.onPressed = t0;
      _.onLongPress = t1;
      _.onHover = t2;
      _.onFocusChange = t3;
      _.style = t4;
      _.clipBehavior = t5;
      _.focusNode = t6;
      _.autofocus = t7;
      _.statesController = t8;
      _.child = t9;
      _.key = t10;
    },
    TextField$(autofocus, controller, decoration, onChanged, textAlign, textInputAction) {
      return new A.TextField(controller, decoration, D.TextInputType_0_null_null, textInputAction, textAlign, false, D.SmartDashesType_1, D.SmartQuotesType_1, onChanged, true, null);
    },
    TextField__defaultContextMenuBuilder(context, editableTextState) {
      return new A.AdaptiveTextSelectionToolbar(editableTextState.get$contextMenuButtonItems(), editableTextState.get$contextMenuAnchors(), null);
    },
    _TextFieldSelectionGestureDetectorBuilder: function _TextFieldSelectionGestureDetectorBuilder(t0, t1) {
      var _ = this;
      _._text_field$_state = t0;
      _.delegate = t1;
      _._shouldShowSelectionToolbar = true;
      _._dragStartViewportOffset = _._dragStartScrollOffset = 0;
      _._isShiftTapping = false;
      _._shiftTapDragSelection = null;
    },
    TextField: function TextField(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10) {
      var _ = this;
      _.controller = t0;
      _.decoration = t1;
      _.keyboardType = t2;
      _.textInputAction = t3;
      _.textAlign = t4;
      _.autofocus = t5;
      _.smartDashesType = t6;
      _.smartQuotesType = t7;
      _.onChanged = t8;
      _.enableInteractiveSelection = t9;
      _.key = t10;
    },
    _TextFieldState: function _TextFieldState(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._focusNode = _._text_field$_controller = null;
      _._showSelectionHandles = _._isHovering = false;
      _.___TextFieldState_forcePressEnabled_A = _.___TextFieldState__selectionGestureDetectorBuilder_A = $;
      _.editableTextKey = t0;
      _.RestorationMixin__bucket = t1;
      _.RestorationMixin__properties = t2;
      _.RestorationMixin__debugPropertiesWaitingForReregistration = t3;
      _.RestorationMixin__firstRestorePending = t4;
      _.RestorationMixin__currentParent = t5;
      _._widget = null;
      _._debugLifecycleState = t6;
      _._framework$_element = null;
    },
    _TextFieldState__handleFocusChanged_closure: function _TextFieldState__handleFocusChanged_closure() {
    },
    _TextFieldState__handleSelectionChanged_closure: function _TextFieldState__handleSelectionChanged_closure(t0, t1) {
      this.$this = t0;
      this.willShowSelectionHandles = t1;
    },
    _TextFieldState__handleHover_closure: function _TextFieldState__handleHover_closure(t0, t1) {
      this.$this = t0;
      this.hovering = t1;
    },
    _TextFieldState_build_closure: function _TextFieldState_build_closure(t0) {
      this.$this = t0;
    },
    _TextFieldState_build_closure0: function _TextFieldState_build_closure0(t0) {
      this.$this = t0;
    },
    _TextFieldState_build_closure1: function _TextFieldState_build_closure1(t0, t1, t2) {
      this.$this = t0;
      this.focusNode = t1;
      this.controller = t2;
    },
    _TextFieldState_build_closure3: function _TextFieldState_build_closure3(t0) {
      this.$this = t0;
    },
    _TextFieldState_build_closure4: function _TextFieldState_build_closure4(t0) {
      this.$this = t0;
    },
    _TextFieldState_build_closure2: function _TextFieldState_build_closure2(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _TextFieldState_build__closure: function _TextFieldState_build__closure(t0) {
      this.$this = t0;
    },
    __TextFieldState_State_RestorationMixin_dispose_closure: function __TextFieldState_State_RestorationMixin_dispose_closure() {
    },
    __TextFieldState_State_RestorationMixin: function __TextFieldState_State_RestorationMixin() {
    },
    MaterialTextSelectionHandleControls: function MaterialTextSelectionHandleControls() {
    },
    MaterialTextSelectionControls: function MaterialTextSelectionControls() {
    },
    _TextSelectionHandlePainter: function _TextSelectionHandlePainter(t0, t1) {
      this.color = t0;
      this._repaint = t1;
    },
    _MaterialTextSelectionHandleControls_MaterialTextSelectionControls_TextSelectionHandleControls: function _MaterialTextSelectionHandleControls_MaterialTextSelectionControls_TextSelectionHandleControls() {
    },
    TextSelectionToolbar$(anchorAbove, anchorBelow, children) {
      return new A.TextSelectionToolbar(anchorAbove, anchorBelow, children, null);
    },
    TextSelectionToolbar__defaultToolbarBuilder(context, child) {
      type$.BuildContext._as(context);
      return new A._TextSelectionToolbarContainer(type$.Widget._as(child), null);
    },
    TextSelectionToolbar: function TextSelectionToolbar(t0, t1, t2, t3) {
      var _ = this;
      _.anchorAbove = t0;
      _.anchorBelow = t1;
      _.children = t2;
      _.key = t3;
    },
    _TextSelectionToolbarOverflowable: function _TextSelectionToolbarOverflowable(t0, t1, t2, t3) {
      var _ = this;
      _.children = t0;
      _.isAbove = t1;
      _.toolbarBuilder = t2;
      _.key = t3;
    },
    _TextSelectionToolbarOverflowableState: function _TextSelectionToolbarOverflowableState(t0, t1, t2, t3) {
      var _ = this;
      _._overflowOpen = false;
      _._containerKey = t0;
      _.TickerProviderStateMixin__tickers = t1;
      _.TickerProviderStateMixin__tickerModeNotifier = t2;
      _._widget = null;
      _._debugLifecycleState = t3;
      _._framework$_element = null;
    },
    _TextSelectionToolbarOverflowableState_build_closure: function _TextSelectionToolbarOverflowableState_build_closure(t0) {
      this.$this = t0;
    },
    _TextSelectionToolbarOverflowableState_build__closure: function _TextSelectionToolbarOverflowableState_build__closure(t0) {
      this.$this = t0;
    },
    _TextSelectionToolbarTrailingEdgeAlign: function _TextSelectionToolbarTrailingEdgeAlign(t0, t1, t2, t3) {
      var _ = this;
      _.overflowOpen = t0;
      _.textDirection = t1;
      _.child = t2;
      _.key = t3;
    },
    _TextSelectionToolbarTrailingEdgeAlignRenderBox: function _TextSelectionToolbarTrailingEdgeAlignRenderBox(t0, t1, t2, t3) {
      var _ = this;
      _._closedWidth = null;
      _._overflowOpen = t0;
      _._text_selection_toolbar$_textDirection = t1;
      _.RenderObjectWithChildMixin__child = t2;
      _._cachedDryLayoutSizes = _._cachedIntrinsicDimensions = null;
      _._computingThisDryLayout = false;
      _._cachedBaselines = _._size = null;
      _._debugActivePointers = 0;
      _._debugDisposed = false;
      _.debugCreator = _.parentData = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _._debugDoingThisPaint = false;
      _.__RenderObject__wasRepaintBoundary_A = $;
      _._layerHandle = t3;
      _._needsCompositingBitsUpdate = false;
      _.__RenderObject__needsCompositing_A = $;
      _._needsPaint = true;
      _._needsCompositedLayerUpdate = false;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    _TextSelectionToolbarTrailingEdgeAlignRenderBox_hitTestChildren_closure: function _TextSelectionToolbarTrailingEdgeAlignRenderBox_hitTestChildren_closure(t0, t1, t2) {
      this.$this = t0;
      this.position = t1;
      this.childParentData = t2;
    },
    _TextSelectionToolbarItemsLayout: function _TextSelectionToolbarItemsLayout(t0, t1, t2, t3) {
      var _ = this;
      _.isAbove = t0;
      _.overflowOpen = t1;
      _.children = t2;
      _.key = t3;
    },
    _TextSelectionToolbarItemsLayoutElement: function _TextSelectionToolbarItemsLayoutElement(t0, t1, t2) {
      var _ = this;
      _.__MultiChildRenderObjectElement__children_A = $;
      _._forgottenChildren = t0;
      _._renderObject = null;
      _._debugDoingBuild = false;
      _._slot = _._notificationTree = _._debugReassembleConfig = _._framework$_parent = _._ancestorRenderObjectElement = null;
      _.__Element__depth_A = $;
      _._widget = t1;
      _._owner = null;
      _._lifecycleState = t2;
      _._dependencies = _._inheritedWidgets = null;
      _._hadUnsatisfiedDependencies = false;
      _._dirty = true;
      _._debugBuiltOnce = _._inDirtyList = false;
    },
    _RenderTextSelectionToolbarItemsLayout: function _RenderTextSelectionToolbarItemsLayout(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._lastIndexThatFits = -1;
      _._isAbove = t0;
      _._overflowOpen = t1;
      _.ContainerRenderObjectMixin__childCount = t2;
      _.ContainerRenderObjectMixin__firstChild = t3;
      _.ContainerRenderObjectMixin__lastChild = t4;
      _._cachedDryLayoutSizes = _._cachedIntrinsicDimensions = null;
      _._computingThisDryLayout = false;
      _._cachedBaselines = _._size = null;
      _._debugActivePointers = 0;
      _._debugDisposed = false;
      _.debugCreator = _.parentData = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _._debugDoingThisPaint = false;
      _.__RenderObject__wasRepaintBoundary_A = $;
      _._layerHandle = t5;
      _._needsCompositingBitsUpdate = false;
      _.__RenderObject__needsCompositing_A = $;
      _._needsPaint = true;
      _._needsCompositedLayerUpdate = false;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    _RenderTextSelectionToolbarItemsLayout__layoutChildren_closure: function _RenderTextSelectionToolbarItemsLayout__layoutChildren_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.sizedConstraints = t2;
    },
    _RenderTextSelectionToolbarItemsLayout__placeChildren_closure: function _RenderTextSelectionToolbarItemsLayout__placeChildren_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.navButton = t2;
    },
    _RenderTextSelectionToolbarItemsLayout_paint_closure: function _RenderTextSelectionToolbarItemsLayout_paint_closure(t0, t1) {
      this.context = t0;
      this.offset = t1;
    },
    _RenderTextSelectionToolbarItemsLayout_hitTestChildren_closure: function _RenderTextSelectionToolbarItemsLayout_hitTestChildren_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.position = t1;
      this.childParentData = t2;
    },
    _RenderTextSelectionToolbarItemsLayout_visitChildrenForSemantics_closure: function _RenderTextSelectionToolbarItemsLayout_visitChildrenForSemantics_closure(t0) {
      this.visitor = t0;
    },
    _TextSelectionToolbarContainer: function _TextSelectionToolbarContainer(t0, t1) {
      this.child = t0;
      this.key = t1;
    },
    _TextSelectionToolbarOverflowButton: function _TextSelectionToolbarOverflowButton(t0, t1, t2, t3) {
      var _ = this;
      _.icon = t0;
      _.onPressed = t1;
      _.tooltip = t2;
      _.key = t3;
    },
    __RenderTextSelectionToolbarItemsLayout_RenderBox_ContainerRenderObjectMixin: function __RenderTextSelectionToolbarItemsLayout_RenderBox_ContainerRenderObjectMixin() {
    },
    __TextSelectionToolbarOverflowableState_State_TickerProviderStateMixin: function __TextSelectionToolbarOverflowableState_State_TickerProviderStateMixin() {
    },
    TextSelectionToolbarTextButton__getLeftPadding(position) {
      if (position === D._TextSelectionToolbarItemPosition_0 || position === D._TextSelectionToolbarItemPosition_3)
        return 14.5;
      return 9.5;
    },
    TextSelectionToolbarTextButton__getRightPadding(position) {
      if (position === D._TextSelectionToolbarItemPosition_2 || position === D._TextSelectionToolbarItemPosition_3)
        return 14.5;
      return 9.5;
    },
    TextSelectionToolbarTextButton__getPosition(index, total) {
      if (index === 0)
        return total === 1 ? D._TextSelectionToolbarItemPosition_3 : D._TextSelectionToolbarItemPosition_0;
      if (index === total - 1)
        return D._TextSelectionToolbarItemPosition_2;
      return D._TextSelectionToolbarItemPosition_1;
    },
    _TextSelectionToolbarItemPosition: function _TextSelectionToolbarItemPosition(t0, t1) {
      this.index = t0;
      this._core$_name = t1;
    },
    TextSelectionToolbarTextButton: function TextSelectionToolbarTextButton(t0, t1, t2, t3) {
      var _ = this;
      _.child = t0;
      _.onPressed = t1;
      _.padding = t2;
      _.key = t3;
    },
    TextAlignVertical: function TextAlignVertical(t0) {
      this.y = t0;
    },
    PlaceholderSpan: function PlaceholderSpan() {
    },
    ShapeDecoration_ShapeDecoration$fromBoxDecoration(source) {
      var t1, shape, t2;
      switch (source.shape.index) {
        case 1:
          t1 = source.border;
          shape = t1 != null ? new B.CircleBorder(0, t1.get$top(t1)) : C.CircleBorder_Umb;
          break;
        case 0:
          t1 = source.borderRadius;
          shape = source.border;
          if (t1 != null) {
            t2 = shape == null ? null : shape.get$top(shape);
            shape = new B.RoundedRectangleBorder(t1, t2 == null ? C.BorderSide_8xm : t2);
          } else if (shape == null)
            shape = D.Border_bWW;
          break;
        default:
          shape = null;
      }
      return new A.ShapeDecoration(source.color, source.gradient, source.image, source.boxShadow, shape);
    },
    ShapeDecoration_lerp(a, b, t) {
      var t2, t3, t4, t5, t6, _null = null,
        t1 = a == null;
      if (t1 && b == null)
        return _null;
      if (!t1 && b != null) {
        if (t === 0)
          return a;
        if (t === 1)
          return b;
      }
      t2 = t1 ? _null : a.color;
      t3 = b == null;
      t2 = B.Color_lerp(t2, t3 ? _null : b.color, t);
      t4 = t1 ? _null : a.gradient;
      t4 = B.Gradient_lerp(t4, t3 ? _null : b.gradient, t);
      t5 = t < 0.5 ? a.image : b.image;
      t6 = t1 ? _null : a.shadows;
      t6 = B.BoxShadow_lerpList(t6, t3 ? _null : b.shadows, t);
      t1 = t1 ? _null : a.shape;
      t1 = B.ShapeBorder_lerp(t1, t3 ? _null : b.shape, t);
      t1.toString;
      return new A.ShapeDecoration(t2, t4, t5, t6, t1);
    },
    ShapeDecoration: function ShapeDecoration(t0, t1, t2, t3, t4) {
      var _ = this;
      _.color = t0;
      _.gradient = t1;
      _.image = t2;
      _.shadows = t3;
      _.shape = t4;
    },
    _ShapeDecorationPainter: function _ShapeDecorationPainter(t0, t1) {
      var _ = this;
      _._shape_decoration$_decoration = t0;
      _._lastTextDirection = _._lastRect = null;
      _.___ShapeDecorationPainter__outerPath_A = $;
      _._shadowCount = _._interiorPaint = _._innerPath = null;
      _.___ShapeDecorationPainter__shadowPaints_A = _.___ShapeDecorationPainter__shadowPaths_A = _.___ShapeDecorationPainter__shadowBounds_A = $;
      _._imagePainter = null;
      _.onChanged = t1;
    },
    _ShapeDecorationPainter__precache_closure: function _ShapeDecorationPainter__precache_closure() {
    },
    _ShapeDecorationPainter__precache_closure0: function _ShapeDecorationPainter__precache_closure0(t0) {
      this.rect = t0;
    },
    _ShapeDecorationPainter__precache_closure1: function _ShapeDecorationPainter__precache_closure1(t0, t1, t2) {
      this.$this = t0;
      this.rect = t1;
      this.textDirection = t2;
    },
    StrutStyle: function StrutStyle(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _.fontFamily = t0;
      _._strut_style$_fontFamilyFallback = t1;
      _.fontSize = t2;
      _.height = t3;
      _.fontWeight = t4;
      _.fontStyle = t5;
      _.leading = t6;
      _.forceStrutHeight = t7;
      _.debugLabel = t8;
    },
    _StrutStyle_Object_Diagnosticable: function _StrutStyle_Object_Diagnosticable() {
    },
    RenderAnimatedSize$(alignment, clipBehavior, curve, duration, reverseDuration, textDirection, vsync) {
      var _null = null,
        t1 = new A.RenderAnimatedSize(new A.SizeTween(_null, _null), D.RenderAnimatedSizeState_0, clipBehavior, vsync, B.LayerHandle$(type$.ClipRectLayer), alignment, textDirection, _null, B.LayerHandle$(type$.ContainerLayer));
      t1.RenderObject$0();
      t1.set$child(_null);
      t1.RenderAnimatedSize$8$alignment$child$clipBehavior$curve$duration$reverseDuration$textDirection$vsync(alignment, _null, clipBehavior, curve, duration, reverseDuration, textDirection, vsync);
      return t1;
    },
    RenderAnimatedSizeState: function RenderAnimatedSizeState(t0, t1) {
      this.index = t0;
      this._core$_name = t1;
    },
    RenderAnimatedSize: function RenderAnimatedSize(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _.__RenderAnimatedSize__animation_F = _.__RenderAnimatedSize__controller_F = $;
      _._sizeTween = t0;
      _.__RenderAnimatedSize__hasVisualOverflow_A = $;
      _._animated_size$_lastValue = null;
      _._animated_size$_state = t1;
      _._animated_size$_clipBehavior = t2;
      _._vsync = t3;
      _._animated_size$_clipRectLayer = t4;
      _._shifted_box$_resolvedAlignment = null;
      _._shifted_box$_alignment = t5;
      _._shifted_box$_textDirection = t6;
      _.RenderObjectWithChildMixin__child = t7;
      _._cachedDryLayoutSizes = _._cachedIntrinsicDimensions = null;
      _._computingThisDryLayout = false;
      _._cachedBaselines = _._size = null;
      _._debugActivePointers = 0;
      _._debugDisposed = false;
      _.debugCreator = _.parentData = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _._debugDoingThisPaint = false;
      _.__RenderObject__wasRepaintBoundary_A = $;
      _._layerHandle = t8;
      _._needsCompositingBitsUpdate = false;
      _.__RenderObject__needsCompositing_A = $;
      _._needsPaint = true;
      _._needsCompositedLayerUpdate = false;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    RenderAnimatedSize_closure: function RenderAnimatedSize_closure(t0) {
      this.$this = t0;
    },
    _RenderEditableCustomPaint$(painter) {
      var t1 = new A._RenderEditableCustomPaint(painter, B.LayerHandle$(type$.ContainerLayer));
      t1.RenderObject$0();
      return t1;
    },
    _TextHighlightPainter$() {
      return new A._TextHighlightPainter($.$get$_renderer().createPaint$0(), C.BoxHeightStyle_0, C.BoxWidthStyle_0, $.$get$ChangeNotifier__emptyListeners());
    },
    TextSelectionPoint: function TextSelectionPoint(t0, t1) {
      this.point = t0;
      this.direction = t1;
    },
    VerticalCaretMovementRun: function VerticalCaretMovementRun(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._currentOffset = t0;
      _._currentLine = t1;
      _._currentTextPosition = t2;
      _._lineMetrics = t3;
      _._editable = t4;
      _._isValid = true;
      _._positionCache = t5;
    },
    RenderEditable: function RenderEditable(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t30, t31, t32) {
      var _ = this;
      _._backgroundRenderObject = _._foregroundRenderObject = null;
      _.__RenderEditable__placeholderSpans_A = $;
      _._editable$_painter = _._editable$_foregroundPainter = null;
      _.__RenderEditable__caretPainter_FI = $;
      _._selectionPainter = t0;
      _._autocorrectHighlightPainter = t1;
      _._lastCaretRect = _._textLayoutLastMinWidth = _._textLayoutLastMaxWidth = _._cachedBuiltInPainters = _._cachedBuiltInForegroundPainters = null;
      _.onCaretChanged = t2;
      _.ignorePointer = t3;
      _._editable$_devicePixelRatio = t4;
      _._obscuringCharacter = t5;
      _._obscureText = t6;
      _.textSelectionDelegate = t7;
      _._selectionStartInViewport = t8;
      _._selectionEndInViewport = t9;
      _._editable$_textPainter = t10;
      _._editable$_cachedCombinedSemanticsInfos = _._cachedAttributedValue = null;
      _._showCursor = t11;
      _._editable$_hasFocus = t12;
      _._forceLine = t13;
      _._readOnly = t14;
      _._editable$_maxLines = t15;
      _._minLines = t16;
      _._expands = t17;
      _._selection = t18;
      _._editable$_offset = t19;
      _._cursorWidth = t20;
      _._cursorHeight = t21;
      _._paintCursorOnTop = t22;
      _._editable$_startHandleLayerLink = t23;
      _._editable$_endHandleLayerLink = t24;
      _._floatingCursorOn = false;
      _.__RenderEditable__floatingCursorTextPosition_A = $;
      _._enableInteractiveSelection = t25;
      _._editable$_maxScrollExtent = 0;
      _._editable$_clipBehavior = t26;
      _._cachedLineBreakCount = _._editable$_cachedChildNodes = _._editable$_semanticsInfo = null;
      _.__RenderEditable__longPress_A = _.__RenderEditable__tap_A = $;
      _._editable$_placeholderDimensions = _._lastSecondaryTapDownPosition = _._lastTapDownPosition = null;
      _.__RenderEditable__caretPrototype_A = $;
      _._relativeOrigin = t27;
      _._previousOffset = null;
      _._resetOriginOnBottom = _._resetOriginOnTop = _._resetOriginOnRight = _._resetOriginOnLeft = false;
      _._resetFloatingCursorAnimationValue = null;
      _._editable$_clipRectLayer = t28;
      _.ContainerRenderObjectMixin__childCount = t29;
      _.ContainerRenderObjectMixin__firstChild = t30;
      _.ContainerRenderObjectMixin__lastChild = t31;
      _._cachedDryLayoutSizes = _._cachedIntrinsicDimensions = null;
      _._computingThisDryLayout = false;
      _._cachedBaselines = _._size = null;
      _._debugActivePointers = 0;
      _._debugDisposed = false;
      _.debugCreator = _.parentData = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _._debugDoingThisPaint = false;
      _.__RenderObject__wasRepaintBoundary_A = $;
      _._layerHandle = t32;
      _._needsCompositingBitsUpdate = false;
      _.__RenderObject__needsCompositing_A = $;
      _._needsPaint = true;
      _._needsCompositedLayerUpdate = false;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    RenderEditable__extractPlaceholderSpans_closure: function RenderEditable__extractPlaceholderSpans_closure(t0) {
      this.$this = t0;
    },
    RenderEditable_getBoxesForSelection_closure: function RenderEditable_getBoxesForSelection_closure(t0) {
      this.$this = t0;
    },
    RenderEditable_describeSemanticsConfiguration_closure: function RenderEditable_describeSemanticsConfiguration_closure() {
    },
    RenderEditable__createShowOnScreenFor_closure: function RenderEditable__createShowOnScreenFor_closure(t0, t1) {
      this.$this = t0;
      this.key = t1;
    },
    RenderEditable_getRectForComposingRange_closure: function RenderEditable_getRectForComposingRange_closure() {
    },
    RenderEditable_hitTestChildren_closure: function RenderEditable_hitTestChildren_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.position = t1;
      this.textParentData = t2;
    },
    RenderEditable__paintContents_closure: function RenderEditable__paintContents_closure(t0) {
      this._box_0 = t0;
    },
    _RenderEditableCustomPaint: function _RenderEditableCustomPaint(t0, t1) {
      var _ = this;
      _._editable$_painter = t0;
      _._cachedDryLayoutSizes = _._cachedIntrinsicDimensions = null;
      _._computingThisDryLayout = false;
      _._cachedBaselines = _._size = null;
      _._debugActivePointers = 0;
      _._debugDisposed = false;
      _.debugCreator = _.parentData = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _._debugDoingThisPaint = false;
      _.__RenderObject__wasRepaintBoundary_A = $;
      _._layerHandle = t1;
      _._needsCompositingBitsUpdate = false;
      _.__RenderObject__needsCompositing_A = $;
      _._needsPaint = true;
      _._needsCompositedLayerUpdate = false;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    RenderEditablePainter: function RenderEditablePainter() {
    },
    _TextHighlightPainter: function _TextHighlightPainter(t0, t1, t2, t3) {
      var _ = this;
      _.highlightPaint = t0;
      _._highlightedRange = _._editable$_highlightColor = null;
      _._selectionHeightStyle = t1;
      _._selectionWidthStyle = t2;
      _.ChangeNotifier__count = 0;
      _.ChangeNotifier__listeners = t3;
      _.ChangeNotifier__reentrantlyRemovedListeners = _.ChangeNotifier__notificationCallStackDepth = 0;
      _.ChangeNotifier__creationDispatched = _.ChangeNotifier__debugDisposed = false;
    },
    _FloatingCursorPainter: function _FloatingCursorPainter(t0, t1, t2, t3) {
      var _ = this;
      _._shouldPaint = true;
      _.caretPaintCallback = t0;
      _.showRegularCaret = false;
      _.caretPaint = t1;
      _.___FloatingCursorPainter_floatingCursorPaint_FI = $;
      _._cursorRadius = _._caretColor = null;
      _._cursorOffset = t2;
      _._floatingCursorRect = _._backgroundCursorColor = null;
      _.ChangeNotifier__count = 0;
      _.ChangeNotifier__listeners = t3;
      _.ChangeNotifier__reentrantlyRemovedListeners = _.ChangeNotifier__notificationCallStackDepth = 0;
      _.ChangeNotifier__creationDispatched = _.ChangeNotifier__debugDisposed = false;
    },
    _CompositeRenderEditablePainter: function _CompositeRenderEditablePainter(t0, t1) {
      var _ = this;
      _.painters = t0;
      _.ChangeNotifier__count = 0;
      _.ChangeNotifier__listeners = t1;
      _.ChangeNotifier__reentrantlyRemovedListeners = _.ChangeNotifier__notificationCallStackDepth = 0;
      _.ChangeNotifier__creationDispatched = _.ChangeNotifier__debugDisposed = false;
    },
    _RenderEditable_RenderBox_RelayoutWhenSystemFontsChangeMixin: function _RenderEditable_RenderBox_RelayoutWhenSystemFontsChangeMixin() {
    },
    _RenderEditable_RenderBox_RelayoutWhenSystemFontsChangeMixin_ContainerRenderObjectMixin: function _RenderEditable_RenderBox_RelayoutWhenSystemFontsChangeMixin_ContainerRenderObjectMixin() {
    },
    _RenderEditable_RenderBox_RelayoutWhenSystemFontsChangeMixin_ContainerRenderObjectMixin_RenderBoxContainerDefaultsMixin: function _RenderEditable_RenderBox_RelayoutWhenSystemFontsChangeMixin_ContainerRenderObjectMixin_RenderBoxContainerDefaultsMixin() {
    },
    FollowerLayer__collectTransformForLayerChain(layers) {
      var index, t1, t2, t3,
        result = new B.Matrix4(new Float64Array(16));
      result.setIdentity$0();
      for (index = layers.length - 1; index > 0; --index) {
        t1 = layers.length;
        if (!(index < t1))
          return B.ioore(layers, index);
        t2 = layers[index];
        if (t2 != null) {
          t3 = index - 1;
          if (!(t3 < t1))
            return B.ioore(layers, t3);
          t2.applyTransform$2(layers[t3], result);
        }
      }
      return result;
    },
    FollowerLayer__pathsToCommonAncestor(a, b, ancestorsA, ancestorsB) {
      var t1, t2;
      if (a == null || b == null)
        return null;
      if (a === b)
        return a;
      t1 = a._depth;
      t2 = b._depth;
      if (t1 < t2) {
        t1 = type$.nullable_ContainerLayer;
        C.JSArray_methods.add$1(ancestorsB, t1._as(B.AbstractNode.prototype.get$parent.call(b, b)));
        return A.FollowerLayer__pathsToCommonAncestor(a, t1._as(B.AbstractNode.prototype.get$parent.call(b, b)), ancestorsA, ancestorsB);
      } else if (t1 > t2) {
        t1 = type$.nullable_ContainerLayer;
        C.JSArray_methods.add$1(ancestorsA, t1._as(B.AbstractNode.prototype.get$parent.call(a, a)));
        return A.FollowerLayer__pathsToCommonAncestor(t1._as(B.AbstractNode.prototype.get$parent.call(a, a)), b, ancestorsA, ancestorsB);
      }
      t1 = type$.nullable_ContainerLayer;
      C.JSArray_methods.add$1(ancestorsA, t1._as(B.AbstractNode.prototype.get$parent.call(a, a)));
      C.JSArray_methods.add$1(ancestorsB, t1._as(B.AbstractNode.prototype.get$parent.call(b, b)));
      return A.FollowerLayer__pathsToCommonAncestor(t1._as(B.AbstractNode.prototype.get$parent.call(a, a)), t1._as(B.AbstractNode.prototype.get$parent.call(b, b)), ancestorsA, ancestorsB);
    },
    LayerLink: function LayerLink() {
      var _ = this;
      _._debugPreviousLeaders = _._leader = null;
      _._debugLeaderCheckScheduled = false;
      _.leaderSize = null;
    },
    FollowerLayer: function FollowerLayer(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._layer$_link = t0;
      _.showWhenUnlinked = t1;
      _.unlinkedOffset = t2;
      _.linkedOffset = t3;
      _._invertedTransform = _._layer$_lastTransform = _._lastOffset = null;
      _._inverseDirty = true;
      _._layer$_lastChild = _._layer$_firstChild = null;
      _._layer$_callbacks = t4;
      _._compositionCallbackCount = 0;
      _._layer$_debugDisposed = _._layer$_debugMutationsLocked = false;
      _._parentHandle = t5;
      _._layer$_refCount = 0;
      _._needsAddToScene = true;
      _.debugCreator = _._previousSibling = _._nextSibling = _._engineLayer = null;
      _._depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    RenderLeaderLayer: function RenderLeaderLayer(t0, t1, t2) {
      var _ = this;
      _._proxy_box$_link = t0;
      _._previousLayoutSize = null;
      _.RenderObjectWithChildMixin__child = t1;
      _._cachedDryLayoutSizes = _._cachedIntrinsicDimensions = null;
      _._computingThisDryLayout = false;
      _._cachedBaselines = _._size = null;
      _._debugActivePointers = 0;
      _._debugDisposed = false;
      _.debugCreator = _.parentData = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _._debugDoingThisPaint = false;
      _.__RenderObject__wasRepaintBoundary_A = $;
      _._layerHandle = t2;
      _._needsCompositingBitsUpdate = false;
      _.__RenderObject__needsCompositing_A = $;
      _._needsPaint = true;
      _._needsCompositedLayerUpdate = false;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    RenderFollowerLayer: function RenderFollowerLayer(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._proxy_box$_link = t0;
      _._showWhenUnlinked = t1;
      _._proxy_box$_offset = t2;
      _._leaderAnchor = t3;
      _._followerAnchor = t4;
      _.RenderObjectWithChildMixin__child = t5;
      _._cachedDryLayoutSizes = _._cachedIntrinsicDimensions = null;
      _._computingThisDryLayout = false;
      _._cachedBaselines = _._size = null;
      _._debugActivePointers = 0;
      _._debugDisposed = false;
      _.debugCreator = _.parentData = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _._debugDoingThisPaint = false;
      _.__RenderObject__wasRepaintBoundary_A = $;
      _._layerHandle = t6;
      _._needsCompositingBitsUpdate = false;
      _.__RenderObject__needsCompositing_A = $;
      _._needsPaint = true;
      _._needsCompositedLayerUpdate = false;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    RenderFollowerLayer_hitTestChildren_closure: function RenderFollowerLayer_hitTestChildren_closure(t0) {
      this.$this = t0;
    },
    AutofillConfiguration: function AutofillConfiguration(t0, t1, t2, t3, t4) {
      var _ = this;
      _.enabled = t0;
      _.uniqueIdentifier = t1;
      _.autofillHints = t2;
      _.currentEditingValue = t3;
      _.hintText = t4;
    },
    Clipboard_setData(data) {
      var $async$goto = 0,
        $async$completer = B._makeAsyncAwaitCompleter(type$.void);
      var $async$Clipboard_setData = B._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return B._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return B._asyncAwait(C.OptionalMethodChannel_cWd.invokeMethod$1$2("Clipboard.setData", B.LinkedHashMap_LinkedHashMap$_literal(["text", data.text], type$.String, type$.dynamic), type$.void), $async$Clipboard_setData);
            case 2:
              // returning from await.
              // implicit return
              return B._asyncReturn(null, $async$completer);
          }
      });
      return B._asyncStartSync($async$Clipboard_setData, $async$completer);
    },
    Clipboard_getData(format) {
      var $async$goto = 0,
        $async$completer = B._makeAsyncAwaitCompleter(type$.nullable_ClipboardData),
        $async$returnValue, result;
      var $async$Clipboard_getData = B._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return B._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return B._asyncAwait(C.OptionalMethodChannel_cWd.invokeMethod$1$2("Clipboard.getData", format, type$.Map_String_dynamic), $async$Clipboard_getData);
            case 3:
              // returning from await.
              result = $async$result;
              if (result == null) {
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              }
              $async$returnValue = new A.ClipboardData(B._asStringQ(J.$index$asx(result, "text")));
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return B._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return B._asyncStartSync($async$Clipboard_getData, $async$completer);
    },
    ClipboardData: function ClipboardData(t0) {
      this.text = t0;
    },
    DefaultSpellCheckService_mergeResults(oldResults, newResults) {
      var oldSpan, newSpan, t2, t3,
        mergedResults = B._setArrayType([], type$.JSArray_SuggestionSpan),
        t1 = J.getInterceptor$asx(oldResults),
        oldSpanPointer = 0, newSpanPointer = 0;
      while (true) {
        if (!(oldSpanPointer < t1.get$length(oldResults) && newSpanPointer < newResults.length))
          break;
        oldSpan = t1.$index(oldResults, oldSpanPointer);
        if (!(newSpanPointer < newResults.length))
          return B.ioore(newResults, newSpanPointer);
        newSpan = newResults[newSpanPointer];
        t2 = oldSpan.range.start;
        t3 = newSpan.range.start;
        if (t2 === t3) {
          C.JSArray_methods.add$1(mergedResults, oldSpan);
          ++oldSpanPointer;
          ++newSpanPointer;
        } else if (t2 < t3) {
          C.JSArray_methods.add$1(mergedResults, oldSpan);
          ++oldSpanPointer;
        } else {
          C.JSArray_methods.add$1(mergedResults, newSpan);
          ++newSpanPointer;
        }
      }
      C.JSArray_methods.addAll$1(mergedResults, t1.sublist$1(oldResults, oldSpanPointer));
      C.JSArray_methods.addAll$1(mergedResults, C.JSArray_methods.sublist$1(newResults, newSpanPointer));
      return mergedResults;
    },
    SuggestionSpan: function SuggestionSpan(t0, t1) {
      this.range = t0;
      this.suggestions = t1;
    },
    SpellCheckResults: function SpellCheckResults(t0, t1) {
      this.spellCheckedText = t0;
      this.suggestionSpans = t1;
    },
    DefaultSpellCheckService: function DefaultSpellCheckService() {
      this.lastSavedResults = null;
      this.__DefaultSpellCheckService_spellCheckChannel_A = $;
    },
    LengthLimitingTextInputFormatter_getDefaultMaxLengthEnforcement(platform) {
      return D.MaxLengthEnforcement_2;
    },
    MaxLengthEnforcement: function MaxLengthEnforcement(t0, t1) {
      this.index = t0;
      this._core$_name = t1;
    },
    TextInputFormatter: function TextInputFormatter() {
    },
    _MutableTextRange: function _MutableTextRange(t0, t1) {
      this.base = t0;
      this.extent = t1;
    },
    _TextEditingValueAccumulator: function _TextEditingValueAccumulator(t0, t1, t2, t3) {
      var _ = this;
      _.inputValue = t0;
      _.stringBuffer = t1;
      _.selection = t2;
      _.composingRegion = t3;
      _.debugFinalized = false;
    },
    FilteringTextInputFormatter: function FilteringTextInputFormatter(t0, t1, t2) {
      this.filterPattern = t0;
      this.allow = t1;
      this.replacementString = t2;
    },
    FilteringTextInputFormatter__processRegion_adjustIndex: function FilteringTextInputFormatter__processRegion_adjustIndex(t0, t1, t2) {
      this.regionStart = t0;
      this.regionEnd = t1;
      this.replacementString = t2;
    },
    TextInputConfiguration$(autocorrect, autofillConfiguration, enableDeltaModel, enableIMEPersonalizedLearning, enableInteractiveSelection, enableSuggestions, inputAction, inputType, keyboardAppearance, obscureText, readOnly, smartDashesType, smartQuotesType, textCapitalization) {
      return new A.TextInputConfiguration(inputType, readOnly, false, true, autofillConfiguration, smartDashesType, smartQuotesType, true, enableInteractiveSelection, inputAction, textCapitalization, keyboardAppearance, true, false);
    },
    TextInputConnection$_(_client) {
      var t1 = B._setArrayType([], type$.JSArray_SelectionRect),
        t2 = $.TextInputConnection__nextId;
      $.TextInputConnection__nextId = t2 + 1;
      return new A.TextInputConnection(t1, t2, _client);
    },
    SmartDashesType: function SmartDashesType(t0, t1) {
      this.index = t0;
      this._core$_name = t1;
    },
    SmartQuotesType: function SmartQuotesType(t0, t1) {
      this.index = t0;
      this._core$_name = t1;
    },
    TextCapitalization0: function TextCapitalization0(t0, t1) {
      this.index = t0;
      this._core$_name = t1;
    },
    TextInputConfiguration: function TextInputConfiguration(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13) {
      var _ = this;
      _.inputType = t0;
      _.readOnly = t1;
      _.obscureText = t2;
      _.autocorrect = t3;
      _.autofillConfiguration = t4;
      _.smartDashesType = t5;
      _.smartQuotesType = t6;
      _.enableSuggestions = t7;
      _.enableInteractiveSelection = t8;
      _.inputAction = t9;
      _.textCapitalization = t10;
      _.keyboardAppearance = t11;
      _.enableIMEPersonalizedLearning = t12;
      _.enableDeltaModel = t13;
    },
    TextSelectionDelegate: function TextSelectionDelegate() {
    },
    TextInputClient: function TextInputClient() {
    },
    SelectionRect: function SelectionRect(t0, t1) {
      this.position = t0;
      this.bounds = t1;
    },
    TextInputConnection: function TextInputConnection(t0, t1, t2) {
      var _ = this;
      _._cachedCaretRect = _._text_input$_cachedRect = _._cachedTransform = _._cachedSize = null;
      _._cachedSelectionRects = t0;
      _._text_input$_id = t1;
      _._client = t2;
    },
    Actions_invoke(context, intent, $T) {
      var t1 = {};
      t1.returnValue = null;
      B.Actions__visitActionsAncestors(context, new A.Actions_invoke_closure(t1, intent, context, $T));
      return t1.returnValue;
    },
    Actions_invoke_closure: function Actions_invoke_closure(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.intent = t1;
      _.context = t2;
      _.T = t3;
    },
    AnimatedSize: function AnimatedSize(t0, t1, t2) {
      this.child = t0;
      this.duration = t1;
      this.key = t2;
    },
    _AnimatedSizeState: function _AnimatedSizeState(t0, t1, t2) {
      var _ = this;
      _.SingleTickerProviderStateMixin__ticker = t0;
      _.SingleTickerProviderStateMixin__tickerModeNotifier = t1;
      _._widget = null;
      _._debugLifecycleState = t2;
      _._framework$_element = null;
    },
    _AnimatedSize: function _AnimatedSize(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.alignment = t0;
      _.curve = t1;
      _.duration = t2;
      _.reverseDuration = t3;
      _.vsync = t4;
      _.clipBehavior = t5;
      _.child = t6;
      _.key = t7;
    },
    __AnimatedSizeState_State_SingleTickerProviderStateMixin: function __AnimatedSizeState_State_SingleTickerProviderStateMixin() {
    },
    ClipPath_shape(child, shape) {
      return new B.Builder(new A.ClipPath_shape_closure(shape, C.Clip_2, child), null);
    },
    Transform$translate(child, key, offset) {
      return new B.Transform(B.Matrix4_Matrix4$translationValues(offset._dx, offset._dy, 0), null, true, null, child, key);
    },
    CompositedTransformFollower$(child, link, offset, showWhenUnlinked) {
      return new A.CompositedTransformFollower(link, false, offset, child, null);
    },
    SizedBox$fromSize(child, size) {
      return new B.SizedBox(size._dx, size._dy, child, null);
    },
    ClipPath_shape_closure: function ClipPath_shape_closure(t0, t1, t2) {
      this.shape = t0;
      this.clipBehavior = t1;
      this.child = t2;
    },
    CompositedTransformTarget: function CompositedTransformTarget(t0, t1, t2) {
      this.link = t0;
      this.child = t1;
      this.key = t2;
    },
    CompositedTransformFollower: function CompositedTransformFollower(t0, t1, t2, t3, t4) {
      var _ = this;
      _.link = t0;
      _.showWhenUnlinked = t1;
      _.offset = t2;
      _.child = t3;
      _.key = t4;
    },
    ContextMenuButtonType: function ContextMenuButtonType(t0, t1) {
      this.index = t0;
      this._core$_name = t1;
    },
    ContextMenuButtonItem: function ContextMenuButtonItem(t0, t1) {
      this.onPressed = t0;
      this.type = t1;
    },
    ContextMenuController_removeAny() {
      var t1 = $.ContextMenuController__menuOverlayEntry;
      if (t1 != null)
        t1.remove$0(0);
      $.ContextMenuController__menuOverlayEntry = null;
      if ($.ContextMenuController__shownInstance != null)
        $.ContextMenuController__shownInstance = null;
    },
    ContextMenuController: function ContextMenuController() {
    },
    ContextMenuController_show_closure: function ContextMenuController_show_closure(t0, t1) {
      this.capturedThemes = t0;
      this.contextMenuBuilder = t1;
    },
    DesktopTextSelectionToolbarLayoutDelegate: function DesktopTextSelectionToolbarLayoutDelegate(t0) {
      this.anchor = t0;
    },
    TextEditingController$(text) {
      var t1 = text == null ? D.TextEditingValue_li8 : new B.TextEditingValue(text, C.TextSelection_ke5, C.TextRange_m1_m1),
        t2 = new A.TextEditingController(t1, $.$get$ChangeNotifier__emptyListeners());
      t2.ValueNotifier$1(t1, type$.TextEditingValue);
      return t2;
    },
    EditableText_getEditableButtonItems(clipboardStatus, onCopy, onCut, onPaste, onSelectAll) {
      var t1 = B._setArrayType([], type$.JSArray_ContextMenuButtonItem);
      if (onCut != null)
        t1.push(new A.ContextMenuButtonItem(onCut, D.ContextMenuButtonType_0));
      if (onCopy != null)
        t1.push(new A.ContextMenuButtonItem(onCopy, D.ContextMenuButtonType_1));
      if (onPaste != null)
        t1.push(new A.ContextMenuButtonItem(onPaste, D.ContextMenuButtonType_2));
      if (onSelectAll != null)
        t1.push(new A.ContextMenuButtonItem(onSelectAll, D.ContextMenuButtonType_3));
      return t1;
    },
    EditableTextState__inferSpellCheckConfiguration(configuration) {
      var spellCheckService,
        t1 = configuration.$eq(0, D.SpellCheckConfiguration_null_null_false);
      if (t1)
        return D.SpellCheckConfiguration_null_null_false;
      spellCheckService = configuration.spellCheckService;
      if (spellCheckService == null) {
        spellCheckService = new A.DefaultSpellCheckService();
        spellCheckService.__DefaultSpellCheckService_spellCheckChannel_A = D.OptionalMethodChannel_CGY;
      }
      return configuration.copyWith$1$spellCheckService(spellCheckService);
    },
    _Editable__extractChildren(span) {
      var result = B._setArrayType([], type$.JSArray_Widget);
      span.visitChildren$1(new A._Editable__extractChildren_closure(result));
      return result;
    },
    _throttle(duration, $function, $T) {
      var t1 = {};
      t1.timer = null;
      t1.calledDuringTimer = false;
      return new A._throttle_closure(t1, B._Cell$named("arg"), false, $function, duration, $T);
    },
    TextEditingController: function TextEditingController(t0, t1) {
      var _ = this;
      _._change_notifier$_value = t0;
      _.ChangeNotifier__count = 0;
      _.ChangeNotifier__listeners = t1;
      _.ChangeNotifier__reentrantlyRemovedListeners = _.ChangeNotifier__notificationCallStackDepth = 0;
      _.ChangeNotifier__creationDispatched = _.ChangeNotifier__debugDisposed = false;
    },
    ToolbarOptions: function ToolbarOptions(t0, t1, t2, t3) {
      var _ = this;
      _.copy = t0;
      _.cut = t1;
      _.paste = t2;
      _.selectAll = t3;
    },
    _KeyFrame: function _KeyFrame(t0, t1) {
      this.time = t0;
      this.value = t1;
    },
    _DiscreteKeyFrameSimulation: function _DiscreteKeyFrameSimulation(t0, t1, t2) {
      var _ = this;
      _.maxDuration = t0;
      _._keyFrames = t1;
      _._lastKeyFrameIndex = 0;
      _.tolerance = t2;
    },
    EditableText: function EditableText(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t60) {
      var _ = this;
      _.controller = t0;
      _.focusNode = t1;
      _.obscuringCharacter = t2;
      _.obscureText = t3;
      _.readOnly = t4;
      _.toolbarOptions = t5;
      _.showSelectionHandles = t6;
      _.showCursor = t7;
      _.autocorrect = t8;
      _.smartDashesType = t9;
      _.smartQuotesType = t10;
      _.enableSuggestions = t11;
      _.style = t12;
      _._editable_text$_strutStyle = t13;
      _.textAlign = t14;
      _.textDirection = t15;
      _.textCapitalization = t16;
      _.cursorColor = t17;
      _.autocorrectionTextRectColor = t18;
      _.backgroundCursorColor = t19;
      _.maxLines = t20;
      _.minLines = t21;
      _.expands = t22;
      _.autofocus = t23;
      _.selectionColor = t24;
      _.selectionControls = t25;
      _.keyboardType = t26;
      _.textInputAction = t27;
      _.onChanged = t28;
      _.onEditingComplete = t29;
      _.onSubmitted = t30;
      _.onAppPrivateCommand = t31;
      _.onSelectionChanged = t32;
      _.onSelectionHandleTapped = t33;
      _.onTapOutside = t34;
      _.inputFormatters = t35;
      _.mouseCursor = t36;
      _.rendererIgnoresPointer = t37;
      _.cursorWidth = t38;
      _.cursorHeight = t39;
      _.cursorRadius = t40;
      _.cursorOpacityAnimates = t41;
      _.cursorOffset = t42;
      _.paintCursorAboveText = t43;
      _.selectionHeightStyle = t44;
      _.selectionWidthStyle = t45;
      _.keyboardAppearance = t46;
      _.scrollPadding = t47;
      _.enableInteractiveSelection = t48;
      _.dragStartBehavior = t49;
      _.scrollController = t50;
      _.scrollPhysics = t51;
      _.scribbleEnabled = t52;
      _.autofillClient = t53;
      _.clipBehavior = t54;
      _.restorationId = t55;
      _.enableIMEPersonalizedLearning = t56;
      _.contextMenuBuilder = t57;
      _.spellCheckConfiguration = t58;
      _.magnifierConfiguration = t59;
      _.key = t60;
    },
    EditableTextState: function EditableTextState(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9) {
      var _ = this;
      _._backingCursorBlinkOpacityController = _._cursorTimer = null;
      _.__EditableTextState__iosBlinkCursorSimulation_FI = $;
      _._cursorVisibilityNotifier = t0;
      _._editableKey = t1;
      _._selectionOverlay = _._textInputConnection = null;
      _._scrollableKey = t2;
      _._internalScrollController = null;
      _._toolbarLayerLink = t3;
      _._editable_text$_startHandleLayerLink = t4;
      _._editable_text$_endHandleLayerLink = t5;
      _._didAutoFocus = false;
      _._currentAutofillScope = null;
      _.__EditableTextState__spellCheckConfiguration_A = $;
      _._lastOrientation = _._floatingCursorResetController = _._spellCheckResults = null;
      _._tickersEnabled = true;
      _._lastBoundedOffset = _._pointOffsetOrigin = _._lastTextPosition = _._startCaretRect = _._lastKnownRemoteTextEditingValue = null;
      _._batchEditDepth = 0;
      _._restartConnectionScheduled = false;
      _._currentCaretRect = null;
      _._showCaretOnScreenScheduled = false;
      _.__EditableTextState__lastBottomViewInset_A = $;
      _._obscureShowCharTicksPending = 0;
      _._obscureLatestCharIndex = null;
      _._cursorActive = false;
      _._scribbleCacheKey = null;
      _._placeholderLocation = -1;
      _._currentPromptRectRange = null;
      _.__EditableTextState__actions_FI = _.__EditableTextState__verticalSelectionUpdateAction_FI = _.__EditableTextState__updateSelectionAction_FI = _.__EditableTextState__replaceTextAction_FI = _.__EditableTextState__transposeCharactersAction_FI = $;
      _.TickerProviderStateMixin__tickers = t6;
      _.TickerProviderStateMixin__tickerModeNotifier = t7;
      _.AutomaticKeepAliveClientMixin__keepAliveHandle = t8;
      _._widget = null;
      _._debugLifecycleState = t9;
      _._framework$_element = null;
    },
    EditableTextState_cutSelection_closure: function EditableTextState_cutSelection_closure(t0) {
      this.$this = t0;
    },
    EditableTextState_pasteText_closure: function EditableTextState_pasteText_closure(t0) {
      this.$this = t0;
    },
    EditableTextState_buttonItemsForToolbarOptions_closure: function EditableTextState_buttonItemsForToolbarOptions_closure(t0) {
      this.$this = t0;
    },
    EditableTextState_buttonItemsForToolbarOptions_closure0: function EditableTextState_buttonItemsForToolbarOptions_closure0(t0) {
      this.$this = t0;
    },
    EditableTextState_buttonItemsForToolbarOptions_closure1: function EditableTextState_buttonItemsForToolbarOptions_closure1(t0) {
      this.$this = t0;
    },
    EditableTextState_contextMenuButtonItems_closure: function EditableTextState_contextMenuButtonItems_closure(t0) {
      this.$this = t0;
    },
    EditableTextState_contextMenuButtonItems_closure0: function EditableTextState_contextMenuButtonItems_closure0(t0) {
      this.$this = t0;
    },
    EditableTextState_contextMenuButtonItems_closure1: function EditableTextState_contextMenuButtonItems_closure1(t0) {
      this.$this = t0;
    },
    EditableTextState_contextMenuButtonItems_closure2: function EditableTextState_contextMenuButtonItems_closure2(t0) {
      this.$this = t0;
    },
    EditableTextState__createSelectionOverlay_closure: function EditableTextState__createSelectionOverlay_closure(t0) {
      this.$this = t0;
    },
    EditableTextState__scheduleShowCaretOnScreen_closure: function EditableTextState__scheduleShowCaretOnScreen_closure(t0, t1) {
      this.$this = t0;
      this.withAnimation = t1;
    },
    EditableTextState_didChangeMetrics_closure: function EditableTextState_didChangeMetrics_closure(t0) {
      this.$this = t0;
    },
    EditableTextState__formatAndSetValue_closure: function EditableTextState__formatAndSetValue_closure(t0) {
      this.$this = t0;
    },
    EditableTextState__startCursorBlink_closure: function EditableTextState__startCursorBlink_closure(t0) {
      this.$this = t0;
    },
    EditableTextState__onCursorTick_closure: function EditableTextState__onCursorTick_closure() {
    },
    EditableTextState__onCursorTick_closure0: function EditableTextState__onCursorTick_closure0(t0) {
      this.$this = t0;
    },
    EditableTextState__onCursorTick_closure1: function EditableTextState__onCursorTick_closure1(t0) {
      this.$this = t0;
    },
    EditableTextState__didChangeTextEditingValue_closure: function EditableTextState__didChangeTextEditingValue_closure() {
    },
    EditableTextState__handleFocusChanged_closure: function EditableTextState__handleFocusChanged_closure(t0) {
      this.$this = t0;
    },
    EditableTextState__updateSizeAndTransform_closure: function EditableTextState__updateSizeAndTransform_closure(t0) {
      this.$this = t0;
    },
    EditableTextState__updateComposingRectIfNeeded_closure: function EditableTextState__updateComposingRectIfNeeded_closure(t0) {
      this.$this = t0;
    },
    EditableTextState__updateCaretRectIfNeeded_closure: function EditableTextState__updateCaretRectIfNeeded_closure(t0) {
      this.$this = t0;
    },
    EditableTextState_insertTextPlaceholder_closure: function EditableTextState_insertTextPlaceholder_closure(t0) {
      this.$this = t0;
    },
    EditableTextState_removeTextPlaceholder_closure: function EditableTextState_removeTextPlaceholder_closure(t0) {
      this.$this = t0;
    },
    EditableTextState_showAutocorrectionPromptRect_closure: function EditableTextState_showAutocorrectionPromptRect_closure(t0, t1, t2) {
      this.$this = t0;
      this.start = t1;
      this.end = t2;
    },
    EditableTextState__semanticsOnCopy_closure: function EditableTextState__semanticsOnCopy_closure(t0, t1) {
      this.$this = t0;
      this.controls = t1;
    },
    EditableTextState__semanticsOnCut_closure: function EditableTextState__semanticsOnCut_closure(t0, t1) {
      this.$this = t0;
      this.controls = t1;
    },
    EditableTextState__semanticsOnPaste_closure: function EditableTextState__semanticsOnPaste_closure(t0, t1) {
      this.$this = t0;
      this.controls = t1;
    },
    EditableTextState__actions_closure: function EditableTextState__actions_closure(t0) {
      this.$this = t0;
    },
    EditableTextState_build_closure0: function EditableTextState_build_closure0(t0) {
      this.$this = t0;
    },
    EditableTextState_build_closure: function EditableTextState_build_closure(t0, t1) {
      this.$this = t0;
      this.controls = t1;
    },
    EditableTextState_build__closure: function EditableTextState_build__closure(t0) {
      this.$this = t0;
    },
    _Editable: function _Editable(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t40) {
      var _ = this;
      _.inlineSpan = t0;
      _.value = t1;
      _.cursorColor = t2;
      _.startHandleLayerLink = t3;
      _.endHandleLayerLink = t4;
      _.backgroundCursorColor = t5;
      _.showCursor = t6;
      _.forceLine = t7;
      _.readOnly = t8;
      _.hasFocus = t9;
      _.maxLines = t10;
      _.minLines = t11;
      _.expands = t12;
      _.strutStyle = t13;
      _.selectionColor = t14;
      _.textScaleFactor = t15;
      _.textAlign = t16;
      _.textDirection = t17;
      _.locale = t18;
      _.obscuringCharacter = t19;
      _.obscureText = t20;
      _.textHeightBehavior = t21;
      _.textWidthBasis = t22;
      _.offset = t23;
      _.onCaretChanged = t24;
      _.rendererIgnoresPointer = t25;
      _.cursorWidth = t26;
      _.cursorHeight = t27;
      _.cursorRadius = t28;
      _.cursorOffset = t29;
      _.paintCursorAboveText = t30;
      _.selectionHeightStyle = t31;
      _.selectionWidthStyle = t32;
      _.enableInteractiveSelection = t33;
      _.textSelectionDelegate = t34;
      _.devicePixelRatio = t35;
      _.promptRectRange = t36;
      _.promptRectColor = t37;
      _.clipBehavior = t38;
      _.children = t39;
      _.key = t40;
    },
    _Editable__extractChildren_closure: function _Editable__extractChildren_closure(t0) {
      this.result = t0;
    },
    _ScribbleCacheKey: function _ScribbleCacheKey(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _.textAlign = t0;
      _.textDirection = t1;
      _.textScaleFactor = t2;
      _.textHeightBehavior = t3;
      _.locale = t4;
      _.structStyle = t5;
      _.placeholder = t6;
      _.size = t7;
      _.inlineSpan = t8;
    },
    _ScribbleFocusable: function _ScribbleFocusable(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.child = t0;
      _.focusNode = t1;
      _.editableKey = t2;
      _.updateSelectionRects = t3;
      _.enabled = t4;
      _.key = t5;
    },
    _ScribbleFocusableState: function _ScribbleFocusableState(t0, t1) {
      var _ = this;
      _._elementIdentifier = t0;
      _._widget = null;
      _._debugLifecycleState = t1;
      _._framework$_element = null;
    },
    _ScribbleFocusableState_isInScribbleRect_closure: function _ScribbleFocusableState_isInScribbleRect_closure(t0) {
      this.$this = t0;
    },
    _ScribblePlaceholder: function _ScribblePlaceholder(t0, t1, t2, t3, t4) {
      var _ = this;
      _.size = t0;
      _.child = t1;
      _.alignment = t2;
      _.baseline = t3;
      _.style = t4;
    },
    _MixedBoundary: function _MixedBoundary(t0, t1) {
      this.leadingTextBoundary = t0;
      this.trailingTextBoundary = t1;
    },
    _DeleteTextAction: function _DeleteTextAction(t0, t1, t2, t3) {
      var _ = this;
      _.state = t0;
      _.getTextBoundariesForIntent = t1;
      _._actions$_listeners = t2;
      _._currentCallingAction = null;
      _.$ti = t3;
    },
    _UpdateTextSelectionAction: function _UpdateTextSelectionAction(t0, t1, t2, t3, t4) {
      var _ = this;
      _.state = t0;
      _.ignoreNonCollapsedSelection = t1;
      _.getTextBoundariesForIntent = t2;
      _._actions$_listeners = t3;
      _._currentCallingAction = null;
      _.$ti = t4;
    },
    _UpdateTextSelectionAction_invoke_collapse: function _UpdateTextSelectionAction_invoke_collapse(t0) {
      this.intent = t0;
    },
    _ExtendSelectionOrCaretPositionAction: function _ExtendSelectionOrCaretPositionAction(t0, t1, t2) {
      var _ = this;
      _.state = t0;
      _.getTextBoundariesForIntent = t1;
      _._actions$_listeners = t2;
      _._currentCallingAction = null;
    },
    _UpdateTextSelectionVerticallyAction: function _UpdateTextSelectionVerticallyAction(t0, t1, t2) {
      var _ = this;
      _.state = t0;
      _._runSelection = _._verticalMovementRun = null;
      _._actions$_listeners = t1;
      _._currentCallingAction = null;
      _.$ti = t2;
    },
    _SelectAllAction: function _SelectAllAction(t0, t1) {
      this.state = t0;
      this._actions$_listeners = t1;
      this._currentCallingAction = null;
    },
    _CopySelectionAction: function _CopySelectionAction(t0, t1) {
      this.state = t0;
      this._actions$_listeners = t1;
      this._currentCallingAction = null;
    },
    _TextEditingHistory: function _TextEditingHistory(t0, t1, t2, t3) {
      var _ = this;
      _.child = t0;
      _.controller = t1;
      _.onTriggered = t2;
      _.key = t3;
    },
    _TextEditingHistoryState: function _TextEditingHistoryState(t0, t1) {
      var _ = this;
      _._editable_text$_stack = t0;
      _.___TextEditingHistoryState__throttledPush_F = $;
      _._widget = _._throttleTimer = null;
      _._debugLifecycleState = t1;
      _._framework$_element = null;
    },
    _UndoStack: function _UndoStack(t0, t1) {
      this._editable_text$_list = t0;
      this.___UndoStack__index_A = $;
      this.$ti = t1;
    },
    _throttle_closure: function _throttle_closure(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._box_0 = t0;
      _.arg = t1;
      _.leadingEdge = t2;
      _.$function = t3;
      _.duration = t4;
      _.T = t5;
    },
    _throttle__closure: function _throttle__closure(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.leadingEdge = t1;
      _.$function = t2;
      _.arg = t3;
    },
    _GlyphHeights: function _GlyphHeights(t0, t1) {
      this.start = t0;
      this.end = t1;
    },
    _EditableTextState_State_AutomaticKeepAliveClientMixin: function _EditableTextState_State_AutomaticKeepAliveClientMixin() {
    },
    _EditableTextState_State_AutomaticKeepAliveClientMixin_WidgetsBindingObserver: function _EditableTextState_State_AutomaticKeepAliveClientMixin_WidgetsBindingObserver() {
    },
    _EditableTextState_State_AutomaticKeepAliveClientMixin_WidgetsBindingObserver_TickerProviderStateMixin: function _EditableTextState_State_AutomaticKeepAliveClientMixin_WidgetsBindingObserver_TickerProviderStateMixin() {
    },
    _EditableTextState_State_AutomaticKeepAliveClientMixin_WidgetsBindingObserver_TickerProviderStateMixin_TextSelectionDelegate: function _EditableTextState_State_AutomaticKeepAliveClientMixin_WidgetsBindingObserver_TickerProviderStateMixin_TextSelectionDelegate() {
    },
    _EditableTextState_State_AutomaticKeepAliveClientMixin_WidgetsBindingObserver_TickerProviderStateMixin_TextSelectionDelegate_TextInputClient: function _EditableTextState_State_AutomaticKeepAliveClientMixin_WidgetsBindingObserver_TickerProviderStateMixin_TextSelectionDelegate_TextInputClient() {
    },
    AnimatedPositioned$(child, curve, duration, left, $top) {
      return new A.AnimatedPositioned(child, left, $top, curve, duration, null, null);
    },
    AnimatedPositioned: function AnimatedPositioned(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.child = t0;
      _.left = t1;
      _.top = t2;
      _.curve = t3;
      _.duration = t4;
      _.onEnd = t5;
      _.key = t6;
    },
    _AnimatedPositionedState: function _AnimatedPositionedState(t0, t1, t2) {
      var _ = this;
      _._implicit_animations$_height = _._implicit_animations$_width = _._implicit_animations$_bottom = _._implicit_animations$_right = _._implicit_animations$_top = _._implicit_animations$_left = null;
      _.__ImplicitlyAnimatedWidgetState__animation_AI = _.__ImplicitlyAnimatedWidgetState__controller_FI = $;
      _.SingleTickerProviderStateMixin__ticker = t0;
      _.SingleTickerProviderStateMixin__tickerModeNotifier = t1;
      _._widget = null;
      _._debugLifecycleState = t2;
      _._framework$_element = null;
    },
    _AnimatedPositionedState_forEachTween_closure: function _AnimatedPositionedState_forEachTween_closure() {
    },
    _AnimatedPositionedState_forEachTween_closure0: function _AnimatedPositionedState_forEachTween_closure0() {
    },
    _AnimatedPositionedState_forEachTween_closure1: function _AnimatedPositionedState_forEachTween_closure1() {
    },
    _AnimatedPositionedState_forEachTween_closure2: function _AnimatedPositionedState_forEachTween_closure2() {
    },
    _AnimatedPositionedState_forEachTween_closure3: function _AnimatedPositionedState_forEachTween_closure3() {
    },
    _AnimatedPositionedState_forEachTween_closure4: function _AnimatedPositionedState_forEachTween_closure4() {
    },
    MagnifierController_shiftWithinBounds(bounds, rect) {
      var rectShift,
        t1 = rect.left,
        t2 = bounds.left;
      if (t1 < t2)
        rectShift = C.Offset_0_0.$add(0, new B.Offset(t2 - t1, 0));
      else {
        t1 = rect.right;
        t2 = bounds.right;
        rectShift = t1 > t2 ? C.Offset_0_0.$add(0, new B.Offset(t2 - t1, 0)) : C.Offset_0_0;
      }
      t1 = rect.top;
      t2 = bounds.top;
      if (t1 < t2)
        rectShift = rectShift.$add(0, new B.Offset(0, t2 - t1));
      else {
        t1 = rect.bottom;
        t2 = bounds.bottom;
        if (t1 > t2)
          rectShift = rectShift.$add(0, new B.Offset(0, t2 - t1));
      }
      return rect.shift$1(rectShift);
    },
    MagnifierDecoration$(opacity, shadows, shape) {
      return new A.MagnifierDecoration(opacity, null, null, null, shadows, shape);
    },
    MagnifierInfo: function MagnifierInfo(t0, t1, t2, t3) {
      var _ = this;
      _.globalGesturePosition = t0;
      _.currentLineBoundaries = t1;
      _.caretRect = t2;
      _.fieldBounds = t3;
    },
    TextMagnifierConfiguration: function TextMagnifierConfiguration(t0, t1) {
      this._magnifierBuilder = t0;
      this.shouldDisplayHandlesInMagnifier = t1;
    },
    TextMagnifierConfiguration_magnifierBuilder_closure: function TextMagnifierConfiguration_magnifierBuilder_closure() {
    },
    MagnifierController: function MagnifierController() {
      this._overlayEntry = this.animationController = null;
    },
    MagnifierController_show_closure: function MagnifierController_show_closure(t0, t1) {
      this.capturedThemes = t0;
      this.builder = t1;
    },
    MagnifierDecoration: function MagnifierDecoration(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.opacity = t0;
      _.color = t1;
      _.gradient = t2;
      _.image = t3;
      _.shadows = t4;
      _.shape = t5;
    },
    RawMagnifier: function RawMagnifier(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.child = t0;
      _.decoration = t1;
      _.focalPointOffset = t2;
      _.magnificationScale = t3;
      _.size = t4;
      _.key = t5;
    },
    _MagnifierStyle: function _MagnifierStyle(t0, t1, t2) {
      this.decoration = t0;
      this.size = t1;
      this.key = t2;
    },
    _DonutClip: function _DonutClip(t0, t1, t2) {
      this.spreadRadius = t0;
      this.shape = t1;
      this._reclip = t2;
    },
    _Magnifier: function _Magnifier(t0, t1, t2, t3, t4) {
      var _ = this;
      _.focalPointOffset = t0;
      _.magnificationScale = t1;
      _.shape = t2;
      _.child = t3;
      _.key = t4;
    },
    _RenderMagnification: function _RenderMagnification(t0, t1, t2, t3, t4) {
      var _ = this;
      _._focalPointOffset = t0;
      _._magnificationScale = t1;
      _._magnifier$_shape = t2;
      _.RenderObjectWithChildMixin__child = t3;
      _._cachedDryLayoutSizes = _._cachedIntrinsicDimensions = null;
      _._computingThisDryLayout = false;
      _._cachedBaselines = _._size = null;
      _._debugActivePointers = 0;
      _._debugDisposed = false;
      _.debugCreator = _.parentData = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _._debugDoingThisPaint = false;
      _.__RenderObject__wasRepaintBoundary_A = $;
      _._layerHandle = t4;
      _._needsCompositingBitsUpdate = false;
      _.__RenderObject__needsCompositing_A = $;
      _._needsPaint = true;
      _._needsCompositedLayerUpdate = false;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    RestorableListenable: function RestorableListenable() {
    },
    RestorableChangeNotifier: function RestorableChangeNotifier() {
    },
    RestorableTextEditingController: function RestorableTextEditingController(t0, t1) {
      var _ = this;
      _._initialValue = t0;
      _._restoration_properties$_value = null;
      _._restoration0$_disposed = false;
      _._restoration0$_owner = _._restoration0$_restorationId = null;
      _.ChangeNotifier__count = 0;
      _.ChangeNotifier__listeners = t1;
      _.ChangeNotifier__reentrantlyRemovedListeners = _.ChangeNotifier__notificationCallStackDepth = 0;
      _.ChangeNotifier__creationDispatched = _.ChangeNotifier__debugDisposed = false;
    },
    SlottedMultiChildRenderObjectWidgetMixin: function SlottedMultiChildRenderObjectWidgetMixin() {
    },
    SlottedContainerRenderObjectMixin: function SlottedContainerRenderObjectMixin() {
    },
    SlottedRenderObjectElement: function SlottedRenderObjectElement(t0, t1, t2, t3, t4) {
      var _ = this;
      _._slotToChild = t0;
      _._keyedChildren = t1;
      _._renderObject = _._debugPreviousSlots = null;
      _._debugDoingBuild = false;
      _._slot = _._notificationTree = _._debugReassembleConfig = _._framework$_parent = _._ancestorRenderObjectElement = null;
      _.__Element__depth_A = $;
      _._widget = t2;
      _._owner = null;
      _._lifecycleState = t3;
      _._dependencies = _._inheritedWidgets = null;
      _._hadUnsatisfiedDependencies = false;
      _._dirty = true;
      _._debugBuiltOnce = _._inDirtyList = false;
      _.$ti = t4;
    },
    _correctSpellCheckResults(newText, resultsText, results) {
      var t1, spanPointer, searchStart, currentSpanText, t2, t3, t4, t5, exception, regex, foundIndex,
        correctedSpellCheckResults = B._setArrayType([], type$.JSArray_SuggestionSpan),
        offset = 0, currentSpan = null, newSpanText = "",
        currentSpanValid = false;
      for (t1 = J.getInterceptor$asx(results), spanPointer = 0, searchStart = 0; spanPointer < t1.get$length(results);) {
        currentSpan = t1.$index(results, spanPointer);
        currentSpanText = C.JSString_methods.substring$2(resultsText, currentSpan.range.start, currentSpan.range.end);
        try {
          t2 = currentSpan.range;
          t3 = offset;
          if (typeof t3 !== "number")
            return B.iae(t3);
          t4 = currentSpan.range;
          t5 = offset;
          if (typeof t5 !== "number")
            return B.iae(t5);
          newSpanText = C.JSString_methods.substring$2(newText, t2.start + t3, t4.end + t5);
          currentSpanValid = true;
        } catch (exception) {
          currentSpanValid = false;
        }
        if (B.boolConversionCheck(currentSpanValid) && J.$eq$(newSpanText, currentSpanText)) {
          t2 = currentSpan.range;
          t3 = offset;
          if (typeof t3 !== "number")
            return B.iae(t3);
          searchStart = t2.end + t3;
          t3 = currentSpan.range;
          t2 = offset;
          if (typeof t2 !== "number")
            return B.iae(t2);
          C.JSArray_methods.add$1(correctedSpellCheckResults, new A.SuggestionSpan(new B.TextRange(t3.start + t2, searchStart), currentSpan.suggestions));
        } else {
          regex = B.RegExp_RegExp("\\b" + currentSpanText + "\\b", true);
          foundIndex = C.JSString_methods.indexOf$1(C.JSString_methods.substring$1(newText, searchStart), regex);
          if (foundIndex >= 0) {
            foundIndex += searchStart;
            searchStart = foundIndex + (currentSpan.range.end - currentSpan.range.start);
            t2 = currentSpan.suggestions;
            offset = foundIndex - currentSpan.range.start;
            C.JSArray_methods.add$1(correctedSpellCheckResults, new A.SuggestionSpan(new B.TextRange(foundIndex, searchStart), t2));
          }
        }
        ++spanPointer;
      }
      return correctedSpellCheckResults;
    },
    _buildSubtreesWithMisspelledWordsIndicated(spellCheckSuggestions, value, style, misspelledStyle, composingWithinCurrentTextRange) {
      var t5, endIndex0, endIndex1, _null = null,
        tsTreeChildren = B._setArrayType([], type$.JSArray_TextSpan),
        text = value.text,
        composingRegion = value.composing,
        composingTextStyle = style.merge$1(D.TextStyle_9Zz),
        misspelledJointStyle = style.merge$1(misspelledStyle),
        t1 = composingRegion.start,
        endIndex = text.length,
        t2 = J.getInterceptor$asx(spellCheckSuggestions),
        t3 = composingRegion.end,
        t4 = !composingWithinCurrentTextRange,
        textPointer = 0, currSpanPointer = 0;
      while (true) {
        if (!(textPointer < endIndex && currSpanPointer < t2.get$length(spellCheckSuggestions)))
          break;
        t5 = t2.$index(spellCheckSuggestions, currSpanPointer).range;
        endIndex0 = t5.start;
        if (endIndex0 > textPointer) {
          endIndex0 = endIndex0 < endIndex ? endIndex0 : endIndex;
          if (t1 >= textPointer && t3 <= endIndex0 && t4) {
            C.JSArray_methods.add$1(tsTreeChildren, B.TextSpan$(_null, style, C.JSString_methods.substring$2(text, textPointer, t1)));
            C.JSArray_methods.add$1(tsTreeChildren, B.TextSpan$(_null, composingTextStyle, C.JSString_methods.substring$2(text, t1, t3)));
            C.JSArray_methods.add$1(tsTreeChildren, B.TextSpan$(_null, style, C.JSString_methods.substring$2(text, t3, endIndex0)));
          } else
            C.JSArray_methods.add$1(tsTreeChildren, B.TextSpan$(_null, style, C.JSString_methods.substring$2(text, textPointer, endIndex0)));
          textPointer = endIndex0;
        } else {
          endIndex1 = t5.end;
          endIndex1 = endIndex1 < endIndex ? endIndex1 : endIndex;
          t5 = textPointer >= t1 && endIndex1 <= t3 && t4 ? composingTextStyle : misspelledJointStyle;
          C.JSArray_methods.add$1(tsTreeChildren, B.TextSpan$(_null, t5, C.JSString_methods.substring$2(text, endIndex0, endIndex1)));
          ++currSpanPointer;
          textPointer = endIndex1;
        }
      }
      t1 = text.length;
      if (textPointer < t1)
        if (textPointer < composingRegion.start && !composingWithinCurrentTextRange) {
          A._addComposingRegionTextSpans(tsTreeChildren, text, textPointer, composingRegion, style, composingTextStyle);
          t2 = composingRegion.end;
          if (t2 !== t1)
            C.JSArray_methods.add$1(tsTreeChildren, B.TextSpan$(_null, style, C.JSString_methods.substring$2(text, t2, t1)));
        } else
          C.JSArray_methods.add$1(tsTreeChildren, B.TextSpan$(_null, style, C.JSString_methods.substring$2(text, textPointer, t1)));
      return tsTreeChildren;
    },
    _addComposingRegionTextSpans(treeChildren, text, start, composingRegion, style, composingTextStyle) {
      var t1 = composingRegion.start;
      C.JSArray_methods.add$1(treeChildren, B.TextSpan$(null, style, C.JSString_methods.substring$2(text, start, t1)));
      C.JSArray_methods.add$1(treeChildren, B.TextSpan$(null, composingTextStyle, C.JSString_methods.substring$2(text, t1, composingRegion.end)));
    },
    SpellCheckConfiguration: function SpellCheckConfiguration(t0, t1, t2) {
      this.spellCheckService = t0;
      this.misspelledTextStyle = t1;
      this._spellCheckEnabled = t2;
    },
    TextFieldTapRegion$(child, debugLabel, onTapOutside) {
      return new A.TextFieldTapRegion(true, onTapOutside, null, D.Type_EditableText_C3e, child, null);
    },
    TapRegion: function TapRegion() {
    },
    RenderTapRegion: function RenderTapRegion(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _._isRegistered = false;
      _.onTapOutside = t0;
      _.onTapInside = t1;
      _.debugLabel = null;
      _._enabled = t2;
      _._groupId = t3;
      _._registry = t4;
      _.behavior = t5;
      _.RenderObjectWithChildMixin__child = t6;
      _._cachedDryLayoutSizes = _._cachedIntrinsicDimensions = null;
      _._computingThisDryLayout = false;
      _._cachedBaselines = _._size = null;
      _._debugActivePointers = 0;
      _._debugDisposed = false;
      _.debugCreator = _.parentData = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _._debugDoingThisPaint = false;
      _.__RenderObject__wasRepaintBoundary_A = $;
      _._layerHandle = t7;
      _._needsCompositingBitsUpdate = false;
      _.__RenderObject__needsCompositing_A = $;
      _._needsPaint = true;
      _._needsCompositedLayerUpdate = false;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    TextFieldTapRegion: function TextFieldTapRegion(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.enabled = t0;
      _.onTapOutside = t1;
      _.onTapInside = t2;
      _.groupId = t3;
      _.child = t4;
      _.key = t5;
    },
    DefaultTextStyle_merge(child, overflow, style) {
      var _null = null;
      return new B.Builder(new A.DefaultTextStyle_merge_closure(_null, style, _null, _null, overflow, _null, _null, child), _null);
    },
    DefaultTextStyle_merge_closure: function DefaultTextStyle_merge_closure(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.key = t0;
      _.style = t1;
      _.textAlign = t2;
      _.softWrap = t3;
      _.overflow = t4;
      _.maxLines = t5;
      _.textWidthBasis = t6;
      _.child = t7;
    },
    ReplaceTextIntent: function ReplaceTextIntent(t0, t1, t2, t3) {
      var _ = this;
      _.currentTextEditingValue = t0;
      _.replacementText = t1;
      _.replacementRange = t2;
      _.cause = t3;
    },
    UpdateSelectionIntent: function UpdateSelectionIntent(t0, t1, t2) {
      this.currentTextEditingValue = t0;
      this.newSelection = t1;
      this.cause = t2;
    },
    SelectionOverlay$(clipboardStatus, context, debugRequiredFor, dragStartBehavior, endHandleLayerLink, endHandleType, endHandlesVisible, lineHeightAtEnd, lineHeightAtStart, magnifierConfiguration, onEndHandleDragEnd, onEndHandleDragStart, onEndHandleDragUpdate, onSelectionHandleTapped, onStartHandleDragEnd, onStartHandleDragStart, onStartHandleDragUpdate, selectionControls, selectionDelegate, selectionEndpoints, startHandleLayerLink, startHandleType, startHandlesVisible, toolbarLayerLink, toolbarLocation, toolbarVisible) {
      var t1 = B.ValueNotifier$(D.MagnifierInfo_Rjn, type$.MagnifierInfo);
      return new A.SelectionOverlay(context, t1, new A.MagnifierController(), magnifierConfiguration, startHandleType, lineHeightAtStart, startHandlesVisible, onStartHandleDragStart, onStartHandleDragUpdate, onStartHandleDragEnd, endHandleType, lineHeightAtEnd, endHandlesVisible, onEndHandleDragStart, onEndHandleDragUpdate, onEndHandleDragEnd, toolbarVisible, selectionEndpoints, debugRequiredFor, toolbarLayerLink, startHandleLayerLink, endHandleLayerLink, selectionControls, selectionDelegate, dragStartBehavior, onSelectionHandleTapped, clipboardStatus, toolbarLocation, new A.ContextMenuController());
    },
    _SelectionHandleOverlay$(dragStartBehavior, handleLayerLink, onSelectionHandleDragEnd, onSelectionHandleDragStart, onSelectionHandleDragUpdate, onSelectionHandleTapped, preferredLineHeight, selectionControls, type, visibility) {
      return new A._SelectionHandleOverlay(handleLayerLink, onSelectionHandleTapped, onSelectionHandleDragStart, onSelectionHandleDragUpdate, onSelectionHandleDragEnd, selectionControls, visibility, preferredLineHeight, type, dragStartBehavior, null);
    },
    ToolbarItemsParentData: function ToolbarItemsParentData(t0, t1, t2) {
      var _ = this;
      _.shouldPaint = false;
      _.ContainerParentDataMixin_previousSibling = t0;
      _.ContainerParentDataMixin_nextSibling = t1;
      _.offset = t2;
    },
    TextSelectionControls: function TextSelectionControls() {
    },
    TextSelectionOverlay: function TextSelectionOverlay(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _.context = t0;
      _.renderObject = t1;
      _.selectionControls = t2;
      _.selectionDelegate = t3;
      _.__TextSelectionOverlay__selectionOverlay_F = $;
      _.contextMenuBuilder = t4;
      _._text_selection$_value = t5;
      _._effectiveStartHandleVisibility = t6;
      _._effectiveEndHandleVisibility = t7;
      _._effectiveToolbarVisibility = t8;
      _._handlesVisible = false;
      _.__TextSelectionOverlay__startHandleDragPositionToCenterOfLine_A = _.__TextSelectionOverlay__startHandleDragPosition_A = _.__TextSelectionOverlay__endHandleDragPositionToCenterOfLine_A = _.__TextSelectionOverlay__endHandleDragPosition_A = $;
    },
    SelectionOverlay: function SelectionOverlay(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, t28) {
      var _ = this;
      _.context = t0;
      _._magnifierInfo = t1;
      _._magnifierController = t2;
      _.magnifierConfiguration = t3;
      _._startHandleType = t4;
      _._lineHeightAtStart = t5;
      _._isDraggingStartHandle = false;
      _.startHandlesVisible = t6;
      _.onStartHandleDragStart = t7;
      _.onStartHandleDragUpdate = t8;
      _.onStartHandleDragEnd = t9;
      _._endHandleType = t10;
      _._lineHeightAtEnd = t11;
      _._isDraggingEndHandle = false;
      _.endHandlesVisible = t12;
      _.onEndHandleDragStart = t13;
      _.onEndHandleDragUpdate = t14;
      _.onEndHandleDragEnd = t15;
      _.toolbarVisible = t16;
      _._selectionEndpoints = t17;
      _.debugRequiredFor = t18;
      _.toolbarLayerLink = t19;
      _.startHandleLayerLink = t20;
      _.endHandleLayerLink = t21;
      _.selectionControls = t22;
      _.selectionDelegate = t23;
      _.dragStartBehavior = t24;
      _.onSelectionHandleTapped = t25;
      _.clipboardStatus = t26;
      _._toolbarLocation = t27;
      _._toolbar = _._handles = null;
      _._contextMenuController = t28;
      _._buildScheduled = false;
    },
    SelectionOverlay_showMagnifier_closure: function SelectionOverlay_showMagnifier_closure(t0) {
      this.builtMagnifier = t0;
    },
    SelectionOverlay_showToolbar_closure: function SelectionOverlay_showToolbar_closure(t0, t1, t2) {
      this.$this = t0;
      this.renderBox = t1;
      this.contextMenuBuilder = t2;
    },
    SelectionOverlay_markNeedsBuild_closure: function SelectionOverlay_markNeedsBuild_closure(t0) {
      this.$this = t0;
    },
    SelectionOverlay__buildToolbar_closure: function SelectionOverlay__buildToolbar_closure(t0, t1, t2) {
      this.$this = t0;
      this.editingRegion = t1;
      this.midpoint = t2;
    },
    _SelectionToolbarWrapper: function _SelectionToolbarWrapper(t0, t1, t2, t3, t4) {
      var _ = this;
      _.child = t0;
      _.offset = t1;
      _.layerLink = t2;
      _.visibility = t3;
      _.key = t4;
    },
    _SelectionToolbarWrapperState: function _SelectionToolbarWrapperState(t0, t1, t2) {
      var _ = this;
      _.___SelectionToolbarWrapperState__controller_A = $;
      _.SingleTickerProviderStateMixin__ticker = t0;
      _.SingleTickerProviderStateMixin__tickerModeNotifier = t1;
      _._widget = null;
      _._debugLifecycleState = t2;
      _._framework$_element = null;
    },
    _SelectionHandleOverlay: function _SelectionHandleOverlay(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10) {
      var _ = this;
      _.handleLayerLink = t0;
      _.onSelectionHandleTapped = t1;
      _.onSelectionHandleDragStart = t2;
      _.onSelectionHandleDragUpdate = t3;
      _.onSelectionHandleDragEnd = t4;
      _.selectionControls = t5;
      _.visibility = t6;
      _.preferredLineHeight = t7;
      _.type = t8;
      _.dragStartBehavior = t9;
      _.key = t10;
    },
    _SelectionHandleOverlayState: function _SelectionHandleOverlayState(t0, t1, t2) {
      var _ = this;
      _.___SelectionHandleOverlayState__controller_A = $;
      _.SingleTickerProviderStateMixin__ticker = t0;
      _.SingleTickerProviderStateMixin__tickerModeNotifier = t1;
      _._widget = null;
      _._debugLifecycleState = t2;
      _._framework$_element = null;
    },
    _SelectionHandleOverlayState_build_closure: function _SelectionHandleOverlayState_build_closure(t0) {
      this.$this = t0;
    },
    _SelectionHandleOverlayState_build_closure0: function _SelectionHandleOverlayState_build_closure0(t0) {
      this.$this = t0;
    },
    TextSelectionGestureDetectorBuilder: function TextSelectionGestureDetectorBuilder() {
    },
    TextSelectionGestureDetector: function TextSelectionGestureDetector(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16) {
      var _ = this;
      _.onTapDown = t0;
      _.onForcePressStart = t1;
      _.onForcePressEnd = t2;
      _.onSecondaryTap = t3;
      _.onSecondaryTapDown = t4;
      _.onSingleTapUp = t5;
      _.onSingleTapCancel = t6;
      _.onSingleLongTapStart = t7;
      _.onSingleLongTapMoveUpdate = t8;
      _.onSingleLongTapEnd = t9;
      _.onDoubleTapDown = t10;
      _.onDragSelectionStart = t11;
      _.onDragSelectionUpdate = t12;
      _.onDragSelectionEnd = t13;
      _.behavior = t14;
      _.child = t15;
      _.key = t16;
    },
    _TextSelectionGestureDetectorState: function _TextSelectionGestureDetectorState(t0) {
      var _ = this;
      _._lastTapOffset = _._text_selection$_doubleTapTimer = null;
      _._isDoubleTap = false;
      _._widget = _._dragUpdateThrottleTimer = _._lastDragUpdateDetails = _._lastDragStartDetails = null;
      _._debugLifecycleState = t0;
      _._framework$_element = null;
    },
    _TextSelectionGestureDetectorState_build_closure: function _TextSelectionGestureDetectorState_build_closure(t0) {
      this.$this = t0;
    },
    _TextSelectionGestureDetectorState_build_closure0: function _TextSelectionGestureDetectorState_build_closure0(t0) {
      this.$this = t0;
    },
    _TextSelectionGestureDetectorState_build_closure1: function _TextSelectionGestureDetectorState_build_closure1(t0) {
      this.$this = t0;
    },
    _TextSelectionGestureDetectorState_build_closure2: function _TextSelectionGestureDetectorState_build_closure2(t0) {
      this.$this = t0;
    },
    _TextSelectionGestureDetectorState_build_closure3: function _TextSelectionGestureDetectorState_build_closure3(t0) {
      this.$this = t0;
    },
    _TextSelectionGestureDetectorState_build_closure4: function _TextSelectionGestureDetectorState_build_closure4(t0) {
      this.$this = t0;
    },
    _TextSelectionGestureDetectorState_build_closure5: function _TextSelectionGestureDetectorState_build_closure5(t0) {
      this.$this = t0;
    },
    _TextSelectionGestureDetectorState_build_closure6: function _TextSelectionGestureDetectorState_build_closure6(t0) {
      this.$this = t0;
    },
    TextSelectionHandleControls: function TextSelectionHandleControls() {
    },
    __SelectionHandleOverlayState_State_SingleTickerProviderStateMixin: function __SelectionHandleOverlayState_State_SingleTickerProviderStateMixin() {
    },
    __SelectionToolbarWrapperState_State_SingleTickerProviderStateMixin: function __SelectionToolbarWrapperState_State_SingleTickerProviderStateMixin() {
    },
    TextSelectionToolbarAnchors_TextSelectionToolbarAnchors$fromSelection(endGlyphHeight, renderBox, selectionEndpoints, startGlyphHeight) {
      var isMultiline, t3, t4, t5,
        t1 = B.MatrixUtils_transformPoint(renderBox.getTransformTo$1(0, null), C.Offset_0_0),
        t2 = renderBox._size.bottomRight$1(0, C.Offset_0_0),
        editingRegion = B.Rect$fromPoints(t1, B.MatrixUtils_transformPoint(renderBox.getTransformTo$1(0, null), t2));
      t2 = J.getInterceptor$ax(selectionEndpoints);
      isMultiline = t2.get$last(selectionEndpoints).point._dy - t2.get$first(selectionEndpoints).point._dy > endGlyphHeight / 2;
      t1 = editingRegion.left;
      t3 = isMultiline ? t1 : t1 + t2.get$first(selectionEndpoints).point._dx;
      t4 = editingRegion.top;
      t5 = t2.get$first(selectionEndpoints).point;
      t1 = isMultiline ? editingRegion.right : t1 + t2.get$last(selectionEndpoints).point._dx;
      t2 = t2.get$last(selectionEndpoints).point;
      t3 += (t1 - t3) / 2;
      t1 = editingRegion.bottom;
      return new A.TextSelectionToolbarAnchors(new B.Offset(t3, B.clampDouble(t4 + t5._dy - startGlyphHeight, t4, t1)), new B.Offset(t3, B.clampDouble(t4 + t2._dy, t4, t1)));
    },
    TextSelectionToolbarAnchors: function TextSelectionToolbarAnchors(t0, t1) {
      this.primaryAnchor = t0;
      this.secondaryAnchor = t1;
    },
    TextSelectionToolbarLayoutDelegate__centerOn(position, width, max) {
      var t1 = width / 2,
        t2 = position - t1;
      if (t2 < 0)
        return 0;
      if (position + t1 > max)
        return max - width;
      return t2;
    },
    TextSelectionToolbarLayoutDelegate: function TextSelectionToolbarLayoutDelegate(t0, t1, t2) {
      this.anchorAbove = t0;
      this.anchorBelow = t1;
      this.fitsAbove = t2;
    },
    WidgetSpan: function WidgetSpan() {
    },
    CupertinoTheme_of(context) {
      var inheritedTheme = context.dependOnInheritedWidgetOfExactType$1$0(type$._InheritedCupertinoTheme),
        t1 = inheritedTheme == null ? null : inheritedTheme.theme.data;
      return (t1 == null ? C.CupertinoThemeData_KQb : t1).resolveFrom$1(context);
    },
    ButtonStyleButton_scaledPadding(geometry1x, geometry2x, geometry3x, textScaleFactor) {
      var t1;
      if (textScaleFactor <= 1)
        return geometry1x;
      else if (textScaleFactor >= 3)
        return geometry3x;
      else if (textScaleFactor <= 2) {
        t1 = B.EdgeInsetsGeometry_lerp(geometry1x, geometry2x, textScaleFactor - 1);
        t1.toString;
        return t1;
      }
      t1 = B.EdgeInsetsGeometry_lerp(geometry2x, geometry3x, textScaleFactor - 2);
      t1.toString;
      return t1;
    },
    HapticFeedback_selectionClick() {
      var $async$goto = 0,
        $async$completer = B._makeAsyncAwaitCompleter(type$.void);
      var $async$HapticFeedback_selectionClick = B._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return B._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return B._asyncAwait(C.OptionalMethodChannel_cWd.invokeMethod$1$2("HapticFeedback.vibrate", "HapticFeedbackType.selectionClick", type$.void), $async$HapticFeedback_selectionClick);
            case 2:
              // returning from await.
              // implicit return
              return B._asyncReturn(null, $async$completer);
          }
      });
      return B._asyncStartSync($async$HapticFeedback_selectionClick, $async$completer);
    },
    TextSelection$collapsed(affinity, offset) {
      return new B.TextSelection(offset, offset, affinity, false, offset, offset);
    },
    TextSelection$fromPosition(position) {
      var t1 = position.offset;
      return new B.TextSelection(t1, t1, position.affinity, false, t1, t1);
    },
    Navigator_maybeOf(context) {
      var t1 = context.get$state(context),
        $navigator = t1 instanceof B.NavigatorState ? type$.NavigatorState._as(context.get$state(context)) : null;
      if ($navigator == null)
        $navigator = context.findAncestorStateOfType$1$0(type$.NavigatorState);
      return $navigator;
    }
  },
  B, D, C, G, J, E, I, F, H;
  A = hunkHelpers.updateHolder(holdersList[40], A);
  B = holdersList[0];
  D = holdersList[73];
  C = holdersList[2];
  G = holdersList[79];
  J = holdersList[1];
  E = holdersList[52];
  I = holdersList[84];
  F = holdersList[58];
  H = holdersList[53];
  A._InitializedCell.prototype = {
    _read$0() {
      var _this = this,
        t1 = _this.__late_helper$_value;
      return t1 === _this ? _this.__late_helper$_value = _this.__late_helper$_initializer.call$0() : t1;
    }
  };
  A.PathOperation.prototype = {
    _enumToString$0() {
      return "PathOperation." + this._core$_name;
    }
  };
  A.ThreePointCubic.prototype = {
    transformInternal$1(t) {
      var firstCurve = t < 0.166666,
        scaleX = firstCurve ? 0.166666 : 0.833334,
        scaleY = firstCurve ? 0.4 : 0.6,
        scaledT = (t - (firstCurve ? 0 : 0.166666)) / scaleX;
      if (firstCurve)
        return new B.Cubic(0.05 / scaleX, 0 / scaleY, 0.133333 / scaleX, 0.06 / scaleY).transform$1(0, scaledT) * scaleY;
      else
        return new B.Cubic(0.04166699999999998 / scaleX, 0.41999999999999993 / scaleY, 0.08333399999999999 / scaleX, 0.6 / scaleY).transform$1(0, scaledT) * scaleY + 0.4;
    },
    toString$0(_) {
      return "ThreePointCubic(" + D.Offset_ILV.toString$0(0) + ", " + D.Offset_dGA.toString$0(0) + ", " + D.Offset_GNx.toString$0(0) + ", " + D.Offset_Muk.toString$0(0) + ", " + D.Offset_chs0.toString$0(0) + ") ";
    }
  };
  A.SizeTween.prototype = {
    lerp$1(t) {
      return B.Size_lerp(this.begin, this.end, t);
    }
  };
  A.CupertinoButton.prototype = {
    createState$0() {
      return new A._CupertinoButtonState(new B.Tween(1, null, type$.Tween_double), null, null, C._StateLifecycle_0);
    }
  };
  A._CupertinoButtonState.prototype = {
    initState$0() {
      var t1, t2, t3, t4, _this = this;
      _this.super$State$initState();
      t1 = B.AnimationController$(null, C.Duration_200000, null, 0, _this);
      _this.___CupertinoButtonState__animationController_A = t1;
      t2 = type$.Animatable_double;
      t3 = t2._as(new B.CurveTween(C.C__DecelerateCurve));
      t4 = type$.Animation_double;
      t1 = t4._as(t4._as(t1));
      t2 = t2._as(_this._opacityTween);
      _this.set$___CupertinoButtonState__opacityAnimation_A(t4._as(new B._AnimatedEvaluation(t4._as(t4._as(new B._AnimatedEvaluation(t1, t3, B._instanceType(t3)._eval$1("_AnimatedEvaluation<Animatable.T>")))), t2, t2.$ti._eval$1("_AnimatedEvaluation<Animatable.T>"))));
      _this._setTween$0();
    },
    didUpdateWidget$1(old) {
      this.super$State$didUpdateWidget(type$.CupertinoButton._as(old));
      this._setTween$0();
    },
    _setTween$0() {
      var t1 = this._widget.pressedOpacity;
      this._opacityTween.set$end(0, t1);
    },
    dispose$0() {
      var t1 = this.___CupertinoButtonState__animationController_A;
      t1 === $ && B.throwLateFieldNI("_animationController");
      t1.dispose$0();
      this.super$__CupertinoButtonState_State_SingleTickerProviderStateMixin$dispose();
    },
    _handleTapDown$1($event) {
      if (!this._buttonHeldDown) {
        this._buttonHeldDown = true;
        this._animate$0(0);
      }
    },
    _handleTapUp$1($event) {
      if (this._buttonHeldDown) {
        this._buttonHeldDown = false;
        this._animate$0(0);
      }
    },
    _handleTapCancel$0() {
      if (this._buttonHeldDown) {
        this._buttonHeldDown = false;
        this._animate$0(0);
      }
    },
    _animate$0(_) {
      var t2, wasHeldDown, ticker,
        t1 = this.___CupertinoButtonState__animationController_A;
      t1 === $ && B.throwLateFieldNI("_animationController");
      t2 = t1._ticker;
      if (t2 != null && t2._ticker$_future != null)
        return;
      wasHeldDown = this._buttonHeldDown;
      if (wasHeldDown) {
        t1._direction = C._AnimationDirection_0;
        ticker = t1._animateToInternal$3$curve$duration(1, D.C_ThreePointCubic, D.Duration_120000);
      } else {
        t1._direction = C._AnimationDirection_0;
        ticker = t1._animateToInternal$3$curve$duration(0, G.Cubic_2jN, D.Duration_180000);
      }
      ticker.then$1$1(new A._CupertinoButtonState__animate_closure(this, wasHeldDown), type$.void);
    },
    build$1(context) {
      var backgroundColor, foregroundColor, t3, textStyle, t4, t5, t6, t7, t8, t9, t10, t11, _this = this, _null = null,
        t1 = _this._widget.onPressed == null,
        enabled = !t1,
        themeData = A.CupertinoTheme_of(context),
        primaryColor = themeData.get$primaryColor(),
        t2 = _this._widget.color;
      if (t2 == null)
        backgroundColor = _null;
      else
        backgroundColor = B.CupertinoDynamicColor_maybeResolve(t2, context);
      t2 = backgroundColor != null;
      if (t2)
        foregroundColor = themeData.get$primaryContrastingColor();
      else if (enabled)
        foregroundColor = primaryColor;
      else {
        t3 = D.CupertinoDynamicColor_oxt.resolveFrom$1(context);
        foregroundColor = t3;
      }
      textStyle = themeData.get$textTheme().get$textStyle().copyWith$1$color(foregroundColor);
      t3 = enabled && true ? C.SystemMouseCursor_click : C.C__DeferringMouseCursor;
      t4 = enabled ? _this.get$_handleTapDown() : _null;
      t5 = enabled ? _this.get$_handleTapUp() : _null;
      t6 = enabled ? _this.get$_handleTapCancel() : _null;
      t7 = _this._widget;
      t8 = t7.onPressed;
      t9 = t7.minSize;
      t10 = _this.___CupertinoButtonState__opacityAnimation_A;
      t10 === $ && B.throwLateFieldNI("_opacityAnimation");
      t11 = t7.borderRadius;
      if (t2 && t1) {
        t1 = t7.disabledColor;
        if (t1 instanceof B.CupertinoDynamicColor)
          t1 = t1.resolveFrom$1(context);
      } else
        t1 = backgroundColor;
      t2 = _this._widget;
      t7 = t2.padding;
      return B.MouseRegion$(B.GestureDetector$(C.HitTestBehavior_1, B.Semantics$(true, _null, new B.ConstrainedBox(new B.BoxConstraints(t9, 1 / 0, t9, 1 / 0), B.FadeTransition$(false, B.DecoratedBox$(new B.Padding(t7, new B.Align(t2.alignment, 1, 1, B.DefaultTextStyle$(B.IconTheme$(t2.child, new B.IconThemeData(_null, _null, _null, _null, _null, foregroundColor, _null, _null), _null), _null, _null, C.TextOverflow_0, true, textStyle, _null, _null, C.TextWidthBasis_0), _null), _null), new B.BoxDecoration(t1, _null, _null, t11, _null, _null, _null, C.BoxShape_0), C.DecorationPosition_0), t10), _null), false, _null, _null, false, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null), C.DragStartBehavior_1, false, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, t8, t6, t4, t5, _null, _null, _null), t3, _null, _null, _null, _null);
    },
    set$___CupertinoButtonState__opacityAnimation_A(___CupertinoButtonState__opacityAnimation_A) {
      this.___CupertinoButtonState__opacityAnimation_A = type$.Animation_double._as(___CupertinoButtonState__opacityAnimation_A);
    },
    $isTickerProvider: 1
  };
  A.__CupertinoButtonState_State_SingleTickerProviderStateMixin.prototype = {
    dispose$0() {
      var _this = this,
        t1 = _this.SingleTickerProviderStateMixin__tickerModeNotifier;
      if (t1 != null)
        t1.removeListener$1(0, _this.get$_updateTicker());
      _this.set$_tickerModeNotifier(null);
      _this.super$State$dispose();
    },
    activate$0() {
      this.super$State$activate();
      this._updateTickerModeNotifier$0();
      this._updateTicker$0();
    }
  };
  A._CupertinoDesktopTextSelectionHandleControls.prototype = {};
  A.CupertinoDesktopTextSelectionControls.prototype = {
    getHandleSize$1(textLineHeight) {
      return C.Size_0_0;
    },
    buildHandle$4(context, type, textLineHeight, onTap) {
      type$.nullable_void_Function._as(onTap);
      return C.SizedBox_0_0_null_null;
    },
    getHandleAnchor$2(type, textLineHeight) {
      return C.Offset_0_0;
    }
  };
  A.__CupertinoDesktopTextSelectionHandleControls_CupertinoDesktopTextSelectionControls_TextSelectionHandleControls.prototype = {};
  A.CupertinoDesktopTextSelectionToolbar.prototype = {
    build$1(context) {
      var _null = null,
        paddingAbove = context.dependOnInheritedWidgetOfExactType$1$0(type$.MediaQuery).data.padding.top + 8,
        t1 = this.anchor.$sub(0, new B.Offset(8, paddingAbove)),
        t2 = B.Column$(this.children, C.CrossAxisAlignment_2, C.MainAxisAlignment_0, C.MainAxisSize_0),
        t3 = D.CupertinoDynamicColor_AOy.resolveFrom$1(context),
        side = new B.BorderSide(D.CupertinoDynamicColor_Hla.resolveFrom$1(context), 1, C.BorderStyle_1, -1);
      return new B.Padding(new B.EdgeInsets(8, paddingAbove, 8, 8), new B.CustomSingleChildLayout(new A.DesktopTextSelectionToolbarLayoutDelegate(t1), B.Container$(_null, new B.Padding(D.EdgeInsets_0_3_0_3, t2, _null), C.Clip_0, _null, _null, new B.BoxDecoration(t3, _null, new B.Border(side, side, side, side), C.BorderRadius_tLn0, _null, _null, _null, C.BoxShape_0), _null, _null, _null, _null, 222), _null), _null);
    }
  };
  A.CupertinoDesktopTextSelectionToolbarButton.prototype = {
    createState$0() {
      return new A._CupertinoDesktopTextSelectionToolbarButtonState(C._StateLifecycle_0);
    }
  };
  A._CupertinoDesktopTextSelectionToolbarButtonState.prototype = {
    _onEnter$1($event) {
      type$.PointerEnterEvent._as($event);
      this.setState$1(new A._CupertinoDesktopTextSelectionToolbarButtonState__onEnter_closure(this));
    },
    _onExit$1($event) {
      type$.PointerExitEvent._as($event);
      this.setState$1(new A._CupertinoDesktopTextSelectionToolbarButtonState__onExit_closure(this));
    },
    build$1(context) {
      var _this = this, _null = null,
        child = _this._widget.child,
        t1 = _this._isHovered ? A.CupertinoTheme_of(context).get$primaryColor() : _null;
      return B.SizedBox$(B.MouseRegion$(A.CupertinoButton$(C.Alignment_m1_0, _null, child, t1, D.CupertinoDynamicColor_xDe, 0, _this._widget.onPressed, D.EdgeInsets_20_0_20_3, 0.7), C.C__DeferringMouseCursor, _null, _this.get$_onEnter(), _this.get$_onExit(), _null), _null, 1 / 0);
    }
  };
  A.CupertinoTextMagnifier.prototype = {
    createState$0() {
      return new A._CupertinoTextMagnifierState(C.Offset_0_0, null, null, C._StateLifecycle_0);
    }
  };
  A._CupertinoTextMagnifierState.prototype = {
    initState$0() {
      var t1, t2, t3, _this = this;
      _this.super$State$initState();
      t1 = B.AnimationController$(null, C.Duration_150000, null, 0, _this);
      t2 = type$.void_Function._as(new A._CupertinoTextMagnifierState_initState_closure(_this));
      t1.didRegisterListener$0();
      t3 = t1.AnimationLocalListenersMixin__listeners;
      t3.$ti._precomputed1._as(t2);
      t3._isDirty = true;
      C.JSArray_methods.add$1(t3._list, t2);
      _this.___CupertinoTextMagnifierState__ioAnimationController_A = t1;
      t2 = _this._widget;
      t2.controller.animationController = t1;
      t2.magnifierInfo.addListener$1(0, _this.get$_magnifier0$_determineMagnifierPositionAndFocalPoint());
      t2 = type$.Tween_double;
      t1 = _this.___CupertinoTextMagnifierState__ioAnimationController_A;
      _this._widget.toString;
      t3 = type$.Animation_double;
      _this.set$___CupertinoTextMagnifierState__ioAnimation_A(t3._as(new B._AnimatedEvaluation(t3._as(B.CurvedAnimation$(C.Cubic_xDo0, t1, null)), new B.Tween(0, 1, t2), t2._eval$1("_AnimatedEvaluation<Animatable.T>"))));
    },
    dispose$0() {
      var t1, _this = this;
      _this._widget.controller.animationController = null;
      t1 = _this.___CupertinoTextMagnifierState__ioAnimationController_A;
      t1 === $ && B.throwLateFieldNI("_ioAnimationController");
      t1.dispose$0();
      _this._widget.magnifierInfo.removeListener$1(0, _this.get$_magnifier0$_determineMagnifierPositionAndFocalPoint());
      _this.super$__CupertinoTextMagnifierState_State_SingleTickerProviderStateMixin$dispose();
    },
    didUpdateWidget$1(oldWidget) {
      var t1, t2, _this = this;
      type$.CupertinoTextMagnifier._as(oldWidget);
      t1 = oldWidget.magnifierInfo;
      if (t1 !== _this._widget.magnifierInfo) {
        t2 = _this.get$_magnifier0$_determineMagnifierPositionAndFocalPoint();
        t1.removeListener$1(0, t2);
        _this._widget.magnifierInfo.addListener$1(0, t2);
      }
      _this.super$State$didUpdateWidget(oldWidget);
    },
    didChangeDependencies$0() {
      this._magnifier0$_determineMagnifierPositionAndFocalPoint$0();
      this.super$State$didChangeDependencies();
    },
    _magnifier0$_determineMagnifierPositionAndFocalPoint$0() {
      var verticalPositionOfLens, _this = this,
        textEditingContext = _this._widget.magnifierInfo._change_notifier$_value,
        verticalCenterOfCurrentLine = textEditingContext.caretRect.get$center()._dy,
        t1 = textEditingContext.globalGesturePosition,
        t2 = verticalCenterOfCurrentLine - t1._dy,
        t3 = _this._widget;
      t3.toString;
      if (t2 < -48) {
        if (t3.controller.get$shown())
          _this._widget.controller.hide$1$removeFromOverlay(false);
        return;
      }
      if (!t3.controller.get$shown()) {
        t3 = _this.___CupertinoTextMagnifierState__ioAnimationController_A;
        t3 === $ && B.throwLateFieldNI("_ioAnimationController");
        t3.forward$0(0);
      }
      _this._widget.toString;
      verticalPositionOfLens = Math.max(verticalCenterOfCurrentLine, verticalCenterOfCurrentLine - t2 / 10);
      t1 = t1._dx - 40;
      t2 = verticalPositionOfLens - 73.5;
      t3 = _this._framework$_element.dependOnInheritedWidgetOfExactType$1$0(type$.MediaQuery).data.size;
      _this._widget.toString;
      t2 = A.MagnifierController_shiftWithinBounds(new B.Rect(10, -21.5, 0 + t3._dx - 10, 0 + t3._dy + 21.5), new B.Rect(t1, t2, t1 + 80, t2 + 47.5));
      _this.setState$1(new A._CupertinoTextMagnifierState__determineMagnifierPositionAndFocalPoint_closure(_this, new B.Offset(t2.left, t2.top), verticalCenterOfCurrentLine, verticalPositionOfLens));
    },
    build$1(context) {
      var t1, t2, _this = this;
      _this._widget.toString;
      t1 = _this._currentAdjustedMagnifierPosition;
      t2 = _this.___CupertinoTextMagnifierState__ioAnimation_A;
      t2 === $ && B.throwLateFieldNI("_ioAnimation");
      return A.AnimatedPositioned$(new A.CupertinoMagnifier(t2, new B.Offset(0, _this._verticalFocalPointAdjustment), null), C.Cubic_xDo0, D.Duration_45000, t1._dx, t1._dy);
    },
    set$___CupertinoTextMagnifierState__ioAnimation_A(___CupertinoTextMagnifierState__ioAnimation_A) {
      this.___CupertinoTextMagnifierState__ioAnimation_A = type$.Animation_double._as(___CupertinoTextMagnifierState__ioAnimation_A);
    },
    $isTickerProvider: 1
  };
  A.CupertinoMagnifier.prototype = {
    build$1(context) {
      var t3, focalPointOffset,
        t1 = this.inOutAnimation,
        t2 = t1._evaluatable;
      t1 = type$.Animation_double._as(t1.parent);
      t3 = t2.transform$1(0, t1.get$value(t1));
      B._asDouble(t3 == null ? 1 : t3);
      focalPointOffset = new B.Offset(0, 49.75).$add(0, this.additionalFocalPointOffset);
      t3 = t2.transform$1(0, t1.get$value(t1));
      t3 = B.Offset_lerp(D.Offset_0_26, C.Offset_0_0, t3 == null ? 1 : t3);
      t3.toString;
      t1 = t2.transform$1(0, t1.get$value(t1));
      if (t1 == null)
        t1 = 1;
      return A.Transform$translate(new A.RawMagnifier(null, A.MagnifierDecoration$(t1, D.List_GFk, new B.RoundedRectangleBorder(D.BorderRadius_tLn4, D.BorderSide_2Vu)), focalPointOffset, 1, D.Size_6v8, null), null, t3);
    }
  };
  A.__CupertinoTextMagnifierState_State_SingleTickerProviderStateMixin.prototype = {
    dispose$0() {
      var _this = this,
        t1 = _this.SingleTickerProviderStateMixin__tickerModeNotifier;
      if (t1 != null)
        t1.removeListener$1(0, _this.get$_updateTicker());
      _this.set$_tickerModeNotifier(null);
      _this.super$State$dispose();
    },
    activate$0() {
      this.super$State$activate();
      this._updateTickerModeNotifier$0();
      this._updateTicker$0();
    }
  };
  A._TextSelectionHandlePainter0.prototype = {
    paint$2(canvas, size) {
      var circle, line, path,
        t1 = $.$get$_renderer(),
        paint = t1.createPaint$0();
      paint.set$color(0, this.color);
      circle = B.Rect$fromCircle(D.Offset_6_6, 6);
      line = B.Rect$fromPoints(D.Offset_6pl, new B.Offset(7, size._dy));
      path = t1.createPath$0();
      path.addOval$1(circle);
      path.addRect$1(line);
      canvas.drawPath$2(path, paint);
    },
    shouldRepaint$1(oldPainter) {
      return !this.color.$eq(0, type$._TextSelectionHandlePainter._as(oldPainter).color);
    }
  };
  A.CupertinoTextSelectionHandleControls.prototype = {};
  A.CupertinoTextSelectionControls.prototype = {
    getHandleSize$1(textLineHeight) {
      return new B.Size(12, textLineHeight + 12 - 1.5);
    },
    buildToolbar$8(context, globalEditableRegion, textLineHeight, selectionMidpoint, endpoints, delegate, clipboardStatus, lastSecondaryTapDownPosition) {
      var t1, t2, t3, _this = this, _null = null;
      type$.List_TextSelectionPoint._as(endpoints);
      type$.nullable_ValueNotifier_ClipboardStatus._as(clipboardStatus);
      t1 = _this.canCut$1(delegate) ? new A.CupertinoTextSelectionControls_buildToolbar_closure(_this, delegate) : _null;
      t2 = _this.canCopy$1(delegate) ? new A.CupertinoTextSelectionControls_buildToolbar_closure0(_this, delegate) : _null;
      t3 = _this.canPaste$1(delegate) ? new A.CupertinoTextSelectionControls_buildToolbar_closure1(_this, delegate) : _null;
      return new A._CupertinoTextSelectionControlsToolbar(clipboardStatus, endpoints, globalEditableRegion, t2, t1, t3, _this.canSelectAll$1(delegate) ? new A.CupertinoTextSelectionControls_buildToolbar_closure2(_this, delegate) : _null, selectionMidpoint, textLineHeight, _null);
    },
    buildHandle$4(context, type, textLineHeight, onTap) {
      var customPaint, t1, handle, t2, t3, cosAngle, sinAngle, t4, t5, t6, t7, t8, t9, t10, t11, t12, _null = null;
      type$.nullable_void_Function._as(onTap);
      customPaint = B.CustomPaint$(_null, _null, _null, new A._TextSelectionHandlePainter0(A.CupertinoTheme_of(context).get$primaryColor(), _null), C.Size_0_0);
      switch (type.index) {
        case 0:
          return A.SizedBox$fromSize(customPaint, new B.Size(12, textLineHeight + 12 - 1.5));
        case 1:
          t1 = textLineHeight + 12 - 1.5;
          handle = A.SizedBox$fromSize(customPaint, new B.Size(12, t1));
          t2 = new Float64Array(16);
          t3 = new B.Matrix4(t2);
          t3.setIdentity$0();
          t3.translate$2(0, 6, t1 / 2);
          cosAngle = Math.cos(3.141592653589793);
          sinAngle = Math.sin(3.141592653589793);
          t4 = t2[0];
          t5 = t2[4];
          t6 = t2[1];
          t7 = t2[5];
          t8 = t2[2];
          t9 = t2[6];
          t10 = t2[3];
          t11 = t2[7];
          t12 = -sinAngle;
          t2[0] = t4 * cosAngle + t5 * sinAngle;
          t2[1] = t6 * cosAngle + t7 * sinAngle;
          t2[2] = t8 * cosAngle + t9 * sinAngle;
          t2[3] = t10 * cosAngle + t11 * sinAngle;
          t2[4] = t4 * t12 + t5 * cosAngle;
          t2[5] = t6 * t12 + t7 * cosAngle;
          t2[6] = t8 * t12 + t9 * cosAngle;
          t2[7] = t10 * t12 + t11 * cosAngle;
          t3.translate$2(0, -6, -t1 / 2);
          return B.Transform$(_null, handle, t3, true);
        case 2:
          return C.SizedBox_0_0_null_null;
      }
    },
    getHandleAnchor$2(type, textLineHeight) {
      switch (type.index) {
        case 0:
          return new B.Offset(6, textLineHeight + 12 - 1.5);
        case 1:
          return new B.Offset(6, textLineHeight + 12 - 1.5 - 12 + 1.5);
        case 2:
          return new B.Offset(6, textLineHeight + (textLineHeight + 12 - 1.5 - textLineHeight) / 2);
      }
    }
  };
  A._CupertinoTextSelectionControlsToolbar.prototype = {
    createState$0() {
      return new A._CupertinoTextSelectionControlsToolbarState(C._StateLifecycle_0);
    }
  };
  A._CupertinoTextSelectionControlsToolbarState.prototype = {
    initState$0() {
      this.super$State$initState();
      this._widget.toString;
    },
    didUpdateWidget$1(oldWidget) {
      this.super$State$didUpdateWidget(type$._CupertinoTextSelectionControlsToolbar._as(oldWidget));
      this._widget.toString;
    },
    dispose$0() {
      this._widget.toString;
      this.super$State$dispose();
    },
    build$1(context) {
      var t1, mediaQuery, t2, t3, anchorX, t4, t5, items, t6, _this = this;
      _this._widget.handlePaste != null;
      t1 = type$.MediaQuery;
      mediaQuery = context.dependOnInheritedWidgetOfExactType$1$0(t1).data;
      t2 = _this._widget;
      t3 = mediaQuery.padding;
      anchorX = B.clampDouble(t2.selectionMidpoint._dx + t2.globalEditableRegion.left, 26 + t3.left, mediaQuery.size._dx - t3.right - 26);
      t2 = J.get$first$ax(t2.endpoints).point;
      t3 = _this._widget;
      t2 = Math.max(t2._dy - t3.textLineHeight, 0);
      t4 = t3.globalEditableRegion;
      t3 = J.get$last$ax(t3.endpoints).point;
      t5 = _this._widget.globalEditableRegion;
      items = B._setArrayType([], type$.JSArray_Widget);
      B.Localizations_of(context, D.Type_CupertinoLocalizations_10U, type$.CupertinoLocalizations).toString;
      t1 = new A._CupertinoTextSelectionControlsToolbarState_build_addToolbarButton(items, B.SizedBox$(null, null, 1 / context.dependOnInheritedWidgetOfExactType$1$0(t1).data.devicePixelRatio));
      t6 = _this._widget.handleCut;
      if (t6 != null)
        t1.call$2("Cut", t6);
      t6 = _this._widget.handleCopy;
      if (t6 != null)
        t1.call$2("Copy", t6);
      t6 = _this._widget;
      t6.handlePaste != null;
      t6 = t6.handleSelectAll;
      if (t6 != null)
        t1.call$2("Select All", t6);
      if (items.length === 0)
        return C.SizedBox_0_0_null_null;
      return A.CupertinoTextSelectionToolbar$(new B.Offset(anchorX, t2 + t4.top), new B.Offset(anchorX, t3._dy + t5.top), items);
    }
  };
  A._CupertinoTextSelectionHandleControls_CupertinoTextSelectionControls_TextSelectionHandleControls.prototype = {};
  A._CupertinoToolbarButtonDivider.prototype = {
    build$1(context) {
      return B.SizedBox$(null, null, 1 / context.dependOnInheritedWidgetOfExactType$1$0(type$.MediaQuery).data.devicePixelRatio);
    }
  };
  A.CupertinoTextSelectionToolbar.prototype = {
    build$1(context) {
      var anchorBelowAdjusted,
        mediaQuery = context.dependOnInheritedWidgetOfExactType$1$0(type$.MediaQuery).data,
        t1 = mediaQuery.padding,
        paddingAbove = t1.top + 8,
        t2 = this.anchorAbove,
        t3 = t2._dy,
        fitsAbove = t3 >= paddingAbove + 8 + 43,
        leftMargin = 26 + t1.left,
        rightMargin = mediaQuery.size._dx - t1.right - 26,
        anchorAboveAdjusted = new B.Offset(B.clampDouble(t2._dx, leftMargin, rightMargin), t3 - 8 - paddingAbove);
      t3 = this.anchorBelow;
      anchorBelowAdjusted = new B.Offset(B.clampDouble(t3._dx, leftMargin, rightMargin), t3._dy + 8 - paddingAbove);
      t1 = fitsAbove ? anchorAboveAdjusted : anchorBelowAdjusted;
      return new B.Padding(new B.EdgeInsets(8, paddingAbove, 8, 8), new B.CustomSingleChildLayout(new A.TextSelectionToolbarLayoutDelegate(anchorAboveAdjusted, anchorBelowAdjusted, fitsAbove), new A._CupertinoTextSelectionToolbarContent(t1, A.CupertinoTextSelectionToolbar__addChildrenSpacers(this.children), fitsAbove, A.text_selection_toolbar0_CupertinoTextSelectionToolbar__defaultToolbarBuilder$closure(), null), null), null);
    }
  };
  A._CupertinoTextSelectionToolbarShape.prototype = {
    createRenderObject$1(context) {
      var t1 = new A._RenderCupertinoTextSelectionToolbarShape(this._anchor, this._text_selection_toolbar0$_isAbove, B.BoxConstraints$tightFor(50, null), B.LayerHandle$(type$.ClipPathLayer), null, B.LayerHandle$(type$.ContainerLayer));
      t1.RenderObject$0();
      t1.set$child(null);
      return t1;
    },
    updateRenderObject$2(context, renderObject) {
      type$._RenderCupertinoTextSelectionToolbarShape._as(renderObject);
      renderObject.set$anchor(this._anchor);
      renderObject.set$isAbove(this._text_selection_toolbar0$_isAbove);
    }
  };
  A._RenderCupertinoTextSelectionToolbarShape.prototype = {
    get$isRepaintBoundary() {
      return true;
    },
    set$anchor(value) {
      if (value.$eq(0, this._anchor))
        return;
      this._anchor = value;
      this.markNeedsLayout$0();
    },
    set$isAbove(value) {
      if (this._text_selection_toolbar0$_isAbove === value)
        return;
      this._text_selection_toolbar0$_isAbove = value;
      this.markNeedsLayout$0();
    },
    performLayout$0() {
      var t1, t2, _this = this;
      if (_this.RenderObjectWithChildMixin__child == null)
        return;
      t1 = type$.BoxConstraints._as(B.RenderObject.prototype.get$constraints.call(_this));
      t2 = _this.RenderObjectWithChildMixin__child;
      t2.toString;
      t2.layout$2$parentUsesSize(_this._heightConstraint.enforce$1(new B.BoxConstraints(0, t1.maxWidth, 0, t1.maxHeight)), true);
      t1 = _this.RenderObjectWithChildMixin__child;
      t2 = t1.parentData;
      t2.toString;
      type$.BoxParentData._as(t2);
      t2.offset = new B.Offset(0, _this._text_selection_toolbar0$_isAbove ? -7 : 0);
      t1 = t1._size;
      _this._size = new B.Size(t1._dx, t1._dy - 7);
    },
    paint$2(context, offset) {
      var t2, t3, t4, t5, t6, t7, rrect, t8, localAnchor, t9, arrowTipX, arrowBaseY, arrowTipY, arrow, _this = this,
        t1 = _this.RenderObjectWithChildMixin__child;
      if (t1 == null)
        return;
      t1 = t1.parentData;
      t1.toString;
      t2 = type$.BoxParentData;
      t2._as(t1);
      t3 = _this._clipPathLayer;
      t4 = _this.__RenderObject__needsCompositing_A;
      t4 === $ && B.throwLateFieldNI("_needsCompositing");
      t1 = offset.$add(0, t1.offset);
      t5 = _this.RenderObjectWithChildMixin__child;
      t6 = t5._size;
      t7 = t6._dx;
      t6 = t6._dy;
      t5 = t5.parentData;
      t5.toString;
      t2._as(t5);
      t2 = $.$get$_renderer();
      rrect = t2.createPath$0();
      t8 = _this.RenderObjectWithChildMixin__child._size;
      rrect.addRRect$1(B.RRect$fromRectAndRadius(new B.Rect(0, 7, 0 + t8._dx, 7 + (t8._dy - 14)), C.Radius_8_8));
      localAnchor = _this.globalToLocal$1(_this._anchor);
      t5 = t5.offset._dx;
      t8 = _this.RenderObjectWithChildMixin__child._size;
      t9 = t8._dx / 2;
      arrowTipX = t9 + (localAnchor._dx - (t5 + t9));
      t5 = _this._text_selection_toolbar0$_isAbove;
      arrowBaseY = t5 ? t8._dy - 7 : 7;
      arrowTipY = t5 ? t8._dy : 0;
      arrow = t2.createPath$0();
      arrow.moveTo$2(0, arrowTipX, arrowTipY);
      arrow.lineTo$2(0, arrowTipX - 7, arrowBaseY);
      arrow.lineTo$2(0, arrowTipX + 7, arrowBaseY);
      arrow.close$0(0);
      t3.set$layer(0, context.pushClipPath$6$oldLayer(t4, t1, new B.Rect(0, 0, 0 + t7, 0 + t6), t2.combinePaths$3(D.PathOperation_2, rrect, arrow), new A._RenderCupertinoTextSelectionToolbarShape_paint_closure(_this), t3._layer));
    },
    dispose$0() {
      this._clipPathLayer.set$layer(0, null);
      this.super$RenderObject$dispose();
    },
    hitTestChildren$2$position(result, position) {
      var t3,
        t1 = this.RenderObjectWithChildMixin__child,
        t2 = t1.parentData;
      t2.toString;
      t2 = type$.BoxParentData._as(t2).offset;
      t3 = t2._dx;
      t2 = t2._dy + 7;
      t1 = t1._size;
      if (!new B.Rect(t3, t2, t3 + t1._dx, t2 + (t1._dy - 14)).contains$1(0, position))
        return false;
      return this.super$RenderShiftedBox$hitTestChildren(result, position);
    }
  };
  A._CupertinoTextSelectionToolbarContent.prototype = {
    createState$0() {
      return new A._CupertinoTextSelectionToolbarContentState(null, null, C._StateLifecycle_0);
    },
    toolbarBuilder$4(arg0, arg1, arg2, arg3) {
      return this.toolbarBuilder.call$4(arg0, arg1, arg2, arg3);
    }
  };
  A._CupertinoTextSelectionToolbarContentState.prototype = {
    _handleNextPage$0() {
      var t2, _this = this,
        t1 = _this.___CupertinoTextSelectionToolbarContentState__controller_A;
      t1 === $ && B.throwLateFieldNI("_controller");
      t1.reverse$0(0);
      t1 = _this.___CupertinoTextSelectionToolbarContentState__controller_A;
      t2 = type$.void_Function_AnimationStatus._as(_this.get$_statusListener());
      t1.didRegisterListener$0();
      t1 = t1.AnimationLocalStatusListenersMixin__statusListeners;
      t1.$ti._precomputed1._as(t2);
      t1._isDirty = true;
      C.JSArray_methods.add$1(t1._list, t2);
      _this._nextPage = _this._text_selection_toolbar0$_page + 1;
    },
    _handlePreviousPage$0() {
      var t2, _this = this,
        t1 = _this.___CupertinoTextSelectionToolbarContentState__controller_A;
      t1 === $ && B.throwLateFieldNI("_controller");
      t1.reverse$0(0);
      t1 = _this.___CupertinoTextSelectionToolbarContentState__controller_A;
      t2 = type$.void_Function_AnimationStatus._as(_this.get$_statusListener());
      t1.didRegisterListener$0();
      t1 = t1.AnimationLocalStatusListenersMixin__statusListeners;
      t1.$ti._precomputed1._as(t2);
      t1._isDirty = true;
      C.JSArray_methods.add$1(t1._list, t2);
      _this._nextPage = _this._text_selection_toolbar0$_page - 1;
    },
    _statusListener$1($status) {
      var t1, _this = this;
      if (type$.AnimationStatus._as($status) !== C.AnimationStatus_0)
        return;
      _this.setState$1(new A._CupertinoTextSelectionToolbarContentState__statusListener_closure(_this));
      t1 = _this.___CupertinoTextSelectionToolbarContentState__controller_A;
      t1 === $ && B.throwLateFieldNI("_controller");
      t1.forward$0(0);
      _this.___CupertinoTextSelectionToolbarContentState__controller_A.removeStatusListener$1(_this.get$_statusListener());
    },
    initState$0() {
      this.super$State$initState();
      this.___CupertinoTextSelectionToolbarContentState__controller_A = B.AnimationController$(null, C.Duration_150000, null, 1, this);
    },
    didUpdateWidget$1(oldWidget) {
      var t1, _this = this;
      type$._CupertinoTextSelectionToolbarContent._as(oldWidget);
      _this.super$State$didUpdateWidget(oldWidget);
      if (_this._widget.children !== oldWidget.children) {
        _this._text_selection_toolbar0$_page = 0;
        _this._nextPage = null;
        t1 = _this.___CupertinoTextSelectionToolbarContentState__controller_A;
        t1 === $ && B.throwLateFieldNI("_controller");
        t1.forward$0(0);
        _this.___CupertinoTextSelectionToolbarContentState__controller_A.removeStatusListener$1(_this.get$_statusListener());
      }
    },
    dispose$0() {
      var t1 = this.___CupertinoTextSelectionToolbarContentState__controller_A;
      t1 === $ && B.throwLateFieldNI("_controller");
      t1.dispose$0();
      this.super$__CupertinoTextSelectionToolbarContentState_State_TickerProviderStateMixin$dispose();
    },
    build$1(context) {
      var t5, t6, t7, t8, t9, _this = this,
        t1 = _this._widget,
        t2 = t1.anchor,
        t3 = t1.isAbove,
        t4 = _this.___CupertinoTextSelectionToolbarContentState__controller_A;
      t4 === $ && B.throwLateFieldNI("_controller");
      t5 = _this._text_selection_toolbar0$_page;
      t6 = A.CupertinoTextSelectionToolbarButton$text(_this.get$_handlePreviousPage(), "\u25c0");
      t7 = context.dependOnInheritedWidgetOfExactType$1$0(type$.MediaQuery).data;
      t8 = A.CupertinoTextSelectionToolbarButton$text(_this.get$_handleNextPage(), "\u25b6");
      t9 = A.CupertinoTextSelectionToolbarButton$text(null, "\u25b6");
      return t1.toolbarBuilder$4(context, t2, t3, B.FadeTransition$(false, new A._CupertinoTextSelectionToolbarItems(t6, _this._widget.children, 1 / t7.devicePixelRatio, t8, t9, t5, null), t4));
    },
    $isTickerProvider: 1
  };
  A._CupertinoTextSelectionToolbarItems.prototype = {
    createRenderObject$1(context) {
      var t1 = new A._RenderCupertinoTextSelectionToolbarItems(B.LinkedHashMap_LinkedHashMap$_empty(type$._CupertinoTextSelectionToolbarItemsSlot, type$.RenderBox), this.page, this.dividerWidth, 0, null, null, B.LayerHandle$(type$.ContainerLayer));
      t1.RenderObject$0();
      return t1;
    },
    updateRenderObject$2(context, renderObject) {
      type$._RenderCupertinoTextSelectionToolbarItems._as(renderObject);
      renderObject.set$page(0, this.page);
      renderObject.set$dividerWidth(this.dividerWidth);
    },
    createElement$0(_) {
      var t1 = type$.Element,
        t2 = B.HashSet_HashSet(t1);
      return new A._CupertinoTextSelectionToolbarItemsElement(B.LinkedHashMap_LinkedHashMap$_empty(type$._CupertinoTextSelectionToolbarItemsSlot, t1), t2, this, C._ElementLifecycle_0);
    }
  };
  A._CupertinoTextSelectionToolbarItemsElement.prototype = {
    get$renderObject() {
      return type$._RenderCupertinoTextSelectionToolbarItems._as(B.RenderObjectElement.prototype.get$renderObject.call(this));
    },
    _updateRenderObject$2(child, slot) {
      var t1;
      switch (slot.index) {
        case 0:
          t1 = type$._RenderCupertinoTextSelectionToolbarItems._as(B.RenderObjectElement.prototype.get$renderObject.call(this));
          t1._backButton = t1._updateChild$3(t1._backButton, child, D._CupertinoTextSelectionToolbarItemsSlot_0);
          break;
        case 1:
          t1 = type$._RenderCupertinoTextSelectionToolbarItems._as(B.RenderObjectElement.prototype.get$renderObject.call(this));
          t1._nextButton = t1._updateChild$3(t1._nextButton, child, D._CupertinoTextSelectionToolbarItemsSlot_1);
          break;
        case 2:
          t1 = type$._RenderCupertinoTextSelectionToolbarItems._as(B.RenderObjectElement.prototype.get$renderObject.call(this));
          t1._nextButtonDisabled = t1._updateChild$3(t1._nextButtonDisabled, child, D._CupertinoTextSelectionToolbarItemsSlot_2);
          break;
      }
    },
    insertRenderObjectChild$2(child, slot) {
      var t1, t2, t3;
      if (slot instanceof A._CupertinoTextSelectionToolbarItemsSlot) {
        this._updateRenderObject$2(type$.RenderBox._as(child), slot);
        return;
      }
      if (slot instanceof B.IndexedSlot) {
        t1 = type$._RenderCupertinoTextSelectionToolbarItems._as(B.RenderObjectElement.prototype.get$renderObject.call(this));
        type$.RenderBox._as(child);
        t2 = slot.value;
        t2 = t2 == null ? null : t2.get$renderObject();
        type$.nullable_RenderBox._as(t2);
        t3 = B._instanceType(t1);
        t3._eval$1("ContainerRenderObjectMixin.0")._as(child);
        t3._eval$1("ContainerRenderObjectMixin.0?")._as(t2);
        t1.adoptChild$1(child);
        t1._insertIntoChildList$2$after(child, t2);
        return;
      }
    },
    moveRenderObjectChild$3(child, oldSlot, newSlot) {
      var t1 = type$.IndexedSlot_Element;
      t1._as(oldSlot);
      t1._as(newSlot);
      type$._RenderCupertinoTextSelectionToolbarItems._as(B.RenderObjectElement.prototype.get$renderObject.call(this)).move$2$after(type$.RenderBox._as(child), type$.nullable_RenderBox._as(newSlot.value.get$renderObject()));
    },
    removeRenderObjectChild$2(child, slot) {
      var t1;
      if (slot instanceof A._CupertinoTextSelectionToolbarItemsSlot) {
        this._updateRenderObject$2(null, slot);
        return;
      }
      t1 = type$._RenderCupertinoTextSelectionToolbarItems._as(B.RenderObjectElement.prototype.get$renderObject.call(this));
      child = B._instanceType(t1)._eval$1("ContainerRenderObjectMixin.0")._as(type$.RenderBox._as(child));
      t1._removeFromChildList$1(child);
      t1.dropChild$1(child);
    },
    visitChildren$1(visitor) {
      var t1, t2, t3, _i, child;
      type$.void_Function_Element._as(visitor);
      t1 = this.slotToChild;
      t1.get$values(t1).forEach$1(0, visitor);
      t1 = this.___CupertinoTextSelectionToolbarItemsElement__children_A;
      t1 === $ && B.throwLateFieldNI("_children");
      t2 = t1.length;
      t3 = this._text_selection_toolbar0$_forgottenChildren;
      _i = 0;
      for (; _i < t2; ++_i) {
        child = t1[_i];
        if (!t3.contains$1(0, child))
          visitor.call$1(child);
      }
    },
    forgetChild$1(child) {
      var t2,
        t1 = this.slotToChild;
      if (t1.containsKey$1(0, child._slot)) {
        t2 = child._slot;
        t2.toString;
        t1.remove$1(0, type$._CupertinoTextSelectionToolbarItemsSlot._as(t2));
      } else
        this._text_selection_toolbar0$_forgottenChildren.add$1(0, child);
      this.super$Element$forgetChild(child);
    },
    _mountChild$2(widget, slot) {
      var t1 = this.slotToChild,
        oldChild = t1.$index(0, slot),
        newChild = this.updateChild$3(oldChild, widget, slot);
      if (oldChild != null)
        t1.remove$1(0, slot);
      if (newChild != null)
        t1.$indexSet(0, slot, newChild);
    },
    mount$2($parent, newSlot) {
      var t1, t2, previousChild, i, t3, newChild, _this = this;
      _this.super$RenderObjectElement$mount($parent, newSlot);
      t1 = _this._widget;
      t1.toString;
      type$._CupertinoTextSelectionToolbarItems._as(t1);
      _this._mountChild$2(t1.backButton, D._CupertinoTextSelectionToolbarItemsSlot_0);
      _this._mountChild$2(t1.nextButton, D._CupertinoTextSelectionToolbarItemsSlot_1);
      _this._mountChild$2(t1.nextButtonDisabled, D._CupertinoTextSelectionToolbarItemsSlot_2);
      t1 = t1.children;
      _this.set$___CupertinoTextSelectionToolbarItemsElement__children_A(type$.List_Element._as(B.List_List$filled(t1.length, $.$get$_NullElement_instance0(), false, type$.Element)));
      t2 = type$.IndexedSlot_nullable_Element;
      previousChild = null;
      i = 0;
      while (true) {
        t3 = _this.___CupertinoTextSelectionToolbarItemsElement__children_A;
        t3 === $ && B.throwLateFieldNI("_children");
        if (!(i < t3.length))
          break;
        if (!(i < t1.length))
          return B.ioore(t1, i);
        newChild = _this.inflateWidget$2(t1[i], new B.IndexedSlot(previousChild, i, t2));
        C.JSArray_methods.$indexSet(_this.___CupertinoTextSelectionToolbarItemsElement__children_A, i, newChild);
        ++i;
        previousChild = newChild;
      }
    },
    update$1(_, newWidget) {
      var t2, t3, _this = this,
        t1 = type$._CupertinoTextSelectionToolbarItems;
      _this.super$RenderObjectElement$update(0, t1._as(newWidget));
      t2 = _this._widget;
      t2.toString;
      t1._as(t2);
      _this._mountChild$2(t2.backButton, D._CupertinoTextSelectionToolbarItemsSlot_0);
      _this._mountChild$2(t2.nextButton, D._CupertinoTextSelectionToolbarItemsSlot_1);
      _this._mountChild$2(t2.nextButtonDisabled, D._CupertinoTextSelectionToolbarItemsSlot_2);
      t1 = _this.___CupertinoTextSelectionToolbarItemsElement__children_A;
      t1 === $ && B.throwLateFieldNI("_children");
      t3 = _this._text_selection_toolbar0$_forgottenChildren;
      _this.set$___CupertinoTextSelectionToolbarItemsElement__children_A(type$.List_Element._as(_this.updateChildren$3$forgottenChildren(t1, t2.children, t3)));
      t3.clear$0(0);
    },
    set$___CupertinoTextSelectionToolbarItemsElement__children_A(___CupertinoTextSelectionToolbarItemsElement__children_A) {
      this.___CupertinoTextSelectionToolbarItemsElement__children_A = type$.List_Element._as(___CupertinoTextSelectionToolbarItemsElement__children_A);
    }
  };
  A._RenderCupertinoTextSelectionToolbarItems.prototype = {
    _updateChild$3(oldChild, newChild, slot) {
      var _this = this;
      if (oldChild != null) {
        _this.dropChild$1(oldChild);
        _this.slottedChildren.remove$1(0, slot);
      }
      if (newChild != null) {
        _this.slottedChildren.$indexSet(0, slot, newChild);
        _this.adoptChild$1(newChild);
      }
      return newChild;
    },
    set$page(_, value) {
      if (value === this._text_selection_toolbar0$_page)
        return;
      this._text_selection_toolbar0$_page = value;
      this.markNeedsLayout$0();
    },
    set$dividerWidth(value) {
      if (value === this._dividerWidth)
        return;
      this._dividerWidth = value;
      this.markNeedsLayout$0();
    },
    performLayout$0() {
      var t2, t3, t4, toolbarWidth, greatestHeight, firstPageWidth, t5, t6, _this = this, t1 = {};
      if (_this.ContainerRenderObjectMixin__firstChild == null) {
        t1 = type$.BoxConstraints._as(B.RenderObject.prototype.get$constraints.call(_this));
        _this._size = new B.Size(B.clampDouble(0, t1.minWidth, t1.maxWidth), B.clampDouble(0, t1.minHeight, t1.maxHeight));
        return;
      }
      t2 = _this._backButton;
      t2.toString;
      t3 = type$.BoxConstraints;
      t4 = t3._as(B.RenderObject.prototype.get$constraints.call(_this));
      t2.layout$2$parentUsesSize(new B.BoxConstraints(0, t4.maxWidth, 0, t4.maxHeight), true);
      t4 = _this._nextButton;
      t4.toString;
      t2 = t3._as(B.RenderObject.prototype.get$constraints.call(_this));
      t4.layout$2$parentUsesSize(new B.BoxConstraints(0, t2.maxWidth, 0, t2.maxHeight), true);
      t2 = _this._nextButtonDisabled;
      t2.toString;
      t4 = t3._as(B.RenderObject.prototype.get$constraints.call(_this));
      t2.layout$2$parentUsesSize(new B.BoxConstraints(0, t4.maxWidth, 0, t4.maxHeight), true);
      t4 = _this._backButton._size._dx;
      t2 = _this._nextButton._size._dx;
      t1.currentButtonPosition = 0;
      toolbarWidth = B._Cell$named("toolbarWidth");
      greatestHeight = A._InitializedCell$named("greatestHeight", new A._RenderCupertinoTextSelectionToolbarItems_performLayout_closure());
      firstPageWidth = B._Cell$named("firstPageWidth");
      t1.currentPage = 0;
      t1.i = -1;
      _this.visitChildren$1(new A._RenderCupertinoTextSelectionToolbarItems_performLayout_closure0(t1, _this, t4 + t2, firstPageWidth, greatestHeight, toolbarWidth));
      t1 = t1.currentPage;
      if (t1 > 0) {
        t2 = _this._nextButton.parentData;
        t2.toString;
        t4 = type$.ToolbarItemsParentData;
        t4._as(t2);
        t5 = _this._nextButtonDisabled.parentData;
        t5.toString;
        t4._as(t5);
        t6 = _this._backButton.parentData;
        t6.toString;
        t4._as(t6);
        if (_this._text_selection_toolbar0$_page === t1) {
          t5.offset = new B.Offset(toolbarWidth._readLocal$0(), 0);
          t5.shouldPaint = true;
          t1 = toolbarWidth._readLocal$0();
          t2 = _this._nextButtonDisabled._size._dx;
          if (typeof t1 !== "number")
            return t1.$add();
          toolbarWidth.__late_helper$_value = t1 + t2;
        } else {
          t2.offset = new B.Offset(toolbarWidth._readLocal$0(), 0);
          t2.shouldPaint = true;
          t1 = toolbarWidth._readLocal$0();
          t2 = _this._nextButton._size._dx;
          if (typeof t1 !== "number")
            return t1.$add();
          toolbarWidth.__late_helper$_value = t1 + t2;
        }
        if (_this._text_selection_toolbar0$_page > 0) {
          t6.offset = C.Offset_0_0;
          t6.shouldPaint = true;
        }
      } else {
        t1 = toolbarWidth._readLocal$0();
        t2 = _this._dividerWidth;
        if (typeof t1 !== "number")
          return t1.$sub();
        toolbarWidth.__late_helper$_value = t1 - t2;
      }
      _this._size = t3._as(B.RenderObject.prototype.get$constraints.call(_this)).constrain$1(new B.Size(toolbarWidth._readLocal$0(), greatestHeight._read$0()));
    },
    paint$2(context, offset) {
      this.visitChildren$1(new A._RenderCupertinoTextSelectionToolbarItems_paint_closure(offset, context));
    },
    setupParentData$1(child) {
      type$.RenderBox._as(child);
      if (!(child.parentData instanceof A.ToolbarItemsParentData))
        child.parentData = new A.ToolbarItemsParentData(null, null, C.Offset_0_0);
    },
    hitTestChildren$2$position(result, position) {
      var t1, t2, _this = this,
        child = _this.ContainerRenderObjectMixin__lastChild;
      for (t1 = type$.ToolbarItemsParentData; child != null;) {
        t2 = child.parentData;
        t2.toString;
        t1._as(t2);
        if (!t2.shouldPaint) {
          child = t2.ContainerParentDataMixin_previousSibling;
          continue;
        }
        if (A._RenderCupertinoTextSelectionToolbarItems_hitTestChild(child, result, position))
          return true;
        child = t2.ContainerParentDataMixin_previousSibling;
      }
      if (A._RenderCupertinoTextSelectionToolbarItems_hitTestChild(_this._backButton, result, position))
        return true;
      if (A._RenderCupertinoTextSelectionToolbarItems_hitTestChild(_this._nextButton, result, position))
        return true;
      if (A._RenderCupertinoTextSelectionToolbarItems_hitTestChild(_this._nextButtonDisabled, result, position))
        return true;
      return false;
    },
    attach$1(owner) {
      var t1, t2, t3;
      type$.PipelineOwner._as(owner);
      this.super$__RenderCupertinoTextSelectionToolbarItems_RenderBox_ContainerRenderObjectMixin$attach(owner);
      for (t1 = this.slottedChildren, t1 = t1.get$values(t1), t2 = B._instanceType(t1), t2 = t2._eval$1("@<1>")._bind$1(t2._rest[1]), t1 = new B.MappedIterator(J.get$iterator$ax(t1.__internal$_iterable), t1._f, t2._eval$1("MappedIterator<1,2>")), t2 = t2._rest[1]; t1.moveNext$0();) {
        t3 = t1.__internal$_current;
        (t3 == null ? t2._as(t3) : t3).attach$1(owner);
      }
    },
    detach$0(_) {
      var t1, t2, t3;
      this.super$__RenderCupertinoTextSelectionToolbarItems_RenderBox_ContainerRenderObjectMixin$detach(0);
      for (t1 = this.slottedChildren, t1 = t1.get$values(t1), t2 = B._instanceType(t1), t2 = t2._eval$1("@<1>")._bind$1(t2._rest[1]), t1 = new B.MappedIterator(J.get$iterator$ax(t1.__internal$_iterable), t1._f, t2._eval$1("MappedIterator<1,2>")), t2 = t2._rest[1]; t1.moveNext$0();) {
        t3 = t1.__internal$_current;
        (t3 == null ? t2._as(t3) : t3).detach$0(0);
      }
    },
    redepthChildren$0() {
      this.visitChildren$1(new A._RenderCupertinoTextSelectionToolbarItems_redepthChildren_closure(this));
    },
    visitChildren$1(visitor) {
      var t1, _this = this;
      type$.void_Function_RenderObject._as(visitor);
      t1 = _this._backButton;
      if (t1 != null)
        visitor.call$1(t1);
      t1 = _this._nextButton;
      if (t1 != null)
        visitor.call$1(t1);
      t1 = _this._nextButtonDisabled;
      if (t1 != null)
        visitor.call$1(t1);
      _this.super$ContainerRenderObjectMixin$visitChildren(visitor);
    },
    visitChildrenForSemantics$1(visitor) {
      this.visitChildren$1(new A._RenderCupertinoTextSelectionToolbarItems_visitChildrenForSemantics_closure(type$.void_Function_RenderObject._as(visitor)));
    }
  };
  A._CupertinoTextSelectionToolbarItemsSlot.prototype = {
    _enumToString$0() {
      return "_CupertinoTextSelectionToolbarItemsSlot." + this._core$_name;
    }
  };
  A._NullElement0.prototype = {};
  A._NullWidget3.prototype = {
    createElement$0(_) {
      return B.throwExpression(B.UnimplementedError$(null));
    }
  };
  A.__CupertinoTextSelectionToolbarContentState_State_TickerProviderStateMixin.prototype = {
    activate$0() {
      this.super$State$activate();
      this._updateTickerModeNotifier$0();
      this._updateTickers$0();
    },
    dispose$0() {
      var _this = this,
        t1 = _this.TickerProviderStateMixin__tickerModeNotifier;
      if (t1 != null)
        t1.removeListener$1(0, _this.get$_updateTickers());
      _this.set$_tickerModeNotifier(null);
      _this.super$State$dispose();
    }
  };
  A.__RenderCupertinoTextSelectionToolbarItems_RenderBox_ContainerRenderObjectMixin.prototype = {
    attach$1(owner) {
      var child, t1, t2;
      type$.PipelineOwner._as(owner);
      this.super$RenderObject$attach(owner);
      child = this.ContainerRenderObjectMixin__firstChild;
      for (t1 = type$.ToolbarItemsParentData; child != null;) {
        child.attach$1(owner);
        t2 = child.parentData;
        t2.toString;
        child = t1._as(t2).ContainerParentDataMixin_nextSibling;
      }
    },
    detach$0(_) {
      var child, t1, t2;
      this.super$AbstractNode$detach(0);
      child = this.ContainerRenderObjectMixin__firstChild;
      for (t1 = type$.ToolbarItemsParentData; child != null;) {
        child.detach$0(0);
        t2 = child.parentData;
        t2.toString;
        child = t1._as(t2).ContainerParentDataMixin_nextSibling;
      }
    }
  };
  A.__RenderCupertinoTextSelectionToolbarItems_RenderBox_ContainerRenderObjectMixin_RenderBoxContainerDefaultsMixin.prototype = {};
  A.CupertinoTextSelectionToolbarButton.prototype = {
    build$1(context) {
      var t1 = this.onPressed,
        t2 = t1 == null ? 1 : 0.7;
      return A.CupertinoButton$(C.Alignment_0_0, null, this.child, D.Color_3944751136, D.Color_3944751136, 44, t1, D.EdgeInsets_18_16_18_16, t2);
    }
  };
  A.AdaptiveTextSelectionToolbar.prototype = {
    build$1(context) {
      var resultChildren, t2, _this = this,
        t1 = _this.buttonItems.length === 0;
      if (t1)
        return C.SizedBox_0_0_null_null;
      resultChildren = J.toList$0$ax(A.AdaptiveTextSelectionToolbar_getAdaptiveButtons(context, _this.buttonItems));
      switch (B.Theme_of(context).platform.index) {
        case 2:
          t1 = _this.anchors;
          t2 = t1.primaryAnchor;
          t1 = t1.secondaryAnchor;
          return A.CupertinoTextSelectionToolbar$(t2, t1 == null ? t2 : t1, resultChildren);
        case 0:
          t1 = _this.anchors;
          t2 = t1.primaryAnchor;
          t1 = t1.secondaryAnchor;
          return A.TextSelectionToolbar$(t2, t1 == null ? t2 : t1, resultChildren);
        case 1:
        case 3:
        case 5:
          return new A.DesktopTextSelectionToolbar(_this.anchors.primaryAnchor, resultChildren, null);
        case 4:
          return new A.CupertinoDesktopTextSelectionToolbar(_this.anchors.primaryAnchor, resultChildren, null);
      }
    }
  };
  A._DesktopTextSelectionHandleControls.prototype = {};
  A.DesktopTextSelectionControls.prototype = {
    getHandleSize$1(textLineHeight) {
      return C.Size_0_0;
    },
    buildHandle$4(context, type, textLineHeight, onTap) {
      type$.nullable_void_Function._as(onTap);
      return C.SizedBox_0_0_null_null;
    },
    getHandleAnchor$2(type, textLineHeight) {
      return C.Offset_0_0;
    }
  };
  A.__DesktopTextSelectionHandleControls_DesktopTextSelectionControls_TextSelectionHandleControls.prototype = {};
  A.DesktopTextSelectionToolbar.prototype = {
    build$1(context) {
      var _null = null,
        paddingAbove = context.dependOnInheritedWidgetOfExactType$1$0(type$.MediaQuery).data.padding.top + 8;
      return new B.Padding(new B.EdgeInsets(8, paddingAbove, 8, 8), new B.CustomSingleChildLayout(new A.DesktopTextSelectionToolbarLayoutDelegate(this.anchor.$sub(0, new B.Offset(8, paddingAbove))), B.SizedBox$(B.Material$(C.Duration_200000, D.BorderRadius_tLn1, B.Column$(this.children, C.CrossAxisAlignment_2, C.MainAxisAlignment_0, C.MainAxisSize_0), C.Clip_2, _null, 1, _null, _null, _null, _null, _null, C.MaterialType_1), _null, 222), _null), _null);
    }
  };
  A.DesktopTextSelectionToolbarButton.prototype = {
    build$1(context) {
      var _null = null;
      return B.SizedBox$(A.TextButton$(this.child, this.onPressed, E.TextButton_styleFrom(C.Alignment_m1_0, _null, _null, _null, _null, C.SystemMouseCursor_basic, _null, _null, C.SystemMouseCursor_basic, B.Theme_of(context).colorScheme.brightness === C.Brightness_0 ? C.Color_4294967295 : C.Color_3707764736, _null, D.Size_48_36, D.EdgeInsets_20_0_20_3, _null, C.RoundedRectangleBorder_27D, _null, _null, _null, _null)), _null, 1 / 0);
    }
  };
  A.InputBorder.prototype = {};
  A._NoInputBorder.prototype = {
    copyWith$1$borderSide(borderSide) {
      return D._NoInputBorder_uXA;
    },
    get$isOutline() {
      return false;
    },
    get$dimensions() {
      return C.EdgeInsets_0_0_0_0;
    },
    scale$1(_, t) {
      return D._NoInputBorder_uXA;
    },
    getInnerPath$2$textDirection(rect, textDirection) {
      var t1 = $.$get$_renderer().createPath$0();
      t1.addRect$1(rect);
      return t1;
    },
    getInnerPath$1(rect) {
      return this.getInnerPath$2$textDirection(rect, null);
    },
    getOuterPath$2$textDirection(rect, textDirection) {
      var t1 = $.$get$_renderer().createPath$0();
      t1.addRect$1(rect);
      return t1;
    },
    getOuterPath$1(rect) {
      return this.getOuterPath$2$textDirection(rect, null);
    },
    paintInterior$4$textDirection(canvas, rect, paint, textDirection) {
      canvas.drawRect$2(rect, paint);
    },
    get$preferPaintInterior() {
      return true;
    },
    paint$6$gapExtent$gapPercentage$gapStart$textDirection(canvas, rect, gapExtent, gapPercentage, gapStart, textDirection) {
    },
    paint$3$textDirection(canvas, rect, textDirection) {
      return this.paint$6$gapExtent$gapPercentage$gapStart$textDirection(canvas, rect, 0, 0, null, textDirection);
    }
  };
  A.UnderlineInputBorder.prototype = {
    get$isOutline() {
      return false;
    },
    copyWith$1$borderSide(borderSide) {
      var t1 = borderSide == null ? this.borderSide : borderSide;
      return new A.UnderlineInputBorder(this.borderRadius, t1);
    },
    get$dimensions() {
      return new B.EdgeInsets(0, 0, 0, this.borderSide.width);
    },
    scale$1(_, t) {
      return new A.UnderlineInputBorder(D.BorderRadius_tLn2, this.borderSide.scale$1(0, t));
    },
    getInnerPath$2$textDirection(rect, textDirection) {
      var t1 = $.$get$_renderer().createPath$0(),
        t2 = rect.left,
        t3 = rect.top;
      t1.addRect$1(new B.Rect(t2, t3, t2 + (rect.right - t2), t3 + Math.max(0, rect.bottom - t3 - this.borderSide.width)));
      return t1;
    },
    getInnerPath$1(rect) {
      return this.getInnerPath$2$textDirection(rect, null);
    },
    getOuterPath$2$textDirection(rect, textDirection) {
      var t1 = $.$get$_renderer().createPath$0();
      t1.addRRect$1(this.borderRadius.toRRect$1(rect));
      return t1;
    },
    getOuterPath$1(rect) {
      return this.getOuterPath$2$textDirection(rect, null);
    },
    paintInterior$4$textDirection(canvas, rect, paint, textDirection) {
      canvas.drawRRect$2(this.borderRadius.toRRect$1(rect), paint);
    },
    get$preferPaintInterior() {
      return true;
    },
    lerpFrom$2(a, t) {
      var t1, t2;
      if (a instanceof A.UnderlineInputBorder) {
        t1 = B.BorderSide_lerp(a.borderSide, this.borderSide, t);
        t2 = B.BorderRadius_lerp(a.borderRadius, this.borderRadius, t);
        t2.toString;
        return new A.UnderlineInputBorder(t2, t1);
      }
      return this.super$ShapeBorder$lerpFrom(a, t);
    },
    lerpTo$2(b, t) {
      var t1, t2;
      if (b instanceof A.UnderlineInputBorder) {
        t1 = B.BorderSide_lerp(this.borderSide, b.borderSide, t);
        t2 = B.BorderRadius_lerp(this.borderRadius, b.borderRadius, t);
        t2.toString;
        return new A.UnderlineInputBorder(t2, t1);
      }
      return this.super$ShapeBorder$lerpTo(b, t);
    },
    paint$6$gapExtent$gapPercentage$gapStart$textDirection(canvas, rect, gapExtent, gapPercentage, gapStart, textDirection) {
      var t1 = this.borderRadius;
      if (!t1.bottomLeft.$eq(0, C.Radius_0_0) || !t1.bottomRight.$eq(0, C.Radius_0_0))
        canvas.clipPath$1(0, this.getOuterPath$2$textDirection(rect, textDirection));
      t1 = rect.bottom;
      canvas.drawLine$3(new B.Offset(rect.left, t1), new B.Offset(rect.right, t1), this.borderSide.toPaint$0());
    },
    paint$3$textDirection(canvas, rect, textDirection) {
      return this.paint$6$gapExtent$gapPercentage$gapStart$textDirection(canvas, rect, 0, 0, null, textDirection);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (J.get$runtimeType$(other) !== B.getRuntimeType(this))
        return false;
      return other instanceof A.InputBorder && other.borderSide.$eq(0, this.borderSide);
    },
    get$hashCode(_) {
      var t1 = this.borderSide;
      return B.Object_hash(t1.color, t1.width, t1.style, t1.strokeAlign, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue);
    }
  };
  A._InputBorderGap.prototype = {
    set$start(_, value) {
      if (value != this._input_decorator$_start) {
        this._input_decorator$_start = value;
        this.notifyListeners$0();
      }
    },
    set$extent(value) {
      if (value !== this._extent) {
        this._extent = value;
        this.notifyListeners$0();
      }
    },
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (J.get$runtimeType$(other) !== B.getRuntimeType(_this))
        return false;
      return other instanceof A._InputBorderGap && other._input_decorator$_start == _this._input_decorator$_start && other._extent === _this._extent;
    },
    get$hashCode(_) {
      return B.Object_hash(this._input_decorator$_start, this._extent, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue);
    },
    toString$0(_) {
      return "<optimized out>#" + B.shortHash(this);
    }
  };
  A._InputBorderTween.prototype = {
    lerp$1(t) {
      var t1 = B.ShapeBorder_lerp(this.begin, this.end, t);
      t1.toString;
      return type$.InputBorder._as(t1);
    }
  };
  A._InputBorderPainter.prototype = {
    paint$2(canvas, size) {
      var blendedFillColor, t3, _this = this,
        t1 = type$.Animation_double,
        t2 = t1._as(_this.borderAnimation),
        borderValue = _this.border.transform$1(0, t2.get$value(t2)),
        canvasRect = new B.Rect(0, 0, 0 + size._dx, 0 + size._dy);
      t1 = t1._as(_this.hoverAnimation);
      t1 = _this.hoverColorTween.transform$1(0, t1.get$value(t1));
      t1.toString;
      blendedFillColor = B.Color_alphaBlend(t1, _this.fillColor);
      if ((blendedFillColor.get$value(blendedFillColor) >>> 24 & 255) > 0) {
        t1 = borderValue.getOuterPath$2$textDirection(canvasRect, _this.textDirection);
        t2 = $.$get$_renderer().createPaint$0();
        t2.set$color(0, blendedFillColor);
        t2.set$style(0, C.PaintingStyle_0);
        canvas.drawPath$2(t1, t2);
      }
      t1 = _this.gap;
      t2 = t1._input_decorator$_start;
      t1 = t1._extent;
      t3 = _this.gapAnimation.__AnimationController__value_A;
      t3 === $ && B.throwLateFieldNI("_value");
      borderValue.paint$6$gapExtent$gapPercentage$gapStart$textDirection(canvas, canvasRect, t1, t3, t2, _this.textDirection);
    },
    shouldRepaint$1(oldPainter) {
      var _this = this;
      type$._InputBorderPainter._as(oldPainter);
      return _this.borderAnimation !== oldPainter.borderAnimation || _this.hoverAnimation !== oldPainter.hoverAnimation || _this.gapAnimation !== oldPainter.gapAnimation || _this.border !== oldPainter.border || !_this.gap.$eq(0, oldPainter.gap) || _this.textDirection !== oldPainter.textDirection;
    },
    toString$0(_) {
      return "<optimized out>#" + B.shortHash(this);
    }
  };
  A._BorderContainer.prototype = {
    createState$0() {
      return new A._BorderContainerState(null, null, C._StateLifecycle_0);
    }
  };
  A._BorderContainerState.prototype = {
    initState$0() {
      var t1, t2, _this = this, _null = null;
      _this.super$State$initState();
      _this.___BorderContainerState__hoverColorController_A = B.AnimationController$(_null, D.Duration_15000, _null, _this._widget.isHovering ? 1 : 0, _this);
      t1 = B.AnimationController$(_null, C.Duration_200000, _null, _null, _this);
      _this.___BorderContainerState__controller_A = t1;
      t2 = type$.Animation_double;
      _this.set$___BorderContainerState__borderAnimation_A(t2._as(B.CurvedAnimation$(C.Cubic_ifx, t1, _null)));
      t1 = _this._widget.border;
      _this.___BorderContainerState__border_A = new A._InputBorderTween(t1, t1);
      _this.set$___BorderContainerState__hoverAnimation_A(t2._as(B.CurvedAnimation$(C.C__Linear, _this.___BorderContainerState__hoverColorController_A, _null)));
      _this.___BorderContainerState__hoverColorTween_A = new B.ColorTween(C.Color_0, _this._widget.hoverColor);
    },
    dispose$0() {
      var t1 = this.___BorderContainerState__controller_A;
      t1 === $ && B.throwLateFieldNI("_controller");
      t1.dispose$0();
      t1 = this.___BorderContainerState__hoverColorController_A;
      t1 === $ && B.throwLateFieldNI("_hoverColorController");
      t1.dispose$0();
      this.super$__BorderContainerState_State_TickerProviderStateMixin$dispose();
    },
    didUpdateWidget$1(oldWidget) {
      var t1, t2, _this = this,
        _s21_ = "_hoverColorController";
      type$._BorderContainer._as(oldWidget);
      _this.super$State$didUpdateWidget(oldWidget);
      t1 = oldWidget.border;
      if (!_this._widget.border.$eq(0, t1)) {
        _this.___BorderContainerState__border_A = new A._InputBorderTween(t1, _this._widget.border);
        t1 = _this.___BorderContainerState__controller_A;
        t1 === $ && B.throwLateFieldNI("_controller");
        t1.set$value(0, 0);
        t1.forward$0(0);
      }
      if (!_this._widget.hoverColor.$eq(0, oldWidget.hoverColor))
        _this.___BorderContainerState__hoverColorTween_A = new B.ColorTween(C.Color_0, _this._widget.hoverColor);
      t1 = _this._widget.isHovering;
      if (t1 !== oldWidget.isHovering) {
        t2 = _this.___BorderContainerState__hoverColorController_A;
        if (t1) {
          t2 === $ && B.throwLateFieldNI(_s21_);
          t2.forward$0(0);
        } else {
          t2 === $ && B.throwLateFieldNI(_s21_);
          t2.reverse$0(0);
        }
      }
    },
    build$1(context) {
      var t2, t3, t4, t5, t6, t7, t8, t9, _this = this,
        t1 = _this.___BorderContainerState__borderAnimation_A;
      t1 === $ && B.throwLateFieldNI("_borderAnimation");
      t2 = _this._widget.gap;
      t3 = _this.___BorderContainerState__hoverColorController_A;
      t3 === $ && B.throwLateFieldNI("_hoverColorController");
      t3 = B._setArrayType([t1, t2, t3], type$.JSArray_Listenable);
      t2 = _this.___BorderContainerState__borderAnimation_A;
      t1 = _this.___BorderContainerState__border_A;
      t1 === $ && B.throwLateFieldNI("_border");
      t4 = _this._widget;
      t5 = t4.gapAnimation;
      t4 = t4.gap;
      t6 = context.dependOnInheritedWidgetOfExactType$1$0(type$.Directionality);
      t6.toString;
      t7 = _this._widget.fillColor;
      t8 = _this.___BorderContainerState__hoverColorTween_A;
      t8 === $ && B.throwLateFieldNI("_hoverColorTween");
      t9 = _this.___BorderContainerState__hoverAnimation_A;
      t9 === $ && B.throwLateFieldNI("_hoverAnimation");
      return B.CustomPaint$(null, new A._InputBorderPainter(t2, t1, t5, t4, t6.textDirection, t7, t8, t9, new B._MergingListenable(t3)), null, null, C.Size_0_0);
    },
    set$___BorderContainerState__borderAnimation_A(___BorderContainerState__borderAnimation_A) {
      this.___BorderContainerState__borderAnimation_A = type$.Animation_double._as(___BorderContainerState__borderAnimation_A);
    },
    set$___BorderContainerState__hoverAnimation_A(___BorderContainerState__hoverAnimation_A) {
      this.___BorderContainerState__hoverAnimation_A = type$.Animation_double._as(___BorderContainerState__hoverAnimation_A);
    },
    $isTickerProvider: 1
  };
  A._HelperError.prototype = {
    createState$0() {
      return new A._HelperErrorState(null, null, C._StateLifecycle_0);
    }
  };
  A._HelperErrorState.prototype = {
    initState$0() {
      var t1, t2, _this = this;
      _this.super$State$initState();
      _this.___HelperErrorState__controller_A = B.AnimationController$(null, C.Duration_200000, null, null, _this);
      if (_this._widget.errorText != null) {
        _this._error = _this._buildError$0();
        _this.___HelperErrorState__controller_A.set$value(0, 1);
      }
      t1 = _this.___HelperErrorState__controller_A;
      t2 = type$.void_Function._as(_this.get$_input_decorator$_handleChange());
      t1.didRegisterListener$0();
      t1 = t1.AnimationLocalListenersMixin__listeners;
      t1.$ti._precomputed1._as(t2);
      t1._isDirty = true;
      C.JSArray_methods.add$1(t1._list, t2);
    },
    dispose$0() {
      var t1 = this.___HelperErrorState__controller_A;
      t1 === $ && B.throwLateFieldNI("_controller");
      t1.dispose$0();
      this.super$__HelperErrorState_State_SingleTickerProviderStateMixin$dispose();
    },
    _input_decorator$_handleChange$0() {
      this.setState$1(new A._HelperErrorState__handleChange_closure());
    },
    didUpdateWidget$1(old) {
      var t1, _this = this,
        _s11_ = "_controller";
      type$._HelperError._as(old);
      _this.super$State$didUpdateWidget(old);
      t1 = _this._widget.errorText != null;
      if (t1 !== (old.errorText != null) || false)
        if (t1) {
          _this._error = _this._buildError$0();
          t1 = _this.___HelperErrorState__controller_A;
          t1 === $ && B.throwLateFieldNI(_s11_);
          t1.forward$0(0);
        } else {
          t1 = _this.___HelperErrorState__controller_A;
          t1 === $ && B.throwLateFieldNI(_s11_);
          t1.reverse$0(0);
        }
    },
    _buildError$0() {
      var t2, t3, t4, t5, t6, _null = null,
        t1 = this.___HelperErrorState__controller_A;
      t1 === $ && B.throwLateFieldNI("_controller");
      type$.Animation_double._as(t1);
      t2 = new B.Tween(D.Offset_MNd, C.Offset_0_0, type$.Tween_Offset).transform$1(0, t1.get$value(t1));
      t3 = this._widget;
      t4 = t3.errorText;
      t4.toString;
      t5 = t3.errorStyle;
      t6 = t3.textAlign;
      return B.Semantics$(_null, _null, B.FadeTransition$(false, B.FractionalTranslation$(B.Text$(t4, t3.errorMaxLines, C.TextOverflow_2, _null, t5, t6, _null), true, t2), t1), true, _null, _null, false, _null, _null, _null, _null, _null, _null, true, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null);
    },
    build$1(context) {
      var t2, _this = this,
        t1 = _this.___HelperErrorState__controller_A;
      t1 === $ && B.throwLateFieldNI("_controller");
      if (t1.get$status(t1) === C.AnimationStatus_0) {
        _this._error = null;
        _this._widget.toString;
        _this._helper = null;
        return C.SizedBox_0_0_null_null;
      }
      t1 = _this.___HelperErrorState__controller_A;
      if (t1.get$status(t1) === C.AnimationStatus_3) {
        _this._helper = null;
        if (_this._widget.errorText != null)
          return _this._error = _this._buildError$0();
        else {
          _this._error = null;
          return C.SizedBox_0_0_null_null;
        }
      }
      t1 = _this._helper;
      if (t1 == null && _this._widget.errorText != null)
        return _this._buildError$0();
      if (_this._error == null)
        _this._widget.toString;
      if (_this._widget.errorText != null) {
        t2 = type$.Tween_double;
        return new B.Stack(C.AlignmentDirectional_m1_m1, null, C.StackFit_0, C.Clip_1, B._setArrayType([B.FadeTransition$(false, t1, new B._AnimatedEvaluation(type$.Animation_double._as(_this.___HelperErrorState__controller_A), new B.Tween(1, 0, t2), t2._eval$1("_AnimatedEvaluation<Animatable.T>"))), _this._buildError$0()], type$.JSArray_Widget), null);
      }
      return C.SizedBox_0_0_null_null;
    },
    $isTickerProvider: 1
  };
  A._DecorationSlot.prototype = {
    _enumToString$0() {
      return "_DecorationSlot." + this._core$_name;
    }
  };
  A._Decoration.prototype = {
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (J.get$runtimeType$(other) !== B.getRuntimeType(_this))
        return false;
      return other instanceof A._Decoration && other.contentPadding.$eq(0, _this.contentPadding) && other.floatingLabelHeight === _this.floatingLabelHeight && other.floatingLabelProgress === _this.floatingLabelProgress && other.floatingLabelAlignment.$eq(0, _this.floatingLabelAlignment) && other.border.$eq(0, _this.border) && other.borderGap.$eq(0, _this.borderGap) && other.isDense == _this.isDense && other.visualDensity.$eq(0, _this.visualDensity) && J.$eq$(other.icon, _this.icon) && J.$eq$(other.input, _this.input) && J.$eq$(other.label, _this.label) && J.$eq$(other.hint, _this.hint) && J.$eq$(other.prefix, _this.prefix) && J.$eq$(other.suffix, _this.suffix) && J.$eq$(other.prefixIcon, _this.prefixIcon) && J.$eq$(other.suffixIcon, _this.suffixIcon) && other.helperError.super$Object$$eq(0, _this.helperError) && J.$eq$(other.counter, _this.counter) && other.container.super$Object$$eq(0, _this.container);
    },
    get$hashCode(_) {
      var _this = this;
      return B.Object_hash(_this.contentPadding, _this.floatingLabelHeight, _this.floatingLabelProgress, _this.floatingLabelAlignment, _this.border, _this.borderGap, false, _this.isDense, _this.visualDensity, _this.icon, _this.input, _this.label, _this.hint, _this.prefix, _this.suffix, _this.prefixIcon, _this.suffixIcon, _this.helperError, _this.counter, _this.container);
    }
  };
  A._RenderDecorationLayout.prototype = {};
  A._RenderDecoration.prototype = {
    get$children(_) {
      var t3, t4,
        t1 = B._setArrayType([], type$.JSArray_RenderBox),
        t2 = B._instanceType(this)._eval$1("SlottedContainerRenderObjectMixin.S");
      t2._as(D._DecorationSlot_0);
      t3 = this.SlottedContainerRenderObjectMixin__slotToChild;
      if (t3.$index(0, D._DecorationSlot_0) != null) {
        t4 = t3.$index(0, D._DecorationSlot_0);
        t4.toString;
        t1.push(t4);
      }
      t2._as(D._DecorationSlot_1);
      if (t3.$index(0, D._DecorationSlot_1) != null) {
        t4 = t3.$index(0, D._DecorationSlot_1);
        t4.toString;
        t1.push(t4);
      }
      t2._as(D._DecorationSlot_6);
      if (t3.$index(0, D._DecorationSlot_6) != null) {
        t4 = t3.$index(0, D._DecorationSlot_6);
        t4.toString;
        t1.push(t4);
      }
      t2._as(D._DecorationSlot_7);
      if (t3.$index(0, D._DecorationSlot_7) != null) {
        t4 = t3.$index(0, D._DecorationSlot_7);
        t4.toString;
        t1.push(t4);
      }
      t2._as(D._DecorationSlot_4);
      if (t3.$index(0, D._DecorationSlot_4) != null) {
        t4 = t3.$index(0, D._DecorationSlot_4);
        t4.toString;
        t1.push(t4);
      }
      t2._as(D._DecorationSlot_5);
      if (t3.$index(0, D._DecorationSlot_5) != null) {
        t4 = t3.$index(0, D._DecorationSlot_5);
        t4.toString;
        t1.push(t4);
      }
      t2._as(D._DecorationSlot_2);
      if (t3.$index(0, D._DecorationSlot_2) != null) {
        t4 = t3.$index(0, D._DecorationSlot_2);
        t4.toString;
        t1.push(t4);
      }
      t2._as(D._DecorationSlot_3);
      if (t3.$index(0, D._DecorationSlot_3) != null) {
        t4 = t3.$index(0, D._DecorationSlot_3);
        t4.toString;
        t1.push(t4);
      }
      t2._as(D._DecorationSlot_8);
      if (t3.$index(0, D._DecorationSlot_8) != null) {
        t4 = t3.$index(0, D._DecorationSlot_8);
        t4.toString;
        t1.push(t4);
      }
      t2._as(D._DecorationSlot_9);
      if (t3.$index(0, D._DecorationSlot_9) != null) {
        t4 = t3.$index(0, D._DecorationSlot_9);
        t4.toString;
        t1.push(t4);
      }
      t2._as(D._DecorationSlot_10);
      if (t3.$index(0, D._DecorationSlot_10) != null) {
        t2 = t3.$index(0, D._DecorationSlot_10);
        t2.toString;
        t1.push(t2);
      }
      return t1;
    },
    set$decoration(value) {
      if (this._input_decorator$_decoration.$eq(0, value))
        return;
      this._input_decorator$_decoration = value;
      this.markNeedsLayout$0();
    },
    set$textDirection(value) {
      if (this._input_decorator$_textDirection === value)
        return;
      this._input_decorator$_textDirection = value;
      this.markNeedsLayout$0();
    },
    set$textBaseline(_, value) {
      if (this._input_decorator$_textBaseline === value)
        return;
      this._input_decorator$_textBaseline = value;
      this.markNeedsLayout$0();
    },
    set$textAlignVertical(value) {
      return;
    },
    set$isFocused(value) {
      if (this._isFocused === value)
        return;
      this._isFocused = value;
      this.markNeedsSemanticsUpdate$0();
    },
    set$expands(value) {
      return;
    },
    get$_isOutlineAligned() {
      this._input_decorator$_decoration.border.get$isOutline();
      return false;
    },
    visitChildrenForSemantics$1(visitor) {
      var t1, t2, t3;
      type$.void_Function_RenderObject._as(visitor);
      t1 = B._instanceType(this)._eval$1("SlottedContainerRenderObjectMixin.S");
      t1._as(D._DecorationSlot_0);
      t2 = this.SlottedContainerRenderObjectMixin__slotToChild;
      if (t2.$index(0, D._DecorationSlot_0) != null) {
        t3 = t2.$index(0, D._DecorationSlot_0);
        t3.toString;
        visitor.call$1(t3);
      }
      t1._as(D._DecorationSlot_4);
      if (t2.$index(0, D._DecorationSlot_4) != null) {
        t3 = t2.$index(0, D._DecorationSlot_4);
        t3.toString;
        visitor.call$1(t3);
      }
      t1._as(D._DecorationSlot_6);
      if (t2.$index(0, D._DecorationSlot_6) != null) {
        t3 = t2.$index(0, D._DecorationSlot_6);
        t3.toString;
        visitor.call$1(t3);
      }
      t1._as(D._DecorationSlot_2);
      if (t2.$index(0, D._DecorationSlot_2) != null) {
        t3 = t2.$index(0, D._DecorationSlot_2);
        t3.toString;
        visitor.call$1(t3);
      }
      t1._as(D._DecorationSlot_3);
      if (t2.$index(0, D._DecorationSlot_3) != null)
        if (this._isFocused) {
          t3 = t2.$index(0, D._DecorationSlot_3);
          t3.toString;
          visitor.call$1(t3);
        } else if (t2.$index(0, D._DecorationSlot_2) == null) {
          t3 = t2.$index(0, D._DecorationSlot_3);
          t3.toString;
          visitor.call$1(t3);
        }
      t1._as(D._DecorationSlot_1);
      if (t2.$index(0, D._DecorationSlot_1) != null) {
        t3 = t2.$index(0, D._DecorationSlot_1);
        t3.toString;
        visitor.call$1(t3);
      }
      t1._as(D._DecorationSlot_7);
      if (t2.$index(0, D._DecorationSlot_7) != null) {
        t3 = t2.$index(0, D._DecorationSlot_7);
        t3.toString;
        visitor.call$1(t3);
      }
      t1._as(D._DecorationSlot_5);
      if (t2.$index(0, D._DecorationSlot_5) != null) {
        t3 = t2.$index(0, D._DecorationSlot_5);
        t3.toString;
        visitor.call$1(t3);
      }
      t1._as(D._DecorationSlot_10);
      if (t2.$index(0, D._DecorationSlot_10) != null) {
        t3 = t2.$index(0, D._DecorationSlot_10);
        t3.toString;
        visitor.call$1(t3);
      }
      t1._as(D._DecorationSlot_8);
      if (t2.$index(0, D._DecorationSlot_8) != null) {
        t3 = t2.$index(0, D._DecorationSlot_8);
        t3.toString;
        visitor.call$1(t3);
      }
      t1._as(D._DecorationSlot_9);
      if (t2.$index(0, D._DecorationSlot_9) != null) {
        t1 = t2.$index(0, D._DecorationSlot_9);
        t1.toString;
        visitor.call$1(t1);
      }
    },
    get$sizedByParent() {
      return false;
    },
    _layoutLineBox$2(box, constraints) {
      var t1;
      if (box == null)
        return 0;
      box.layout$2$parentUsesSize(constraints, true);
      t1 = box.getDistanceToBaseline$1(C.TextBaseline_0);
      t1.toString;
      return t1;
    },
    _interpolateThree$4(begin, middle, end, textAlignVertical) {
      var t1 = textAlignVertical.y;
      if (t1 <= 0) {
        if (begin >= middle)
          return middle;
        return begin + (middle - begin) * (t1 + 1);
      }
      if (middle >= end)
        return middle;
      return middle + (end - middle) * t1;
    },
    computeDistanceToActualBaseline$1(baseline) {
      var t1, t2;
      B._instanceType(this)._eval$1("SlottedContainerRenderObjectMixin.S")._as(D._DecorationSlot_1);
      t1 = this.SlottedContainerRenderObjectMixin__slotToChild;
      t2 = t1.$index(0, D._DecorationSlot_1).parentData;
      t2.toString;
      t2 = type$.BoxParentData._as(t2).offset._dy;
      t1 = t1.$index(0, D._DecorationSlot_1);
      t1 = t1 == null ? null : t1.computeDistanceToActualBaseline$1(baseline);
      return t2 + (t1 == null ? 0 : t1);
    },
    computeDryLayout$1(constraints) {
      return C.Size_0_0;
    },
    performLayout$0() {
      var boxToBaseline, t2, t3, boxConstraints, t4, t5, t6, containerConstraints, contentConstraints, t7, t8, t9, t10, t11, t12, t13, inputWidth, labelWidth, labelHeight, counterHeight, helperErrorExists, helperErrorHeight, bottomHeight, densityOffset, hintHeight, inputDirectHeight, inputHeight, inputInternalBaseline, prefixHeight, suffixHeight, fixAboveInput, fixBelowInput, prefixIconHeight, suffixIconHeight, fixIconHeight, contentHeight, minContainerHeight, maxContainerHeight, containerHeight, interactiveAdjustment, overflow, textAlignVerticalFactor, baselineAdjustment, topInputBaseline, maxVerticalOffset, inputBaseline, outlineBaseline, subtextCounterBaseline, subtextCounterHeight, subtextHelperBaseline, subtextHelperHeight, subtextBaseline, subtextHeight, container, x, height, centerLayout, baseline, baselineLayout, left, right, start, end, labelX, floatWidth, _this = this, _null = null,
        t1 = type$.BoxConstraints,
        constraints = t1._as(B.RenderObject.prototype.get$constraints.call(_this));
      _this._labelTransform = null;
      boxToBaseline = B.LinkedHashMap_LinkedHashMap$_empty(type$.nullable_RenderBox, type$.double);
      t2 = constraints.maxWidth;
      t3 = constraints.maxHeight;
      boxConstraints = new B.BoxConstraints(0, t2, 0, t3);
      t4 = B._instanceType(_this)._eval$1("SlottedContainerRenderObjectMixin.S");
      t4._as(D._DecorationSlot_0);
      t5 = _this.SlottedContainerRenderObjectMixin__slotToChild;
      boxToBaseline.$indexSet(0, t5.$index(0, D._DecorationSlot_0), _this._layoutLineBox$2(t5.$index(0, D._DecorationSlot_0), boxConstraints));
      t6 = t5.$index(0, D._DecorationSlot_0);
      if (t6 == null)
        t6 = C.Size_0_0;
      else {
        t6 = t6._size;
        t6.toString;
      }
      containerConstraints = boxConstraints.copyWith$1$maxWidth(t2 - t6._dx);
      t4._as(D._DecorationSlot_6);
      boxToBaseline.$indexSet(0, t5.$index(0, D._DecorationSlot_6), _this._layoutLineBox$2(t5.$index(0, D._DecorationSlot_6), containerConstraints));
      t4._as(D._DecorationSlot_7);
      boxToBaseline.$indexSet(0, t5.$index(0, D._DecorationSlot_7), _this._layoutLineBox$2(t5.$index(0, D._DecorationSlot_7), containerConstraints));
      contentConstraints = containerConstraints.copyWith$1$maxWidth(containerConstraints.maxWidth - _this._input_decorator$_decoration.contentPadding.get$horizontal());
      t4._as(D._DecorationSlot_4);
      boxToBaseline.$indexSet(0, t5.$index(0, D._DecorationSlot_4), _this._layoutLineBox$2(t5.$index(0, D._DecorationSlot_4), contentConstraints));
      t4._as(D._DecorationSlot_5);
      boxToBaseline.$indexSet(0, t5.$index(0, D._DecorationSlot_5), _this._layoutLineBox$2(t5.$index(0, D._DecorationSlot_5), contentConstraints));
      t6 = t1._as(B.RenderObject.prototype.get$constraints.call(_this));
      t7 = t5.$index(0, D._DecorationSlot_0);
      if (t7 == null)
        t7 = C.Size_0_0;
      else {
        t7 = t7._size;
        t7.toString;
      }
      t8 = _this._input_decorator$_decoration;
      t9 = t5.$index(0, D._DecorationSlot_6);
      if (t9 == null)
        t9 = C.Size_0_0;
      else {
        t9 = t9._size;
        t9.toString;
      }
      t10 = t5.$index(0, D._DecorationSlot_4);
      if (t10 == null)
        t10 = C.Size_0_0;
      else {
        t10 = t10._size;
        t10.toString;
      }
      t11 = t5.$index(0, D._DecorationSlot_5);
      if (t11 == null)
        t11 = C.Size_0_0;
      else {
        t11 = t11._size;
        t11.toString;
      }
      t12 = t5.$index(0, D._DecorationSlot_7);
      if (t12 == null)
        t12 = C.Size_0_0;
      else {
        t12 = t12._size;
        t12.toString;
      }
      t13 = _this._input_decorator$_decoration;
      inputWidth = Math.max(0, t6.maxWidth - (t7._dx + t8.contentPadding.left + t9._dx + t10._dx + t11._dx + t12._dx + t13.contentPadding.right));
      t13 = B.lerpDouble(1, 1.3333333333333333, t13.floatingLabelProgress);
      t13.toString;
      t12 = t5.$index(0, D._DecorationSlot_7);
      if (t12 == null)
        t6 = C.Size_0_0;
      else {
        t6 = t12._size;
        t6.toString;
      }
      _this._input_decorator$_decoration.border.get$isOutline();
      t1 = t1._as(B.RenderObject.prototype.get$constraints.call(_this));
      t7 = t5.$index(0, D._DecorationSlot_0);
      if (t7 == null)
        t7 = C.Size_0_0;
      else {
        t7 = t7._size;
        t7.toString;
      }
      t8 = _this._input_decorator$_decoration;
      t9 = t5.$index(0, D._DecorationSlot_6);
      if (t9 == null)
        t9 = C.Size_0_0;
      else {
        t9 = t9._size;
        t9.toString;
      }
      labelWidth = Math.max(0, t1.maxWidth - (t7._dx + t8.contentPadding.left + t9._dx + t6._dx + _this._input_decorator$_decoration.contentPadding.right));
      t4._as(D._DecorationSlot_2);
      boxToBaseline.$indexSet(0, t5.$index(0, D._DecorationSlot_2), _this._layoutLineBox$2(t5.$index(0, D._DecorationSlot_2), boxConstraints.copyWith$1$maxWidth(labelWidth * t13)));
      t4._as(D._DecorationSlot_3);
      boxToBaseline.$indexSet(0, t5.$index(0, D._DecorationSlot_3), _this._layoutLineBox$2(t5.$index(0, D._DecorationSlot_3), boxConstraints.copyWith$2$maxWidth$minWidth(inputWidth, inputWidth)));
      t4._as(D._DecorationSlot_9);
      boxToBaseline.$indexSet(0, t5.$index(0, D._DecorationSlot_9), _this._layoutLineBox$2(t5.$index(0, D._DecorationSlot_9), contentConstraints));
      t4._as(D._DecorationSlot_8);
      t13 = t5.$index(0, D._DecorationSlot_8);
      t6 = t5.$index(0, D._DecorationSlot_8);
      t9 = t5.$index(0, D._DecorationSlot_9);
      if (t9 == null)
        t1 = C.Size_0_0;
      else {
        t1 = t9._size;
        t1.toString;
      }
      boxToBaseline.$indexSet(0, t13, _this._layoutLineBox$2(t6, contentConstraints.copyWith$1$maxWidth(Math.max(0, contentConstraints.maxWidth - t1._dx))));
      labelHeight = t5.$index(0, D._DecorationSlot_2) == null ? 0 : _this._input_decorator$_decoration.floatingLabelHeight;
      _this._input_decorator$_decoration.border.get$isOutline();
      if (t5.$index(0, D._DecorationSlot_9) == null)
        counterHeight = 0;
      else {
        t1 = boxToBaseline.$index(0, t5.$index(0, D._DecorationSlot_9));
        t1.toString;
        if (typeof t1 !== "number")
          return t1.$add();
        counterHeight = t1 + 8;
      }
      t1 = t5.$index(0, D._DecorationSlot_8);
      if (t1 == null)
        t1 = _null;
      else {
        t1 = t1._size;
        t1.toString;
      }
      helperErrorExists = t1 != null && t5.$index(0, D._DecorationSlot_8)._size._dy > 0;
      helperErrorHeight = !helperErrorExists ? 0 : t5.$index(0, D._DecorationSlot_8)._size._dy + 8;
      bottomHeight = Math.max(counterHeight, helperErrorHeight);
      t1 = _this._input_decorator$_decoration.visualDensity;
      densityOffset = new B.Offset(t1.horizontal, t1.vertical).$mul(0, 4);
      t4._as(D._DecorationSlot_1);
      t1 = t5.$index(0, D._DecorationSlot_1);
      t6 = t5.$index(0, D._DecorationSlot_1);
      t7 = _this._input_decorator$_decoration.contentPadding;
      t8 = densityOffset._dy;
      t9 = t8 / 2;
      boxToBaseline.$indexSet(0, t1, _this._layoutLineBox$2(t6, boxConstraints.deflate$1(new B.EdgeInsets(0, t7.top + labelHeight + t9, 0, t7.bottom + bottomHeight + t9)).copyWith$2$maxWidth$minWidth(inputWidth, inputWidth)));
      t7 = t5.$index(0, D._DecorationSlot_3);
      hintHeight = t7 == null ? _null : t7._size._dy;
      if (hintHeight == null)
        hintHeight = 0;
      t1 = t5.$index(0, D._DecorationSlot_1);
      inputDirectHeight = t1 == null ? _null : t1._size._dy;
      if (inputDirectHeight == null)
        inputDirectHeight = 0;
      inputHeight = Math.max(hintHeight, inputDirectHeight);
      t1 = boxToBaseline.$index(0, t5.$index(0, D._DecorationSlot_1));
      t1.toString;
      t6 = boxToBaseline.$index(0, t5.$index(0, D._DecorationSlot_3));
      t6.toString;
      inputInternalBaseline = Math.max(B.checkNum(t1), B.checkNum(t6));
      t6 = t5.$index(0, D._DecorationSlot_4);
      prefixHeight = t6 == null ? _null : t6._size._dy;
      if (prefixHeight == null)
        prefixHeight = 0;
      t1 = t5.$index(0, D._DecorationSlot_5);
      suffixHeight = t1 == null ? _null : t1._size._dy;
      if (suffixHeight == null)
        suffixHeight = 0;
      t1 = boxToBaseline.$index(0, t5.$index(0, D._DecorationSlot_4));
      t1.toString;
      t6 = boxToBaseline.$index(0, t5.$index(0, D._DecorationSlot_5));
      t6.toString;
      fixAboveInput = Math.max(0, Math.max(B.checkNum(t1), B.checkNum(t6)) - inputInternalBaseline);
      t6 = boxToBaseline.$index(0, t5.$index(0, D._DecorationSlot_4));
      t6.toString;
      if (typeof t6 !== "number")
        return B.iae(t6);
      t1 = boxToBaseline.$index(0, t5.$index(0, D._DecorationSlot_5));
      t1.toString;
      if (typeof t1 !== "number")
        return B.iae(t1);
      fixBelowInput = Math.max(0, Math.max(prefixHeight - t6, suffixHeight - t1) - (inputHeight - inputInternalBaseline));
      t1 = t5.$index(0, D._DecorationSlot_6);
      prefixIconHeight = t1 == null ? _null : t1._size._dy;
      if (prefixIconHeight == null)
        prefixIconHeight = 0;
      t1 = t5.$index(0, D._DecorationSlot_7);
      suffixIconHeight = t1 == null ? _null : t1._size._dy;
      if (suffixIconHeight == null)
        suffixIconHeight = 0;
      fixIconHeight = Math.max(prefixIconHeight, suffixIconHeight);
      t1 = _this._input_decorator$_decoration;
      t6 = t1.contentPadding;
      contentHeight = Math.max(fixIconHeight, labelHeight + t6.top + fixAboveInput + inputHeight + fixBelowInput + t6.bottom + t8);
      t1 = t1.isDense;
      t1.toString;
      if (!t1)
        t1 = false;
      else
        t1 = true;
      minContainerHeight = t1 ? 0 : 48;
      maxContainerHeight = t3 - bottomHeight;
      containerHeight = Math.min(Math.max(contentHeight, minContainerHeight), maxContainerHeight);
      interactiveAdjustment = minContainerHeight > contentHeight ? (minContainerHeight - contentHeight) / 2 : 0;
      overflow = Math.max(0, contentHeight - maxContainerHeight);
      t1 = _this._textAlignVertical;
      t1 = _this.get$_isOutlineAligned() ? D.TextAlignVertical_0 : D.TextAlignVertical_m1;
      textAlignVerticalFactor = (t1.y + 1) / 2;
      baselineAdjustment = fixAboveInput - overflow * (1 - textAlignVerticalFactor);
      t1 = _this._input_decorator$_decoration.contentPadding;
      topInputBaseline = t1.top + labelHeight + inputInternalBaseline + baselineAdjustment + interactiveAdjustment + t9;
      maxVerticalOffset = containerHeight - (t1.get$_top(t1) + t1.get$_bottom(t1)) - labelHeight - t8 - (fixAboveInput + inputHeight + fixBelowInput);
      inputBaseline = topInputBaseline + maxVerticalOffset * textAlignVerticalFactor;
      t8 = _this._textAlignVertical;
      t1 = _this.get$_isOutlineAligned() ? D.TextAlignVertical_0 : D.TextAlignVertical_m1;
      outlineBaseline = _this._interpolateThree$4(topInputBaseline, inputInternalBaseline + baselineAdjustment / 2 + (containerHeight - (2 + inputHeight)) / 2, topInputBaseline + maxVerticalOffset, t1);
      if (t5.$index(0, D._DecorationSlot_9) != null) {
        t1 = boxToBaseline.$index(0, t5.$index(0, D._DecorationSlot_9));
        t1.toString;
        if (typeof t1 !== "number")
          return B.iae(t1);
        subtextCounterBaseline = containerHeight + 8 + t1;
        subtextCounterHeight = t5.$index(0, D._DecorationSlot_9)._size._dy + 8;
      } else {
        subtextCounterBaseline = 0;
        subtextCounterHeight = 0;
      }
      if (helperErrorExists) {
        t1 = boxToBaseline.$index(0, t5.$index(0, D._DecorationSlot_8));
        t1.toString;
        if (typeof t1 !== "number")
          return B.iae(t1);
        subtextHelperBaseline = containerHeight + 8 + t1;
        subtextHelperHeight = helperErrorHeight;
      } else {
        subtextHelperBaseline = 0;
        subtextHelperHeight = 0;
      }
      subtextBaseline = Math.max(subtextCounterBaseline, subtextHelperBaseline);
      subtextHeight = Math.max(subtextCounterHeight, subtextHelperHeight);
      container = t5.$index(0, t4._as(D._DecorationSlot_10));
      t1 = container == null;
      if (!t1) {
        t3 = t5.$index(0, D._DecorationSlot_0);
        if (t3 == null)
          t3 = C.Size_0_0;
        else {
          t3 = t3._size;
          t3.toString;
        }
        container.layout$2$parentUsesSize(B.BoxConstraints$tightFor(containerHeight, t2 - t3._dx), true);
        switch (_this._input_decorator$_textDirection.index) {
          case 0:
            x = 0;
            break;
          case 1:
            t3 = t5.$index(0, D._DecorationSlot_0);
            if (t3 == null)
              t3 = C.Size_0_0;
            else {
              t3 = t3._size;
              t3.toString;
            }
            x = t3._dx;
            break;
          default:
            x = _null;
        }
        t3 = container.parentData;
        t3.toString;
        type$.BoxParentData._as(t3).offset = new B.Offset(x, 0);
      }
      height = B._Cell$named("height");
      centerLayout = new A._RenderDecoration_performLayout_centerLayout(height);
      baseline = B._Cell$named("baseline");
      baselineLayout = new A._RenderDecoration_performLayout_baselineLayout(baseline, new A._RenderDecorationLayout(boxToBaseline, inputBaseline, outlineBaseline, subtextBaseline, containerHeight, subtextHeight));
      t3 = _this._input_decorator$_decoration.contentPadding;
      left = t3.left;
      right = t2 - t3.right;
      height.__late_helper$_value = containerHeight;
      baseline.__late_helper$_value = _this.get$_isOutlineAligned() ? outlineBaseline : inputBaseline;
      if (t5.$index(0, D._DecorationSlot_0) != null) {
        switch (_this._input_decorator$_textDirection.index) {
          case 0:
            x = t2 - t5.$index(0, D._DecorationSlot_0)._size._dx;
            break;
          case 1:
            x = 0;
            break;
          default:
            x = _null;
        }
        t3 = t5.$index(0, D._DecorationSlot_0);
        t3.toString;
        centerLayout.call$2(t3, x);
      }
      switch (_this._input_decorator$_textDirection.index) {
        case 0:
          t3 = t5.$index(0, D._DecorationSlot_0);
          if (t3 == null)
            t3 = C.Size_0_0;
          else {
            t3 = t3._size;
            t3.toString;
          }
          start = right - t3._dx;
          if (t5.$index(0, D._DecorationSlot_6) != null) {
            start += _this._input_decorator$_decoration.contentPadding.left;
            t3 = t5.$index(0, D._DecorationSlot_6);
            t3.toString;
            t3 = centerLayout.call$2(t3, start - t5.$index(0, D._DecorationSlot_6)._size._dx);
            if (typeof t3 !== "number")
              return B.iae(t3);
            start -= t3;
          }
          if (t5.$index(0, D._DecorationSlot_2) != null) {
            t3 = t5.$index(0, D._DecorationSlot_2);
            t3.toString;
            centerLayout.call$2(t3, start - t5.$index(0, D._DecorationSlot_2)._size._dx);
          }
          if (t5.$index(0, D._DecorationSlot_4) != null) {
            t3 = t5.$index(0, D._DecorationSlot_4);
            t3.toString;
            t3 = baselineLayout.call$2(t3, start - t5.$index(0, D._DecorationSlot_4)._size._dx);
            if (typeof t3 !== "number")
              return B.iae(t3);
            start -= t3;
          }
          if (t5.$index(0, D._DecorationSlot_1) != null) {
            t3 = t5.$index(0, D._DecorationSlot_1);
            t3.toString;
            baselineLayout.call$2(t3, start - t5.$index(0, D._DecorationSlot_1)._size._dx);
          }
          if (t5.$index(0, D._DecorationSlot_3) != null) {
            t3 = t5.$index(0, D._DecorationSlot_3);
            t3.toString;
            baselineLayout.call$2(t3, start - t5.$index(0, D._DecorationSlot_3)._size._dx);
          }
          if (t5.$index(0, D._DecorationSlot_7) != null) {
            end = left - _this._input_decorator$_decoration.contentPadding.left;
            t3 = t5.$index(0, D._DecorationSlot_7);
            t3.toString;
            t3 = centerLayout.call$2(t3, end);
            if (typeof t3 !== "number")
              return B.iae(t3);
            end += t3;
          } else
            end = left;
          if (t5.$index(0, D._DecorationSlot_5) != null) {
            t3 = t5.$index(0, D._DecorationSlot_5);
            t3.toString;
            t3 = baselineLayout.call$2(t3, end);
            if (typeof t3 !== "number")
              return B.iae(t3);
          }
          break;
        case 1:
          t3 = t5.$index(0, D._DecorationSlot_0);
          if (t3 == null)
            t3 = C.Size_0_0;
          else {
            t3 = t3._size;
            t3.toString;
          }
          start = left + t3._dx;
          if (t5.$index(0, D._DecorationSlot_6) != null) {
            start -= _this._input_decorator$_decoration.contentPadding.left;
            t3 = t5.$index(0, D._DecorationSlot_6);
            t3.toString;
            t3 = centerLayout.call$2(t3, start);
            if (typeof t3 !== "number")
              return B.iae(t3);
            start += t3;
          }
          if (t5.$index(0, D._DecorationSlot_2) != null) {
            t3 = t5.$index(0, D._DecorationSlot_2);
            t3.toString;
            centerLayout.call$2(t3, start);
          }
          if (t5.$index(0, D._DecorationSlot_4) != null) {
            t3 = t5.$index(0, D._DecorationSlot_4);
            t3.toString;
            t3 = baselineLayout.call$2(t3, start);
            if (typeof t3 !== "number")
              return B.iae(t3);
            start += t3;
          }
          if (t5.$index(0, D._DecorationSlot_1) != null) {
            t3 = t5.$index(0, D._DecorationSlot_1);
            t3.toString;
            baselineLayout.call$2(t3, start);
          }
          if (t5.$index(0, D._DecorationSlot_3) != null) {
            t3 = t5.$index(0, D._DecorationSlot_3);
            t3.toString;
            baselineLayout.call$2(t3, start);
          }
          if (t5.$index(0, D._DecorationSlot_7) != null) {
            end = right + _this._input_decorator$_decoration.contentPadding.right;
            t3 = t5.$index(0, D._DecorationSlot_7);
            t3.toString;
            t3 = centerLayout.call$2(t3, end - t5.$index(0, D._DecorationSlot_7)._size._dx);
            if (typeof t3 !== "number")
              return B.iae(t3);
            end -= t3;
          } else
            end = right;
          if (t5.$index(0, D._DecorationSlot_5) != null) {
            t3 = t5.$index(0, D._DecorationSlot_5);
            t3.toString;
            t3 = baselineLayout.call$2(t3, end - t5.$index(0, D._DecorationSlot_5)._size._dx);
            if (typeof t3 !== "number")
              return B.iae(t3);
          }
          break;
      }
      if (t5.$index(0, D._DecorationSlot_8) != null || t5.$index(0, D._DecorationSlot_9) != null) {
        height.__late_helper$_value = subtextHeight;
        baseline.__late_helper$_value = subtextBaseline;
        switch (_this._input_decorator$_textDirection.index) {
          case 0:
            if (t5.$index(0, D._DecorationSlot_8) != null) {
              t3 = t5.$index(0, D._DecorationSlot_8);
              t3.toString;
              t4 = t5.$index(0, D._DecorationSlot_8)._size._dx;
              t6 = t5.$index(0, D._DecorationSlot_0);
              if (t6 == null)
                t6 = C.Size_0_0;
              else {
                t6 = t6._size;
                t6.toString;
              }
              baselineLayout.call$2(t3, right - t4 - t6._dx);
            }
            if (t5.$index(0, D._DecorationSlot_9) != null) {
              t3 = t5.$index(0, D._DecorationSlot_9);
              t3.toString;
              baselineLayout.call$2(t3, left);
            }
            break;
          case 1:
            if (t5.$index(0, D._DecorationSlot_8) != null) {
              t3 = t5.$index(0, D._DecorationSlot_8);
              t3.toString;
              t4 = t5.$index(0, D._DecorationSlot_0);
              if (t4 == null)
                t4 = C.Size_0_0;
              else {
                t4 = t4._size;
                t4.toString;
              }
              baselineLayout.call$2(t3, left + t4._dx);
            }
            if (t5.$index(0, D._DecorationSlot_9) != null) {
              t3 = t5.$index(0, D._DecorationSlot_9);
              t3.toString;
              baselineLayout.call$2(t3, right - t5.$index(0, D._DecorationSlot_9)._size._dx);
            }
            break;
        }
      }
      if (t5.$index(0, D._DecorationSlot_2) != null) {
        t3 = t5.$index(0, D._DecorationSlot_2).parentData;
        t3.toString;
        labelX = type$.BoxParentData._as(t3).offset._dx;
        t3 = t5.$index(0, D._DecorationSlot_2);
        if (t3 == null)
          t3 = C.Size_0_0;
        else {
          t3 = t3._size;
          t3.toString;
        }
        floatWidth = t3._dx * 0.75;
        switch (_this._input_decorator$_textDirection.index) {
          case 0:
            t5.$index(0, D._DecorationSlot_6) != null && true;
            t3 = _this._input_decorator$_decoration;
            t4 = t5.$index(0, D._DecorationSlot_2);
            if (t4 == null)
              t4 = C.Size_0_0;
            else {
              t4 = t4._size;
              t4.toString;
            }
            if (t1)
              t1 = C.Size_0_0;
            else {
              t1 = container._size;
              t1.toString;
            }
            t3.borderGap.set$start(0, B.lerpDouble(labelX + t4._dx + 0, t1._dx / 2 + floatWidth / 2, 0));
            break;
          case 1:
            t5.$index(0, D._DecorationSlot_6) != null && true;
            t3 = _this._input_decorator$_decoration;
            t4 = t5.$index(0, D._DecorationSlot_0);
            if (t4 == null)
              t4 = C.Size_0_0;
            else {
              t4 = t4._size;
              t4.toString;
            }
            if (t1)
              t1 = C.Size_0_0;
            else {
              t1 = container._size;
              t1.toString;
            }
            t3.borderGap.set$start(0, B.lerpDouble(labelX - t4._dx + 0, t1._dx / 2 - floatWidth / 2, 0));
            break;
        }
        _this._input_decorator$_decoration.borderGap.set$extent(t5.$index(0, D._DecorationSlot_2)._size._dx * 0.75);
      } else {
        _this._input_decorator$_decoration.borderGap.set$start(0, _null);
        _this._input_decorator$_decoration.borderGap.set$extent(0);
      }
      _this._size = constraints.constrain$1(new B.Size(t2, containerHeight + subtextHeight));
    },
    _paintLabel$2(context, offset) {
      var t1 = this.SlottedContainerRenderObjectMixin__slotToChild.$index(0, B._instanceType(this)._eval$1("SlottedContainerRenderObjectMixin.S")._as(D._DecorationSlot_2));
      t1.toString;
      context.paintChild$2(t1, offset);
    },
    paint$2(context, offset) {
      var t2, t3, t4, labelOffset, labelWidth, t, t5, t6, startX, floatStartX, t7, _this = this,
        doPaint = new A._RenderDecoration_paint_doPaint(context, offset),
        t1 = B._instanceType(_this)._eval$1("SlottedContainerRenderObjectMixin.S");
      t1._as(D._DecorationSlot_10);
      t2 = _this.SlottedContainerRenderObjectMixin__slotToChild;
      doPaint.call$1(t2.$index(0, D._DecorationSlot_10));
      t1._as(D._DecorationSlot_2);
      if (t2.$index(0, D._DecorationSlot_2) != null) {
        t3 = t2.$index(0, D._DecorationSlot_2).parentData;
        t3.toString;
        t4 = type$.BoxParentData;
        labelOffset = t4._as(t3).offset;
        t3 = t2.$index(0, D._DecorationSlot_2);
        if (t3 != null)
          t3._size.toString;
        t3 = t2.$index(0, D._DecorationSlot_2);
        if (t3 == null)
          t3 = C.Size_0_0;
        else {
          t3 = t3._size;
          t3.toString;
        }
        labelWidth = t3._dx;
        t3 = _this._input_decorator$_decoration;
        t = t3.floatingLabelProgress;
        t3.border.get$isOutline();
        t3 = _this._input_decorator$_decoration;
        t5 = B.lerpDouble(1, 0.75, t);
        t5.toString;
        t6 = t2.$index(0, D._DecorationSlot_10).parentData;
        t6.toString;
        t6 = t4._as(t6).offset._dx;
        t4 = t2.$index(0, D._DecorationSlot_10);
        if (t4 == null)
          t4 = C.Size_0_0;
        else {
          t4 = t4._size;
          t4.toString;
        }
        switch (_this._input_decorator$_textDirection.index) {
          case 0:
            startX = labelOffset._dx + labelWidth * (1 - t5);
            t2.$index(0, t1._as(D._DecorationSlot_6)) != null;
            floatStartX = startX;
            break;
          case 1:
            startX = labelOffset._dx;
            t2.$index(0, t1._as(D._DecorationSlot_6)) != null;
            floatStartX = startX;
            break;
          default:
            startX = null;
            floatStartX = null;
        }
        t4 = B.lerpDouble(floatStartX, t6 + t4._dx / 2 - labelWidth * 0.75 / 2, 0);
        t4.toString;
        t4 = B.lerpDouble(startX, t4, t);
        t4.toString;
        t6 = labelOffset._dy;
        t3 = B.lerpDouble(0, t3.contentPadding.top - t6, t);
        t3.toString;
        t7 = new B.Matrix4(new Float64Array(16));
        t7.setIdentity$0();
        t7.translate$2(0, t4, t6 + t3);
        t7.scale$1(0, t5);
        _this._labelTransform = t7;
        t5 = _this.__RenderObject__needsCompositing_A;
        t5 === $ && B.throwLateFieldNI("_needsCompositing");
        t3 = _this._layerHandle;
        t3.set$layer(0, context.pushTransform$5$oldLayer(t5, offset, t7, _this.get$_paintLabel(), type$.nullable_TransformLayer._as(t3._layer)));
      } else
        _this._layerHandle.set$layer(0, null);
      doPaint.call$1(t2.$index(0, t1._as(D._DecorationSlot_0)));
      doPaint.call$1(t2.$index(0, t1._as(D._DecorationSlot_4)));
      doPaint.call$1(t2.$index(0, t1._as(D._DecorationSlot_5)));
      doPaint.call$1(t2.$index(0, t1._as(D._DecorationSlot_6)));
      doPaint.call$1(t2.$index(0, t1._as(D._DecorationSlot_7)));
      doPaint.call$1(t2.$index(0, t1._as(D._DecorationSlot_3)));
      doPaint.call$1(t2.$index(0, t1._as(D._DecorationSlot_1)));
      doPaint.call$1(t2.$index(0, t1._as(D._DecorationSlot_8)));
      doPaint.call$1(t2.$index(0, t1._as(D._DecorationSlot_9)));
    },
    hitTestSelf$1(position) {
      return true;
    },
    hitTestChildren$2$position(result, position) {
      var t1, t2, t3, _i, child, t4, offset;
      for (t1 = this.get$children(this), t2 = t1.length, t3 = type$.BoxParentData, _i = 0; _i < t1.length; t1.length === t2 || (0, B.throwConcurrentModificationError)(t1), ++_i) {
        child = t1[_i];
        t4 = child.parentData;
        t4.toString;
        offset = t3._as(t4).offset;
        if (result.addWithPaintOffset$3$hitTest$offset$position(new A._RenderDecoration_hitTestChildren_closure(position, offset, child), offset, position))
          return true;
      }
      return false;
    },
    applyPaintTransform$2(child, transform) {
      var t1, labelOffset, _this = this;
      B._instanceType(_this)._eval$1("SlottedContainerRenderObjectMixin.S")._as(D._DecorationSlot_2);
      t1 = _this.SlottedContainerRenderObjectMixin__slotToChild;
      if (child === t1.$index(0, D._DecorationSlot_2) && _this._labelTransform != null) {
        t1 = t1.$index(0, D._DecorationSlot_2).parentData;
        t1.toString;
        labelOffset = type$.BoxParentData._as(t1).offset;
        t1 = _this._labelTransform;
        t1.toString;
        transform.multiply$1(0, t1);
        transform.translate$2(0, -labelOffset._dx, -labelOffset._dy);
      }
      _this.super$RenderBox$applyPaintTransform(child, transform);
    }
  };
  A._Decorator.prototype = {
    get$slots() {
      return D.List_UUO;
    },
    childForSlot$1(slot) {
      var _this = this;
      switch (type$._DecorationSlot._as(slot).index) {
        case 0:
          return _this.decoration.icon;
        case 1:
          return _this.decoration.input;
        case 2:
          return _this.decoration.label;
        case 3:
          return _this.decoration.hint;
        case 4:
          return _this.decoration.prefix;
        case 5:
          return _this.decoration.suffix;
        case 6:
          return _this.decoration.prefixIcon;
        case 7:
          return _this.decoration.suffixIcon;
        case 8:
          return _this.decoration.helperError;
        case 9:
          return _this.decoration.counter;
        case 10:
          return _this.decoration.container;
      }
    },
    createRenderObject$1(context) {
      var t1, _this = this;
      B.Theme_of(context);
      t1 = new A._RenderDecoration(_this.decoration, _this.textDirection, _this.textBaseline, _this.textAlignVertical, _this.isFocused, false, false, B.LinkedHashMap_LinkedHashMap$_empty(type$._DecorationSlot, type$.RenderBox), B.LayerHandle$(type$.ContainerLayer));
      t1.RenderObject$0();
      return t1;
    },
    updateRenderObject$2(context, renderObject) {
      var _this = this;
      type$._RenderDecoration._as(renderObject);
      renderObject.set$decoration(_this.decoration);
      renderObject.set$expands(false);
      renderObject.set$isFocused(_this.isFocused);
      renderObject.set$textAlignVertical(_this.textAlignVertical);
      renderObject.set$textBaseline(0, _this.textBaseline);
      renderObject.set$textDirection(_this.textDirection);
    }
  };
  A.InputDecorator.prototype = {
    createState$0() {
      return new A._InputDecoratorState(new A._InputBorderGap($.$get$ChangeNotifier__emptyListeners()), null, null, C._StateLifecycle_0);
    }
  };
  A._InputDecoratorState.prototype = {
    initState$0() {
      var t1, t2, labelIsInitiallyFloating, _this = this, _null = null;
      _this.super$State$initState();
      t1 = _this._widget;
      t2 = t1.decoration.floatingLabelBehavior;
      if (t2 !== D.FloatingLabelBehavior_2)
        if (t2 !== D.FloatingLabelBehavior_0) {
          if (t1.isEmpty)
            t1 = t1.isFocused && true;
          else
            t1 = true;
          labelIsInitiallyFloating = t1;
        } else
          labelIsInitiallyFloating = false;
      else
        labelIsInitiallyFloating = true;
      t1 = _this.___InputDecoratorState__floatingLabelController_A = B.AnimationController$(_null, C.Duration_200000, _null, labelIsInitiallyFloating ? 1 : 0, _this);
      t2 = type$.void_Function._as(_this.get$_input_decorator$_handleChange());
      t1.didRegisterListener$0();
      t1 = t1.AnimationLocalListenersMixin__listeners;
      t1.$ti._precomputed1._as(t2);
      t1._isDirty = true;
      C.JSArray_methods.add$1(t1._list, t2);
      _this.___InputDecoratorState__shakingLabelController_A = B.AnimationController$(_null, C.Duration_200000, _null, _null, _this);
    },
    didChangeDependencies$0() {
      this.super$State$didChangeDependencies();
      this._effectiveDecoration = null;
    },
    dispose$0() {
      var t1 = this.___InputDecoratorState__floatingLabelController_A;
      t1 === $ && B.throwLateFieldNI("_floatingLabelController");
      t1.dispose$0();
      t1 = this.___InputDecoratorState__shakingLabelController_A;
      t1 === $ && B.throwLateFieldNI("_shakingLabelController");
      t1.dispose$0();
      this.super$__InputDecoratorState_State_TickerProviderStateMixin$dispose();
    },
    _input_decorator$_handleChange$0() {
      this.setState$1(new A._InputDecoratorState__handleChange_closure());
    },
    get$decoration() {
      var t2, _this = this,
        t1 = _this._effectiveDecoration;
      if (t1 == null) {
        t1 = _this._widget.decoration;
        t2 = _this._framework$_element;
        t2.toString;
        t2 = _this._effectiveDecoration = t1.applyDefaults$1(B.Theme_of(t2).inputDecorationTheme);
        t1 = t2;
      }
      return t1;
    },
    didUpdateWidget$1(old) {
      var t1, t2, floatBehaviorChanged, t3, errorText, _this = this,
        _s24_ = "_floatingLabelController";
      type$.InputDecorator._as(old);
      _this.super$State$didUpdateWidget(old);
      t1 = old.decoration;
      if (!_this._widget.decoration.$eq(0, t1))
        _this._effectiveDecoration = null;
      t2 = _this._widget;
      floatBehaviorChanged = t2.decoration.floatingLabelBehavior != t1.floatingLabelBehavior;
      if (t2.isEmpty)
        t2 = t2.isFocused && true;
      else
        t2 = true;
      if (old.isEmpty)
        t3 = old.isFocused && true;
      else
        t3 = true;
      if (t2 !== t3 || floatBehaviorChanged) {
        if (_this.get$decoration().floatingLabelBehavior !== D.FloatingLabelBehavior_0) {
          t2 = _this._widget;
          if (t2.isEmpty)
            t3 = t2.isFocused && true;
          else
            t3 = true;
          t2 = t3 || t2.decoration.floatingLabelBehavior === D.FloatingLabelBehavior_2;
        } else
          t2 = false;
        t3 = _this.___InputDecoratorState__floatingLabelController_A;
        if (t2) {
          t3 === $ && B.throwLateFieldNI(_s24_);
          t3.forward$0(0);
        } else {
          t3 === $ && B.throwLateFieldNI(_s24_);
          t3.reverse$0(0);
        }
      }
      errorText = _this.get$decoration().errorText;
      t2 = _this.___InputDecoratorState__floatingLabelController_A;
      t2 === $ && B.throwLateFieldNI(_s24_);
      if (t2.get$status(t2) === C.AnimationStatus_3 && errorText != null && errorText !== t1.errorText) {
        t1 = _this.___InputDecoratorState__shakingLabelController_A;
        t1 === $ && B.throwLateFieldNI("_shakingLabelController");
        t1.set$value(0, 0);
        t1.forward$0(0);
      }
    },
    _getDefaultM2BorderColor$1(themeData) {
      var t1, enabledColor, _this = this;
      _this.get$decoration();
      if (_this.get$decoration().errorText != null)
        return themeData.colorScheme.error;
      if (_this._widget.isFocused)
        return themeData.colorScheme.primary;
      _this.get$decoration().filled.toString;
      t1 = themeData.colorScheme.onSurface.value;
      enabledColor = B.Color$fromARGB(97, t1 >>> 16 & 255, t1 >>> 8 & 255, t1 & 255);
      if (_this._widget.isHovering) {
        _this.get$decoration();
        t1 = true;
      } else
        t1 = false;
      if (t1) {
        _this.get$decoration();
        t1 = themeData.hoverColor.value;
        return B.Color_alphaBlend(B.Color$fromARGB(31, t1 >>> 16 & 255, t1 >>> 8 & 255, t1 & 255), enabledColor);
      }
      return enabledColor;
    },
    _getFillColor$2(themeData, defaults) {
      if (this.get$decoration().filled !== true)
        return C.Color_0;
      this.get$decoration();
      return B.MaterialStateProperty_resolveAs(defaults.get$fillColor(), this.get$materialState(), type$.Color);
    },
    _getHoverColor$1(themeData) {
      if (this.get$decoration().filled != null)
        this.get$decoration().filled.toString;
      return C.Color_0;
    },
    _getHelperStyle$2(themeData, defaults) {
      return B.MaterialStateProperty_resolveAs(defaults.get$helperStyle(), this.get$materialState(), type$.TextStyle).merge$1(B.MaterialStateProperty_resolveAs(this.get$decoration().helperStyle, this.get$materialState(), type$.nullable_TextStyle));
    },
    get$materialState() {
      var t2, _this = this,
        t1 = B.LinkedHashSet_LinkedHashSet$_empty(type$.MaterialState);
      _this.get$decoration();
      if (_this._widget.isFocused)
        t1.add$1(0, C.MaterialState_1);
      if (_this._widget.isHovering) {
        _this.get$decoration();
        t2 = true;
      } else
        t2 = false;
      if (t2)
        t1.add$1(0, C.MaterialState_0);
      if (_this.get$decoration().errorText != null)
        t1.add$1(0, D.MaterialState_7);
      return t1;
    },
    _getDefaultBorder$2(themeData, defaults) {
      var t1, t2, _this = this,
        border = B.MaterialStateProperty_resolveAs(_this.get$decoration().border, _this.get$materialState(), type$.nullable_InputBorder);
      if (border == null)
        border = D.UnderlineInputBorder_7hp;
      _this.get$decoration();
      if (border.borderSide.$eq(0, C.BorderSide_8xm))
        return border;
      t1 = _this._getDefaultM2BorderColor$1(themeData);
      _this.get$decoration();
      if (_this.get$decoration().border !== D._NoInputBorder_uXA) {
        _this.get$decoration();
        t2 = false;
      } else
        t2 = true;
      if (t2)
        t2 = 0;
      else
        t2 = _this._widget.isFocused ? 2 : 1;
      return border.copyWith$1$borderSide(new B.BorderSide(t1, t2, C.BorderStyle_1, -1));
    },
    build$1(context) {
      var defaults, t1, defaultStyle, t2, style, t3, labelStyle, t4, isError, border, t5, t6, t7, t8, t9, decorationIsDense, t10, t11, t12, t13, t14, counter, t15, t16, decorationContentPadding, floatingLabelHeight, contentPadding, t17, t18, t19, t20, t21, _this = this, _null = null,
        themeData = B.Theme_of(context);
      B.Theme_of(context);
      defaults = new A._InputDecoratorDefaultsM2(context);
      t1 = type$.TextStyle;
      defaultStyle = B.MaterialStateProperty_resolveAs(defaults.get$labelStyle(), _this.get$materialState(), t1);
      t2 = type$.nullable_TextStyle;
      style = B.MaterialStateProperty_resolveAs(_this.get$decoration().labelStyle, _this.get$materialState(), t2);
      if (style == null)
        style = B.MaterialStateProperty_resolveAs(_null, _this.get$materialState(), t2);
      t3 = themeData.textTheme.titleMedium;
      t3.toString;
      labelStyle = t3.merge$1(_this._widget.baseStyle).merge$1(defaultStyle).merge$1(style).copyWith$1$height(1);
      t4 = labelStyle.textBaseline;
      t4.toString;
      defaultStyle = B.MaterialStateProperty_resolveAs(defaults.get$hintStyle(), _this.get$materialState(), t1);
      style = B.MaterialStateProperty_resolveAs(_this.get$decoration().hintStyle, _this.get$materialState(), t2);
      if (style == null)
        style = B.MaterialStateProperty_resolveAs(_null, _this.get$materialState(), t2);
      t3.merge$1(_this._widget.baseStyle).merge$1(defaultStyle).merge$1(style);
      _this.get$decoration();
      isError = _this.get$decoration().errorText != null;
      _this.get$decoration();
      if (_this._widget.isFocused)
        if (isError)
          _this.get$decoration();
        else
          _this.get$decoration();
      else if (isError)
        _this.get$decoration();
      else
        _this.get$decoration();
      border = _this._getDefaultBorder$2(themeData, defaults);
      t3 = _this._borderGap;
      t5 = _this.___InputDecoratorState__floatingLabelController_A;
      t5 === $ && B.throwLateFieldNI("_floatingLabelController");
      t6 = _this._getFillColor$2(themeData, defaults);
      t7 = _this._getHoverColor$1(themeData);
      if (_this._widget.isHovering) {
        _this.get$decoration();
        t8 = true;
      } else
        t8 = false;
      _this.get$decoration();
      _this.get$decoration();
      _this.get$decoration();
      _this.get$decoration();
      _this.get$decoration();
      _this.get$decoration();
      t9 = _this.get$decoration();
      decorationIsDense = t9.isDense === true;
      _this.get$decoration();
      _this.get$decoration();
      _this.get$decoration();
      t9 = _this._widget.textAlign;
      t10 = _this.get$decoration();
      t11 = _this._getHelperStyle$2(themeData, defaults);
      t12 = _this.get$decoration();
      t13 = _this.get$decoration();
      t1 = B.MaterialStateProperty_resolveAs(defaults.get$errorStyle(), _this.get$materialState(), t1).merge$1(_this.get$decoration().errorStyle);
      t14 = _this.get$decoration();
      if (_this.get$decoration().counter != null)
        counter = _this.get$decoration().counter;
      else if (_this.get$decoration().counterText != null && _this.get$decoration().counterText !== "") {
        t15 = _this._widget.isFocused;
        t16 = _this.get$decoration().counterText;
        t16.toString;
        t2 = _this._getHelperStyle$2(themeData, defaults).merge$1(B.MaterialStateProperty_resolveAs(_this.get$decoration().counterStyle, _this.get$materialState(), t2));
        counter = B.Semantics$(_null, _null, B.Text$(t16, _null, C.TextOverflow_2, _this.get$decoration().semanticCounterText, t2, _null, _null), true, _null, _null, false, _null, _null, _null, _null, _null, _null, t15, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null);
      } else
        counter = _null;
      t2 = context.dependOnInheritedWidgetOfExactType$1$0(type$.Directionality);
      t2.toString;
      decorationContentPadding = _this.get$decoration().contentPadding;
      if (decorationContentPadding == null)
        decorationContentPadding = _null;
      _this.get$decoration();
      border.get$isOutline();
      t15 = labelStyle.fontSize;
      t15.toString;
      floatingLabelHeight = (4 + 0.75 * t15) * B.MediaQuery_textScaleFactorOf(context);
      t15 = _this.get$decoration();
      if (t15.filled === true)
        if (decorationContentPadding == null)
          contentPadding = decorationIsDense ? D.EdgeInsets_12_8_12_8 : D.EdgeInsets_12_12_12_12;
        else
          contentPadding = decorationContentPadding;
      else if (decorationContentPadding == null)
        contentPadding = decorationIsDense ? D.EdgeInsets_0_8_0_8 : D.EdgeInsets_0_12_0_12;
      else
        contentPadding = decorationContentPadding;
      _this.get$decoration();
      t15 = _this.get$decoration().floatingLabelAlignment;
      t15.toString;
      t16 = _this.___InputDecoratorState__floatingLabelController_A.__AnimationController__value_A;
      t16 === $ && B.throwLateFieldNI("_value");
      t17 = _this.get$decoration();
      t18 = _this.get$decoration();
      t19 = _this._widget;
      t20 = t19.child;
      t21 = t19.textAlignVertical;
      t19 = t19.isFocused;
      _this.get$decoration();
      return new A._Decorator(new A._Decoration(contentPadding, false, floatingLabelHeight, t16, t15, border, t3, t17.alignLabelWithHint === true, t18.isDense, themeData.visualDensity, _null, t20, _null, _null, _null, _null, _null, _null, new A._HelperError(t9, t10.helperText, t11, t12.helperMaxLines, t13.errorText, t1, t14.errorMaxLines, _null), counter, new A._BorderContainer(border, t3, t5, t6, t7, t8, _null)), t2.textDirection, t4, t21, t19, false, _null);
    },
    $isTickerProvider: 1
  };
  A.InputDecoration.prototype = {
    copyWith$33$alignLabelWithHint$border$constraints$contentPadding$counter$counterStyle$counterText$disabledBorder$enabled$enabledBorder$errorBorder$errorMaxLines$errorStyle$errorText$fillColor$filled$floatingLabelAlignment$floatingLabelBehavior$floatingLabelStyle$focusColor$focusedBorder$focusedErrorBorder$helperMaxLines$helperStyle$hintMaxLines$hintStyle$hoverColor$isCollapsed$isDense$labelStyle$prefixStyle$semanticCounterText$suffixStyle(alignLabelWithHint, border, constraints, contentPadding, counter, counterStyle, counterText, disabledBorder, enabled, enabledBorder, errorBorder, errorMaxLines, errorStyle, errorText, fillColor, filled, floatingLabelAlignment, floatingLabelBehavior, floatingLabelStyle, focusColor, focusedBorder, focusedErrorBorder, helperMaxLines, helperStyle, hintMaxLines, hintStyle, hoverColor, isCollapsed, isDense, labelStyle, prefixStyle, semanticCounterText, suffixStyle) {
      var _this = this,
        t1 = hintMaxLines == null ? _this.hintMaxLines : hintMaxLines,
        t2 = errorText == null ? _this.errorText : errorText,
        t3 = floatingLabelBehavior == null ? _this.floatingLabelBehavior : floatingLabelBehavior,
        t4 = floatingLabelAlignment == null ? _this.floatingLabelAlignment : floatingLabelAlignment,
        t5 = isDense == null ? _this.isDense : isDense,
        t6 = contentPadding == null ? _this.contentPadding : contentPadding,
        t7 = counter == null ? _this.counter : counter,
        t8 = counterText == null ? _this.counterText : counterText,
        t9 = counterStyle == null ? _this.counterStyle : counterStyle,
        t10 = filled == null ? _this.filled : filled,
        t11 = border == null ? _this.border : border,
        t12 = semanticCounterText == null ? _this.semanticCounterText : semanticCounterText,
        t13 = alignLabelWithHint == null ? _this.alignLabelWithHint : alignLabelWithHint;
      return new A.InputDecoration(_this.icon, _this.iconColor, _this.label, _this.labelText, _this.labelStyle, _this.floatingLabelStyle, _this.helperText, _this.helperStyle, _this.helperMaxLines, _this.hintText, _this.hintStyle, _this.hintTextDirection, t1, t2, _this.errorStyle, _this.errorMaxLines, t3, t4, t5, t6, isCollapsed === true, _this.prefixIcon, _this.prefixIconConstraints, _this.prefix, _this.prefixText, _this.prefixStyle, _this.prefixIconColor, _this.suffixIcon, _this.suffix, _this.suffixText, _this.suffixStyle, _this.suffixIconColor, _this.suffixIconConstraints, t8, t7, t9, t10, _this.fillColor, _this.focusColor, _this.hoverColor, _this.errorBorder, _this.focusedBorder, _this.focusedErrorBorder, _this.disabledBorder, _this.enabledBorder, t11, enabled !== false, t12, t13, _this.constraints);
    },
    copyWith$27$alignLabelWithHint$border$constraints$contentPadding$counterStyle$disabledBorder$enabledBorder$errorBorder$errorMaxLines$errorStyle$fillColor$filled$floatingLabelAlignment$floatingLabelBehavior$floatingLabelStyle$focusColor$focusedBorder$focusedErrorBorder$helperMaxLines$helperStyle$hintStyle$hoverColor$isCollapsed$isDense$labelStyle$prefixStyle$suffixStyle(alignLabelWithHint, border, constraints, contentPadding, counterStyle, disabledBorder, enabledBorder, errorBorder, errorMaxLines, errorStyle, fillColor, filled, floatingLabelAlignment, floatingLabelBehavior, floatingLabelStyle, focusColor, focusedBorder, focusedErrorBorder, helperMaxLines, helperStyle, hintStyle, hoverColor, isCollapsed, isDense, labelStyle, prefixStyle, suffixStyle) {
      return this.copyWith$33$alignLabelWithHint$border$constraints$contentPadding$counter$counterStyle$counterText$disabledBorder$enabled$enabledBorder$errorBorder$errorMaxLines$errorStyle$errorText$fillColor$filled$floatingLabelAlignment$floatingLabelBehavior$floatingLabelStyle$focusColor$focusedBorder$focusedErrorBorder$helperMaxLines$helperStyle$hintMaxLines$hintStyle$hoverColor$isCollapsed$isDense$labelStyle$prefixStyle$semanticCounterText$suffixStyle(alignLabelWithHint, border, constraints, contentPadding, null, counterStyle, null, disabledBorder, null, enabledBorder, errorBorder, errorMaxLines, errorStyle, null, fillColor, filled, floatingLabelAlignment, floatingLabelBehavior, floatingLabelStyle, focusColor, focusedBorder, focusedErrorBorder, helperMaxLines, helperStyle, null, hintStyle, hoverColor, isCollapsed, isDense, labelStyle, prefixStyle, null, suffixStyle);
    },
    copyWith$2$enabled$hintMaxLines(enabled, hintMaxLines) {
      return this.copyWith$33$alignLabelWithHint$border$constraints$contentPadding$counter$counterStyle$counterText$disabledBorder$enabled$enabledBorder$errorBorder$errorMaxLines$errorStyle$errorText$fillColor$filled$floatingLabelAlignment$floatingLabelBehavior$floatingLabelStyle$focusColor$focusedBorder$focusedErrorBorder$helperMaxLines$helperStyle$hintMaxLines$hintStyle$hoverColor$isCollapsed$isDense$labelStyle$prefixStyle$semanticCounterText$suffixStyle(null, null, null, null, null, null, null, null, enabled, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, hintMaxLines, null, null, null, null, null, null, null, null);
    },
    applyDefaults$1(theme) {
      var t2, t3, t4, t5, _this = this, _null = null,
        t1 = _this.floatingLabelBehavior;
      if (t1 == null)
        t1 = C.FloatingLabelBehavior_1;
      t2 = _this.floatingLabelAlignment;
      if (t2 == null)
        t2 = C.C_FloatingLabelAlignment;
      t3 = _this.contentPadding;
      if (t3 == null)
        t3 = _null;
      t4 = _this.counterStyle;
      if (t4 == null)
        t4 = _null;
      t5 = _this.border;
      if (t5 == null)
        t5 = _null;
      return _this.copyWith$27$alignLabelWithHint$border$constraints$contentPadding$counterStyle$disabledBorder$enabledBorder$errorBorder$errorMaxLines$errorStyle$fillColor$filled$floatingLabelAlignment$floatingLabelBehavior$floatingLabelStyle$focusColor$focusedBorder$focusedErrorBorder$helperMaxLines$helperStyle$hintStyle$hoverColor$isCollapsed$isDense$labelStyle$prefixStyle$suffixStyle(_this.alignLabelWithHint === true, t5, _null, t3, t4, _null, _null, _null, _null, _null, _null, _this.filled === true, t2, t1, _null, _null, _null, _null, _null, _null, _null, _null, false, _this.isDense === true, _null, _null, _null);
    },
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (J.get$runtimeType$(other) !== B.getRuntimeType(_this))
        return false;
      return other instanceof A.InputDecoration && other.hintMaxLines == _this.hintMaxLines && other.errorText == _this.errorText && other.floatingLabelBehavior == _this.floatingLabelBehavior && J.$eq$(other.floatingLabelAlignment, _this.floatingLabelAlignment) && other.isDense == _this.isDense && J.$eq$(other.contentPadding, _this.contentPadding) && J.$eq$(other.counter, _this.counter) && other.counterText == _this.counterText && J.$eq$(other.counterStyle, _this.counterStyle) && other.filled == _this.filled && other.border == _this.border && other.semanticCounterText == _this.semanticCounterText && other.alignLabelWithHint == _this.alignLabelWithHint && true;
    },
    get$hashCode(_) {
      var _this = this;
      return B.Object_hashAll([_this.icon, _this.iconColor, _this.label, _this.labelText, _this.floatingLabelStyle, _this.labelStyle, _this.helperText, _this.helperStyle, _this.helperMaxLines, _this.hintText, _this.hintStyle, _this.hintTextDirection, _this.hintMaxLines, _this.errorText, _this.errorStyle, _this.errorMaxLines, _this.floatingLabelBehavior, _this.floatingLabelAlignment, _this.isDense, _this.contentPadding, false, _this.filled, _this.fillColor, _this.focusColor, _this.hoverColor, _this.prefixIcon, _this.prefixIconColor, _this.prefix, _this.prefixText, _this.prefixStyle, _this.prefixIconConstraints, _this.suffixIcon, _this.suffixIconColor, _this.suffix, _this.suffixText, _this.suffixStyle, _this.suffixIconConstraints, _this.counter, _this.counterText, _this.counterStyle, _this.errorBorder, _this.focusedBorder, _this.focusedErrorBorder, _this.disabledBorder, _this.enabledBorder, _this.border, true, _this.semanticCounterText, _this.alignLabelWithHint, _this.constraints]);
    },
    toString$0(_) {
      var _this = this,
        t1 = B._setArrayType([], type$.JSArray_String),
        t2 = _this.hintMaxLines;
      if (t2 != null)
        t1.push('hintMaxLines: "' + B.S(t2) + '"');
      t2 = _this.errorText;
      if (t2 != null)
        t1.push('errorText: "' + t2 + '"');
      t2 = _this.floatingLabelBehavior;
      if (t2 != null)
        t1.push("floatingLabelBehavior: " + t2.toString$0(0));
      t2 = _this.floatingLabelAlignment;
      if (t2 != null)
        t1.push("floatingLabelAlignment: " + t2.toString$0(0));
      t2 = _this.isDense;
      if (t2 === true)
        t1.push("isDense: " + B.S(t2));
      t2 = _this.contentPadding;
      if (t2 != null)
        t1.push("contentPadding: " + t2.toString$0(0));
      t2 = _this.counter;
      if (t2 != null)
        t1.push("counter: " + t2.toString$0(0));
      t2 = _this.counterText;
      if (t2 != null)
        t1.push("counterText: " + t2);
      t2 = _this.counterStyle;
      if (t2 != null)
        t1.push("counterStyle: " + t2.toString$0(0));
      if (_this.filled === true)
        t1.push("filled: true");
      t2 = _this.border;
      if (t2 != null)
        t1.push("border: " + t2.toString$0(0));
      t2 = _this.semanticCounterText;
      if (t2 != null)
        t1.push("semanticCounterText: " + t2);
      t2 = _this.alignLabelWithHint;
      if (t2 != null)
        t1.push("alignLabelWithHint: " + B.S(t2));
      return "InputDecoration(" + C.JSArray_methods.join$1(t1, ", ") + ")";
    }
  };
  A._InputDecoratorDefaultsM2.prototype = {
    get$hintStyle() {
      return A._MaterialStateTextStyle$(new A._InputDecoratorDefaultsM2_hintStyle_closure(this));
    },
    get$labelStyle() {
      return A._MaterialStateTextStyle$(new A._InputDecoratorDefaultsM2_labelStyle_closure(this));
    },
    get$floatingLabelStyle() {
      return A._MaterialStateTextStyle$(new A._InputDecoratorDefaultsM2_floatingLabelStyle_closure(this));
    },
    get$helperStyle() {
      return A._MaterialStateTextStyle$(new A._InputDecoratorDefaultsM2_helperStyle_closure(this));
    },
    get$errorStyle() {
      return A._MaterialStateTextStyle$(new A._InputDecoratorDefaultsM2_errorStyle_closure(this));
    },
    get$fillColor() {
      return E._MaterialStateColor$(new A._InputDecoratorDefaultsM2_fillColor_closure(this));
    },
    get$iconColor() {
      return E._MaterialStateColor$(new A._InputDecoratorDefaultsM2_iconColor_closure(this));
    },
    get$prefixIconColor() {
      return E._MaterialStateColor$(new A._InputDecoratorDefaultsM2_prefixIconColor_closure(this));
    },
    get$suffixIconColor() {
      return E._MaterialStateColor$(new A._InputDecoratorDefaultsM2_suffixIconColor_closure(this));
    }
  };
  A.__BorderContainerState_State_TickerProviderStateMixin.prototype = {
    activate$0() {
      this.super$State$activate();
      this._updateTickerModeNotifier$0();
      this._updateTickers$0();
    },
    dispose$0() {
      var _this = this,
        t1 = _this.TickerProviderStateMixin__tickerModeNotifier;
      if (t1 != null)
        t1.removeListener$1(0, _this.get$_updateTickers());
      _this.set$_tickerModeNotifier(null);
      _this.super$State$dispose();
    }
  };
  A.__Decorator_RenderObjectWidget_SlottedMultiChildRenderObjectWidgetMixin.prototype = {
    updateRenderObject$2(context, renderObject) {
      return this.super$RenderObjectWidget$updateRenderObject(context, renderObject);
    }
  };
  A.__HelperErrorState_State_SingleTickerProviderStateMixin.prototype = {
    dispose$0() {
      var _this = this,
        t1 = _this.SingleTickerProviderStateMixin__tickerModeNotifier;
      if (t1 != null)
        t1.removeListener$1(0, _this.get$_updateTicker());
      _this.set$_tickerModeNotifier(null);
      _this.super$State$dispose();
    },
    activate$0() {
      this.super$State$activate();
      this._updateTickerModeNotifier$0();
      this._updateTicker$0();
    }
  };
  A.__InputDecoratorState_State_TickerProviderStateMixin.prototype = {
    activate$0() {
      this.super$State$activate();
      this._updateTickerModeNotifier$0();
      this._updateTickers$0();
    },
    dispose$0() {
      var _this = this,
        t1 = _this.TickerProviderStateMixin__tickerModeNotifier;
      if (t1 != null)
        t1.removeListener$1(0, _this.get$_updateTickers());
      _this.set$_tickerModeNotifier(null);
      _this.super$State$dispose();
    }
  };
  A.__RenderDecoration_RenderBox_SlottedContainerRenderObjectMixin.prototype = {
    attach$1(owner) {
      var t1, t2, _i;
      type$.PipelineOwner._as(owner);
      this.super$RenderObject$attach(owner);
      for (t1 = this.get$children(this), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, B.throwConcurrentModificationError)(t1), ++_i)
        t1[_i].attach$1(owner);
    },
    detach$0(_) {
      var t1, t2, _i;
      this.super$AbstractNode$detach(0);
      for (t1 = this.get$children(this), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, B.throwConcurrentModificationError)(t1), ++_i)
        t1[_i].detach$0(0);
    }
  };
  A.TextMagnifier.prototype = {
    createState$0() {
      return new A._TextMagnifierState(C.Offset_0_0, C._StateLifecycle_0);
    }
  };
  A._TextMagnifierState.prototype = {
    initState$0() {
      this.super$State$initState();
      this._widget.magnifierInfo.addListener$1(0, this.get$_determineMagnifierPositionAndFocalPoint());
    },
    dispose$0() {
      var t1, _this = this;
      _this._widget.magnifierInfo.removeListener$1(0, _this.get$_determineMagnifierPositionAndFocalPoint());
      t1 = _this._positionShouldBeAnimatedTimer;
      if (t1 != null)
        t1.cancel$0(0);
      _this.super$State$dispose();
    },
    didChangeDependencies$0() {
      this._determineMagnifierPositionAndFocalPoint$0();
      this.super$State$didChangeDependencies();
    },
    didUpdateWidget$1(oldWidget) {
      var t1, t2, _this = this;
      type$.TextMagnifier._as(oldWidget);
      t1 = oldWidget.magnifierInfo;
      if (t1 !== _this._widget.magnifierInfo) {
        t2 = _this.get$_determineMagnifierPositionAndFocalPoint();
        t1.removeListener$1(0, t2);
        _this._widget.magnifierInfo.addListener$1(0, t2);
      }
      _this.super$State$didUpdateWidget(oldWidget);
    },
    _determineMagnifierPositionAndFocalPoint$0() {
      var screenBoundsAdjustedMagnifierRect, t5, t6, newGlobalFocalPointX, positionShouldBeAnimated, _this = this, t1 = {},
        selectionInfo = _this._widget.magnifierInfo._change_notifier$_value,
        t2 = _this._framework$_element.dependOnInheritedWidgetOfExactType$1$0(type$.MediaQuery).data.size,
        t3 = selectionInfo.globalGesturePosition,
        t4 = selectionInfo.currentLineBoundaries;
      t4 = new B.Offset(B.clampDouble(t3._dx, t4.left, t4.right), selectionInfo.caretRect.get$center()._dy).$sub(0, new B.Offset(38.685, 59.9));
      t3 = t4._dx;
      t4 = t4._dy;
      screenBoundsAdjustedMagnifierRect = A.MagnifierController_shiftWithinBounds(new B.Rect(0, 0, 0 + t2._dx, 0 + t2._dy), new B.Rect(t3, t4, t3 + 77.37, t4 + 37.9));
      t3 = screenBoundsAdjustedMagnifierRect.top;
      t2 = selectionInfo.fieldBounds;
      t5 = t2.right;
      t6 = t2.left;
      newGlobalFocalPointX = t5 - t6 < 61.896 ? t2.get$center()._dx : B.clampDouble(screenBoundsAdjustedMagnifierRect.get$center()._dx, t6 + 30.948, t5 - 30.948);
      t2 = screenBoundsAdjustedMagnifierRect.get$center();
      positionShouldBeAnimated = t1.positionShouldBeAnimated = _this._positionShouldBeAnimatedTimer;
      t5 = _this._magnifierPosition;
      if (t5 != null && t3 !== t5._dy) {
        if (positionShouldBeAnimated != null && positionShouldBeAnimated._handle != null)
          positionShouldBeAnimated.cancel$0(0);
        t1.positionShouldBeAnimated = B.Timer_Timer(D.Duration_70000, new A._TextMagnifierState__determineMagnifierPositionAndFocalPoint_closure(_this));
      }
      _this.setState$1(new A._TextMagnifierState__determineMagnifierPositionAndFocalPoint_closure0(t1, _this, new B.Offset(screenBoundsAdjustedMagnifierRect.left, t3), new B.Offset(newGlobalFocalPointX - t2._dx, t4 - t3)));
    },
    build$1(context) {
      var t3,
        t1 = this._magnifierPosition,
        t2 = t1._dy;
      t1 = t1._dx;
      t3 = this._positionShouldBeAnimatedTimer != null ? D.Duration_70000 : C.Duration_0;
      return A.AnimatedPositioned$(new A.Magnifier(this._extraFocalPointOffset, null), C.C__Linear, t3, t1, t2);
    }
  };
  A.Magnifier.prototype = {
    build$1(context) {
      return new A.RawMagnifier(new B.ColoredBox(D.Color_144613022, null, null), A.MagnifierDecoration$(1, D.List_yzp, new B.RoundedRectangleBorder(D.BorderRadius_tLn3, C.BorderSide_8xm)), this.additionalFocalPointOffset.$add(0, new B.Offset(0, 40.95)), 1.25, D.Size_Q8J, null);
    }
  };
  A.MaterialStateTextStyle.prototype = {$isMaterialStateProperty: 1};
  A._MaterialStateTextStyle.prototype = {
    resolve$1(states) {
      return this._material_state$_resolve.call$1(type$.Set_MaterialState._as(states));
    }
  };
  A.TextButton.prototype = {
    defaultStyleOf$1(context) {
      var t1,
        theme = B.Theme_of(context),
        colorScheme = theme.colorScheme;
      B.Theme_of(context);
      t1 = colorScheme.onSurface.value;
      t1 = E.TextButton_styleFrom(C.Alignment_0_0, C.Duration_200000, C.Color_0, C.Color_0, B.Color$fromARGB(97, t1 >>> 16 & 255, t1 >>> 8 & 255, t1 & 255), C.SystemMouseCursor_basic, 0, true, C.SystemMouseCursor_click, colorScheme.primary, C.Size_wjo, D.Size_64_36, A._scaledPadding(context), theme.shadowColor, C.RoundedRectangleBorder_27D1, C.C__InkRippleFactory, theme.materialTapTargetSize, theme.textTheme.labelLarge, theme.visualDensity);
      return t1;
    },
    themeStyleOf$1(context) {
      var buttonTheme = context.dependOnInheritedWidgetOfExactType$1$0(type$.TextButtonTheme),
        t1 = buttonTheme == null ? null : buttonTheme.data;
      return (t1 == null ? B.Theme_of(context).textButtonTheme : t1).style;
    }
  };
  A._TextFieldSelectionGestureDetectorBuilder.prototype = {
    onForcePressStart$1(details) {
      var t1;
      this.super$TextSelectionGestureDetectorBuilder$onForcePressStart(details);
      t1 = this.delegate;
      if (t1._widget.enableInteractiveSelection && this._shouldShowSelectionToolbar) {
        t1 = t1.editableTextKey.get$currentState();
        t1.toString;
        t1.showToolbar$0();
      }
    },
    onForcePressEnd$1(details) {
    },
    onSingleTapUp$1(details) {
      var t1;
      this.super$TextSelectionGestureDetectorBuilder$onSingleTapUp(details);
      t1 = this._text_field$_state;
      t1._requestKeyboard$0();
      t1._widget.toString;
    },
    onSingleLongTapStart$1(details) {
      var t1, t2;
      this.super$TextSelectionGestureDetectorBuilder$onSingleLongTapStart(details);
      if (this.delegate._widget.enableInteractiveSelection) {
        t1 = this._text_field$_state;
        t2 = t1._framework$_element;
        t2.toString;
        switch (B.Theme_of(t2).platform.index) {
          case 2:
          case 4:
            break;
          case 0:
          case 1:
          case 3:
          case 5:
            t1 = t1._framework$_element;
            t1.toString;
            B.Feedback_forLongPress(t1);
            break;
        }
      }
    }
  };
  A.TextField.prototype = {
    createState$0() {
      var _null = null;
      return new A._TextFieldState(new B.LabeledGlobalKey(_null, type$.LabeledGlobalKey_EditableTextState), _null, B.LinkedHashMap_LinkedHashMap$_empty(type$.RestorableProperty_nullable_Object, type$.void_Function), _null, true, _null, C._StateLifecycle_0);
    }
  };
  A._TextFieldState.prototype = {
    get$_effectiveController() {
      var t1 = this._widget.controller;
      if (t1 == null) {
        t1 = this._text_field$_controller._restoration_properties$_value;
        t1.toString;
      }
      return t1;
    },
    get$_effectiveFocusNode() {
      var t1, _null = null;
      this._widget.toString;
      t1 = this._focusNode;
      if (t1 == null) {
        t1 = B.FocusNode$(true, _null, true, true, _null, _null, false);
        this._focusNode = t1;
      }
      return t1;
    },
    get$_effectiveMaxLengthEnforcement() {
      this._widget.toString;
      var t1 = this._framework$_element;
      t1.toString;
      t1 = A.LengthLimitingTextInputFormatter_getDefaultMaxLengthEnforcement(B.Theme_of(t1).platform);
      return t1;
    },
    get$_isEnabled() {
      this._widget.toString;
      return true;
    },
    get$_hasIntrinsicError() {
      this._widget.toString;
      return false;
    },
    _getEffectiveDecoration$0() {
      var themeData, t2, effectiveDecoration, _this = this,
        t1 = _this._framework$_element;
      t1.toString;
      B.Localizations_of(t1, C.Type_MaterialLocalizations_flR, type$.MaterialLocalizations).toString;
      t1 = _this._framework$_element;
      t1.toString;
      themeData = B.Theme_of(t1);
      t1 = _this._widget.decoration;
      t1 = t1.applyDefaults$1(themeData.inputDecorationTheme);
      _this.get$_isEnabled();
      t2 = _this._widget.decoration.hintMaxLines;
      effectiveDecoration = t1.copyWith$2$enabled$hintMaxLines(true, t2 == null ? 1 : t2);
      t1 = effectiveDecoration.counter == null;
      if (!t1 || effectiveDecoration.counterText != null)
        return effectiveDecoration;
      t2 = _this.get$_effectiveController()._change_notifier$_value.text;
      t2 = t2.length === 0 ? C.StringCharacters_ehH : new B.StringCharacters(t2);
      t2.get$length(t2);
      if (t1)
        if (effectiveDecoration.counterText == null)
          _this._widget.toString;
      _this._widget.toString;
      return effectiveDecoration;
    },
    initState$0() {
      var t1, _this = this;
      _this.super$State$initState();
      _this.___TextFieldState__selectionGestureDetectorBuilder_A = new A._TextFieldSelectionGestureDetectorBuilder(_this, _this);
      if (_this._widget.controller == null)
        _this._createLocalController$0();
      t1 = _this.get$_effectiveFocusNode();
      _this.get$_isEnabled();
      t1.set$canRequestFocus(true);
      _this.get$_effectiveFocusNode().addListener$1(0, _this.get$_text_field$_handleFocusChanged());
    },
    get$_text_field$_canRequestFocus() {
      var mode,
        t1 = this._framework$_element;
      t1.toString;
      t1 = B.MediaQuery_maybeOf(t1);
      mode = t1 == null ? null : t1.navigationMode;
      switch ((mode == null ? C.NavigationMode_0 : mode).index) {
        case 0:
          this.get$_isEnabled();
          return true;
        case 1:
          return true;
      }
    },
    didChangeDependencies$0() {
      this.super$__TextFieldState_State_RestorationMixin$didChangeDependencies();
      this.get$_effectiveFocusNode().set$canRequestFocus(this.get$_text_field$_canRequestFocus());
    },
    didUpdateWidget$1(oldWidget) {
      var t1, t2, t3, _this = this;
      type$.TextField._as(oldWidget);
      _this.super$__TextFieldState_State_RestorationMixin$didUpdateWidget(oldWidget);
      t1 = _this._widget.controller == null;
      if (t1 && oldWidget.controller != null)
        _this._createLocalController$1(oldWidget.controller._change_notifier$_value);
      else if (!t1 && oldWidget.controller == null) {
        t1 = _this._text_field$_controller;
        t1.toString;
        t2 = _this.RestorationMixin__bucket;
        if (t2 != null) {
          t3 = t1._restoration0$_restorationId;
          t3.toString;
          t2.remove$1$1(0, t3, type$.nullable_Object);
        }
        _this._unregister$1(t1);
        t1 = _this._text_field$_controller;
        t1._disposeOldValue$0();
        t1.super$RestorableListenable$dispose();
        _this._text_field$_controller = null;
      }
      _this._widget.toString;
      _this.get$_effectiveFocusNode().set$canRequestFocus(_this.get$_text_field$_canRequestFocus());
      if (_this.get$_effectiveFocusNode().get$hasFocus())
        _this._widget.toString;
    },
    restoreState$2(oldBucket, initialRestore) {
      var t1 = this._text_field$_controller;
      if (t1 != null)
        this.registerForRestoration$2(t1, "controller");
    },
    _createLocalController$1(value) {
      var t1, _this = this;
      if (value == null)
        t1 = new A.RestorableTextEditingController(D.TextEditingValue_li8, $.$get$ChangeNotifier__emptyListeners());
      else
        t1 = new A.RestorableTextEditingController(value, $.$get$ChangeNotifier__emptyListeners());
      _this._text_field$_controller = t1;
      if (!_this.get$restorePending()) {
        t1 = _this._text_field$_controller;
        t1.toString;
        _this.registerForRestoration$2(t1, "controller");
      }
    },
    _createLocalController$0() {
      return this._createLocalController$1(null);
    },
    get$restorationId() {
      this._widget.toString;
      return null;
    },
    dispose$0() {
      var t1, _this = this;
      _this.get$_effectiveFocusNode().removeListener$1(0, _this.get$_text_field$_handleFocusChanged());
      t1 = _this._focusNode;
      if (t1 != null)
        t1.dispose$0();
      t1 = _this._text_field$_controller;
      if (t1 != null) {
        t1._disposeOldValue$0();
        t1.super$RestorableListenable$dispose();
      }
      _this.super$__TextFieldState_State_RestorationMixin$dispose();
    },
    _requestKeyboard$0() {
      var t1 = this.editableTextKey.get$currentState();
      if (t1 != null)
        t1.requestKeyboard$0();
    },
    _shouldShowSelectionHandles$1(cause) {
      var _this = this,
        t1 = _this.___TextFieldState__selectionGestureDetectorBuilder_A;
      t1 === $ && B.throwLateFieldNI("_selectionGestureDetectorBuilder");
      if (!t1._shouldShowSelectionToolbar)
        return false;
      if (cause === C.SelectionChangedCause_4)
        return false;
      _this._widget.toString;
      _this.get$_isEnabled();
      if (cause === D.SelectionChangedCause_2 || cause === D.SelectionChangedCause_7)
        return true;
      if (_this.get$_effectiveController()._change_notifier$_value.text.length !== 0)
        return true;
      return false;
    },
    _text_field$_handleFocusChanged$0() {
      this.setState$1(new A._TextFieldState__handleFocusChanged_closure());
    },
    _handleSelectionChanged$2(selection, cause) {
      var t1, _this = this,
        willShowSelectionHandles = _this._shouldShowSelectionHandles$1(cause);
      if (willShowSelectionHandles !== _this._showSelectionHandles)
        _this.setState$1(new A._TextFieldState__handleSelectionChanged_closure(_this, willShowSelectionHandles));
      t1 = _this._framework$_element;
      t1.toString;
      switch (B.Theme_of(t1).platform.index) {
        case 2:
        case 4:
        case 3:
        case 5:
        case 1:
        case 0:
          if (cause === D.SelectionChangedCause_2 || cause === D.SelectionChangedCause_6) {
            t1 = _this.editableTextKey.get$currentState();
            if (t1 != null)
              t1.bringIntoView$1(selection.get$extent());
          }
          break;
      }
      t1 = _this._framework$_element;
      t1.toString;
      switch (B.Theme_of(t1).platform.index) {
        case 2:
        case 1:
        case 0:
          break;
        case 4:
        case 3:
        case 5:
          if (cause === D.SelectionChangedCause_6) {
            t1 = _this.editableTextKey.get$currentState();
            if (t1 != null)
              t1.hideToolbar$0();
          }
          break;
      }
    },
    _handleSelectionHandleTapped$0() {
      var t1 = this.get$_effectiveController()._change_notifier$_value.selection;
      if (t1.start === t1.end)
        this.editableTextKey.get$currentState().toggleToolbar$0();
    },
    _handleHover$1(hovering) {
      if (hovering !== this._isHovering)
        this.setState$1(new A._TextFieldState__handleHover_closure(this, hovering));
    },
    get$textInputConfiguration() {
      var autofillHints, t1, t2, t3, autofillConfiguration, _this = this;
      _this._widget.toString;
      autofillHints = J.JSArray_JSArray$markFixed(C.List_empty0.slice(0), type$.String);
      if (autofillHints != null) {
        t1 = _this.editableTextKey.get$currentState();
        t1.toString;
        t1 = B.Primitives_objectHashCode(t1);
        t2 = _this.get$_effectiveController()._change_notifier$_value;
        t3 = _this._widget.decoration;
        autofillConfiguration = new A.AutofillConfiguration(true, "EditableText-" + t1, autofillHints, t2, t3.hintText);
      } else
        autofillConfiguration = D.AutofillConfiguration_lYx;
      t1 = _this.editableTextKey.get$currentState().get$textInputConfiguration();
      return A.TextInputConfiguration$(true, autofillConfiguration, false, true, t1.enableInteractiveSelection, true, t1.inputAction, t1.inputType, t1.keyboardAppearance, false, t1.readOnly, t1.smartDashesType, t1.smartQuotesType, t1.textCapitalization);
    },
    build$1(context) {
      var t2, style, controller, focusNode, t3, t4, cupertinoTheme, textSelectionControls, cursorColor, selectionColor, cursorOffset, autocorrectionTextRectColor, paintCursorAboveText, cursorOpacityAnimates, cursorRadius, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, child, effectiveMouseCursor, _this = this, _null = null, _box_0 = {},
        theme = B.Theme_of(context),
        t1 = context.dependOnInheritedWidgetOfExactType$1$0(type$.DefaultSelectionStyle);
      if (t1 == null)
        t1 = C.DefaultSelectionStyle_MUs;
      t2 = theme.textTheme.titleMedium;
      t2.toString;
      _this._widget.toString;
      style = t2.merge$1(_null);
      _this._widget.toString;
      t2 = theme.colorScheme;
      controller = _this.get$_effectiveController();
      focusNode = _this.get$_effectiveFocusNode();
      t3 = type$.JSArray_TextInputFormatter;
      t4 = B._setArrayType([], t3);
      _this._widget.toString;
      _box_0.handleDidGainAccessibilityFocus = null;
      switch (theme.platform.index) {
        case 2:
          cupertinoTheme = A.CupertinoTheme_of(context);
          _this.___TextFieldState_forcePressEnabled_A = true;
          textSelectionControls = $.$get$cupertinoTextSelectionHandleControls();
          _this._widget.toString;
          cursorColor = t1.cursorColor;
          if (cursorColor == null)
            cursorColor = cupertinoTheme.get$primaryColor();
          selectionColor = t1.selectionColor;
          if (selectionColor == null) {
            t1 = cupertinoTheme.get$primaryColor();
            selectionColor = B.Color$fromARGB(102, t1.get$value(t1) >>> 16 & 255, t1.get$value(t1) >>> 8 & 255, t1.get$value(t1) & 255);
          }
          cursorOffset = new B.Offset(-2 / context.dependOnInheritedWidgetOfExactType$1$0(type$.MediaQuery).data.devicePixelRatio, 0);
          autocorrectionTextRectColor = selectionColor;
          paintCursorAboveText = true;
          cursorOpacityAnimates = true;
          cursorRadius = C.Radius_2_2;
          break;
        case 4:
          cupertinoTheme = A.CupertinoTheme_of(context);
          cursorOpacityAnimates = _this.___TextFieldState_forcePressEnabled_A = false;
          textSelectionControls = $.$get$cupertinoDesktopTextSelectionHandleControls();
          _this._widget.toString;
          cursorColor = t1.cursorColor;
          if (cursorColor == null)
            cursorColor = cupertinoTheme.get$primaryColor();
          selectionColor = t1.selectionColor;
          if (selectionColor == null) {
            t1 = cupertinoTheme.get$primaryColor();
            selectionColor = B.Color$fromARGB(102, t1.get$value(t1) >>> 16 & 255, t1.get$value(t1) >>> 8 & 255, t1.get$value(t1) & 255);
          }
          cursorOffset = new B.Offset(-2 / context.dependOnInheritedWidgetOfExactType$1$0(type$.MediaQuery).data.devicePixelRatio, 0);
          _box_0.handleDidGainAccessibilityFocus = new A._TextFieldState_build_closure(_this);
          autocorrectionTextRectColor = _null;
          paintCursorAboveText = true;
          cursorRadius = C.Radius_2_2;
          break;
        case 0:
        case 1:
          _this.___TextFieldState_forcePressEnabled_A = false;
          textSelectionControls = $.$get$materialTextSelectionHandleControls();
          cursorColor = t1.cursorColor;
          if (cursorColor == null)
            cursorColor = t2.primary;
          selectionColor = t1.selectionColor;
          if (selectionColor == null) {
            t1 = t2.primary;
            selectionColor = B.Color$fromARGB(102, t1.get$value(t1) >>> 16 & 255, t1.get$value(t1) >>> 8 & 255, t1.get$value(t1) & 255);
          }
          cursorRadius = _null;
          autocorrectionTextRectColor = cursorRadius;
          cursorOffset = autocorrectionTextRectColor;
          paintCursorAboveText = false;
          cursorOpacityAnimates = false;
          break;
        case 3:
          _this.___TextFieldState_forcePressEnabled_A = false;
          textSelectionControls = $.$get$desktopTextSelectionHandleControls();
          cursorColor = t1.cursorColor;
          if (cursorColor == null)
            cursorColor = t2.primary;
          selectionColor = t1.selectionColor;
          if (selectionColor == null) {
            t1 = t2.primary;
            selectionColor = B.Color$fromARGB(102, t1.get$value(t1) >>> 16 & 255, t1.get$value(t1) >>> 8 & 255, t1.get$value(t1) & 255);
          }
          cursorRadius = _null;
          autocorrectionTextRectColor = cursorRadius;
          cursorOffset = autocorrectionTextRectColor;
          paintCursorAboveText = false;
          cursorOpacityAnimates = false;
          break;
        case 5:
          _this.___TextFieldState_forcePressEnabled_A = false;
          textSelectionControls = $.$get$desktopTextSelectionHandleControls();
          cursorColor = t1.cursorColor;
          if (cursorColor == null)
            cursorColor = t2.primary;
          selectionColor = t1.selectionColor;
          if (selectionColor == null) {
            t1 = t2.primary;
            selectionColor = B.Color$fromARGB(102, t1.get$value(t1) >>> 16 & 255, t1.get$value(t1) >>> 8 & 255, t1.get$value(t1) & 255);
          }
          _box_0.handleDidGainAccessibilityFocus = new A._TextFieldState_build_closure0(_this);
          cursorRadius = _null;
          autocorrectionTextRectColor = cursorRadius;
          cursorOffset = autocorrectionTextRectColor;
          paintCursorAboveText = false;
          cursorOpacityAnimates = false;
          break;
        default:
          cursorRadius = _null;
          autocorrectionTextRectColor = cursorRadius;
          selectionColor = autocorrectionTextRectColor;
          cursorColor = selectionColor;
          cursorOffset = cursorColor;
          cursorOpacityAnimates = cursorOffset;
          paintCursorAboveText = cursorOpacityAnimates;
          textSelectionControls = paintCursorAboveText;
      }
      t1 = _this.RestorationMixin__bucket;
      _this._widget.toString;
      _this.get$_isEnabled();
      t5 = _this._widget;
      t6 = _this._showSelectionHandles;
      t7 = t5.keyboardType;
      t8 = t5.textInputAction;
      t9 = t5.textAlign;
      t10 = t5.smartDashesType;
      t5 = t5.smartQuotesType;
      t11 = focusNode.get$hasFocus() ? selectionColor : _null;
      t12 = _this._widget;
      t13 = t12.enableInteractiveSelection;
      t14 = t13 ? textSelectionControls : _null;
      t12 = t12.onChanged;
      t15 = $.$get$TextMagnifier_adaptiveMagnifierConfiguration();
      if (type$.TextSelectionHandleControls._is(t14) && true)
        t16 = D.ToolbarOptions_false_false_false_false;
      else
        t16 = D.ToolbarOptions_true_true_true_true;
      t3 = B._setArrayType([$.$get$FilteringTextInputFormatter_singleLineFormatter()], t3);
      C.JSArray_methods.addAll$1(t3, t4);
      t1 = B.UnmanagedRestorationScope$(t1, new A.EditableText(controller, focusNode, "\u2022", false, false, t16, t6, true, true, t10, t5, true, style, _null, t9, _null, D.TextCapitalization_3, cursorColor, autocorrectionTextRectColor, C.CupertinoDynamicColor_YIZ, 1, _null, false, false, t11, t14, t7, t8, t12, _null, _null, _null, _this.get$_handleSelectionChanged(), _this.get$_handleSelectionHandleTapped(), _null, t3, C.C__DeferringMouseCursor, true, 2, _null, cursorRadius, cursorOpacityAnimates, cursorOffset, paintCursorAboveText, C.BoxHeightStyle_0, C.BoxWidthStyle_0, t2.brightness, I.EdgeInsets_20_20_20_20, t13, C.DragStartBehavior_1, _null, _null, true, _this, C.Clip_1, "editable", true, A.text_field_TextField__defaultContextMenuBuilder$closure(), D.SpellCheckConfiguration_null_null_false, t15, _this.editableTextKey));
      _this._widget.toString;
      child = B.AnimatedBuilder$(new B._MergingListenable(B._setArrayType([focusNode, controller], type$.JSArray_Listenable)), new A._TextFieldState_build_closure1(_this, focusNode, controller), new B.RepaintBoundary(t1, _null));
      _this._widget.toString;
      t1 = B.LinkedHashSet_LinkedHashSet$_empty(type$.MaterialState);
      _this.get$_isEnabled();
      if (_this._isHovering)
        t1.add$1(0, C.MaterialState_0);
      if (focusNode.get$hasFocus())
        t1.add$1(0, C.MaterialState_1);
      t2 = _this._widget.decoration;
      if (t2.errorText != null || _this.get$_hasIntrinsicError())
        t1.add$1(0, D.MaterialState_7);
      effectiveMouseCursor = B.MaterialStateProperty_resolveAs(D._EnabledAndDisabledMouseCursor_SystemMouseCursor_text_textable, t1, type$.MouseCursor);
      _box_0.semanticsMaxValueLength = null;
      if (_this.get$_effectiveMaxLengthEnforcement() !== D.MaxLengthEnforcement_0)
        _this._widget.toString;
      _this.get$_isEnabled();
      t1 = _this.___TextFieldState__selectionGestureDetectorBuilder_A;
      t1 === $ && B.throwLateFieldNI("_selectionGestureDetectorBuilder");
      t2 = t1.delegate.___TextFieldState_forcePressEnabled_A;
      t2 === $ && B.throwLateFieldNI("forcePressEnabled");
      t3 = t2 ? t1.get$onForcePressStart() : _null;
      t2 = t2 ? t1.get$onForcePressEnd() : _null;
      return B.MouseRegion$(A.TextFieldTapRegion$(new B.IgnorePointer(false, _null, B.AnimatedBuilder$(controller, new A._TextFieldState_build_closure2(_box_0, _this), new A.TextSelectionGestureDetector(t1.get$onTapDown(), t3, t2, t1.get$onSecondaryTap(), t1.get$onSecondaryTapDown(), t1.get$onSingleTapUp(), t1.get$onSingleTapCancel(), t1.get$onSingleLongTapStart(), t1.get$onSingleLongTapMoveUpdate(), t1.get$onSingleLongTapEnd(), t1.get$onDoubleTapDown(), t1.get$onDragSelectionStart(), t1.get$onDragSelectionUpdate(), t1.get$onDragSelectionEnd(), C.HitTestBehavior_2, child, _null)), _null), _null, _null), effectiveMouseCursor, _null, new A._TextFieldState_build_closure3(_this), new A._TextFieldState_build_closure4(_this), _null);
    },
    $isAutofillClient: 1,
    $isTextSelectionGestureDetectorBuilderDelegate: 1
  };
  A.__TextFieldState_State_RestorationMixin.prototype = {
    didUpdateWidget$1(oldWidget) {
      this.super$State$didUpdateWidget(type$.TextField._as(oldWidget));
      this.didUpdateRestorationId$0();
    },
    didChangeDependencies$0() {
      var oldBucket, needsRestore, t1, didReplaceBucket, _this = this;
      _this.super$State$didChangeDependencies();
      oldBucket = _this.RestorationMixin__bucket;
      needsRestore = _this.get$restorePending();
      t1 = _this._framework$_element;
      t1.toString;
      t1 = B.RestorationScope_maybeOf(t1);
      _this.RestorationMixin__currentParent = t1;
      didReplaceBucket = _this._updateBucketIfNecessary$2$parent$restorePending(t1, needsRestore);
      if (needsRestore) {
        _this.restoreState$2(oldBucket, _this.RestorationMixin__firstRestorePending);
        _this.RestorationMixin__firstRestorePending = false;
      }
      if (didReplaceBucket)
        if (oldBucket != null)
          oldBucket.dispose$0();
    },
    dispose$0() {
      var t1, _this = this;
      _this.RestorationMixin__properties.forEach$1(0, new A.__TextFieldState_State_RestorationMixin_dispose_closure());
      t1 = _this.RestorationMixin__bucket;
      if (t1 != null)
        t1.dispose$0();
      _this.RestorationMixin__bucket = null;
      _this.super$State$dispose();
    }
  };
  A.MaterialTextSelectionHandleControls.prototype = {};
  A.MaterialTextSelectionControls.prototype = {
    getHandleSize$1(textLineHeight) {
      return D.Size_22_22;
    },
    buildHandle$4(context, type, textHeight, onTap) {
      var theme, t1, handleColor, handle, _null = null;
      type$.nullable_void_Function._as(onTap);
      theme = B.Theme_of(context);
      context.dependOnInheritedWidgetOfExactType$1$0(type$.TextSelectionTheme);
      t1 = B.Theme_of(context);
      handleColor = t1.textSelectionTheme.selectionHandleColor;
      if (handleColor == null)
        handleColor = theme.colorScheme.primary;
      handle = B.SizedBox$(B.CustomPaint$(B.GestureDetector$(C.HitTestBehavior_2, _null, C.DragStartBehavior_1, false, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, onTap, _null, _null, _null, _null, _null, _null), _null, _null, new A._TextSelectionHandlePainter(handleColor, _null), C.Size_0_0), 22, 22);
      switch (type.index) {
        case 0:
          return F.Transform$rotate(C.Alignment_0_0, 1.5707963267948966, handle, _null);
        case 1:
          return handle;
        case 2:
          return F.Transform$rotate(C.Alignment_0_0, 0.7853981633974483, handle, _null);
      }
    },
    getHandleAnchor$2(type, textLineHeight) {
      switch (type.index) {
        case 0:
          return D.Offset_22_0;
        case 1:
          return C.Offset_0_0;
        case 2:
          return D.Offset_11_m4;
      }
    }
  };
  A._TextSelectionHandlePainter.prototype = {
    paint$2(canvas, size) {
      var radius, circle, t2, path,
        t1 = $.$get$_renderer(),
        paint = t1.createPaint$0();
      paint.set$color(0, this.color);
      radius = size._dx / 2;
      circle = B.Rect$fromCircle(new B.Offset(radius, radius), radius);
      t2 = 0 + radius;
      path = t1.createPath$0();
      path.addOval$1(circle);
      path.addRect$1(new B.Rect(0, 0, t2, t2));
      canvas.drawPath$2(path, paint);
    },
    shouldRepaint$1(oldPainter) {
      return !this.color.$eq(0, type$._TextSelectionHandlePainter_2._as(oldPainter).color);
    }
  };
  A._MaterialTextSelectionHandleControls_MaterialTextSelectionControls_TextSelectionHandleControls.prototype = {};
  A.TextSelectionToolbar.prototype = {
    build$1(context) {
      var anchorAbovePadded = this.anchorAbove.$sub(0, D.Offset_0_8),
        anchorBelowPadded = this.anchorBelow.$add(0, D.Offset_0_20),
        paddingAbove = context.dependOnInheritedWidgetOfExactType$1$0(type$.MediaQuery).data.padding.top + 8,
        fitsAbove = 44 <= anchorAbovePadded._dy - 8 - paddingAbove,
        localAdjustment = new B.Offset(8, paddingAbove);
      return new B.Padding(new B.EdgeInsets(8, paddingAbove, 8, 8), new B.CustomSingleChildLayout(new A.TextSelectionToolbarLayoutDelegate(anchorAbovePadded.$sub(0, localAdjustment), anchorBelowPadded.$sub(0, localAdjustment), fitsAbove), new A._TextSelectionToolbarOverflowable(this.children, fitsAbove, A.text_selection_toolbar_TextSelectionToolbar__defaultToolbarBuilder$closure(), null), null), null);
    }
  };
  A._TextSelectionToolbarOverflowable.prototype = {
    createState$0() {
      return new A._TextSelectionToolbarOverflowableState(new B.UniqueKey(), null, null, C._StateLifecycle_0);
    },
    toolbarBuilder$2(arg0, arg1) {
      return this.toolbarBuilder.call$2(arg0, arg1);
    }
  };
  A._TextSelectionToolbarOverflowableState.prototype = {
    didUpdateWidget$1(oldWidget) {
      var _this = this;
      type$._TextSelectionToolbarOverflowable._as(oldWidget);
      _this.super$State$didUpdateWidget(oldWidget);
      if (!B.listEquals(_this._widget.children, oldWidget.children, type$.Widget)) {
        _this._containerKey = new B.UniqueKey();
        _this._overflowOpen = false;
      }
    },
    build$1(context) {
      var t1, t2, t3, t4, t5, t6, t7, t8, _this = this, _null = null;
      B.Localizations_of(context, C.Type_MaterialLocalizations_flR, type$.MaterialLocalizations).toString;
      t1 = _this._containerKey;
      t2 = _this._overflowOpen;
      t3 = context.dependOnInheritedWidgetOfExactType$1$0(type$.Directionality);
      t3.toString;
      t4 = _this._widget;
      t5 = t4.isAbove;
      t6 = _this._overflowOpen;
      t7 = B.Icon$(t6 ? G.IconData_57490_MaterialIcons_null_true : D.IconData_58372_MaterialIcons_null_false, _null, _null);
      t8 = t6 ? "Back" : "More";
      t8 = B._setArrayType([new A._TextSelectionToolbarOverflowButton(t7, new A._TextSelectionToolbarOverflowableState_build_closure(_this), t8, _null)], type$.JSArray_Widget);
      C.JSArray_methods.addAll$1(t8, _this._widget.children);
      return new A._TextSelectionToolbarTrailingEdgeAlign(t2, t3.textDirection, new A.AnimatedSize(t4.toolbarBuilder$2(context, new A._TextSelectionToolbarItemsLayout(t5, t6, t8, _null)), D.Duration_140000, _null), t1);
    },
    $isTickerProvider: 1
  };
  A._TextSelectionToolbarTrailingEdgeAlign.prototype = {
    createRenderObject$1(context) {
      var t1 = new A._TextSelectionToolbarTrailingEdgeAlignRenderBox(this.overflowOpen, this.textDirection, null, B.LayerHandle$(type$.ContainerLayer));
      t1.RenderObject$0();
      t1.set$child(null);
      return t1;
    },
    updateRenderObject$2(context, renderObject) {
      type$._TextSelectionToolbarTrailingEdgeAlignRenderBox._as(renderObject);
      renderObject.set$overflowOpen(this.overflowOpen);
      renderObject.set$textDirection(this.textDirection);
    }
  };
  A._TextSelectionToolbarTrailingEdgeAlignRenderBox.prototype = {
    set$overflowOpen(value) {
      if (value === this._overflowOpen)
        return;
      this._overflowOpen = value;
      this.markNeedsLayout$0();
    },
    set$textDirection(value) {
      if (value === this._text_selection_toolbar$_textDirection)
        return;
      this._text_selection_toolbar$_textDirection = value;
      this.markNeedsLayout$0();
    },
    performLayout$0() {
      var t2, t3, _this = this,
        t1 = _this.RenderObjectWithChildMixin__child;
      t1.toString;
      t2 = type$.BoxConstraints;
      t3 = t2._as(B.RenderObject.prototype.get$constraints.call(_this));
      t1.layout$2$parentUsesSize(new B.BoxConstraints(0, t3.maxWidth, 0, t3.maxHeight), true);
      if (!_this._overflowOpen && _this._closedWidth == null)
        _this._closedWidth = _this.RenderObjectWithChildMixin__child._size._dx;
      t1 = t2._as(B.RenderObject.prototype.get$constraints.call(_this));
      t2 = _this._closedWidth;
      if (t2 == null || _this.RenderObjectWithChildMixin__child._size._dx > t2)
        t2 = _this.RenderObjectWithChildMixin__child._size._dx;
      else
        t2.toString;
      t2 = t1.constrain$1(new B.Size(t2, _this.RenderObjectWithChildMixin__child._size._dy));
      _this._size = t2;
      t1 = _this.RenderObjectWithChildMixin__child;
      t3 = t1.parentData;
      t3.toString;
      type$.ToolbarItemsParentData._as(t3);
      t3.offset = new B.Offset(_this._text_selection_toolbar$_textDirection === C.TextDirection_0 ? 0 : t2._dx - t1._size._dx, 0);
    },
    paint$2(context, offset) {
      var t1 = this.RenderObjectWithChildMixin__child,
        t2 = t1.parentData;
      t2.toString;
      context.paintChild$2(t1, type$.ToolbarItemsParentData._as(t2).offset.$add(0, offset));
    },
    hitTestChildren$2$position(result, position) {
      var t1 = this.RenderObjectWithChildMixin__child.parentData;
      t1.toString;
      type$.ToolbarItemsParentData._as(t1);
      return result.addWithPaintOffset$3$hitTest$offset$position(new A._TextSelectionToolbarTrailingEdgeAlignRenderBox_hitTestChildren_closure(this, position, t1), t1.offset, position);
    },
    setupParentData$1(child) {
      type$.RenderBox._as(child);
      if (!(child.parentData instanceof A.ToolbarItemsParentData))
        child.parentData = new A.ToolbarItemsParentData(null, null, C.Offset_0_0);
    },
    applyPaintTransform$2(child, transform) {
      var t1 = child.parentData;
      t1.toString;
      t1 = type$.ToolbarItemsParentData._as(t1).offset;
      transform.translate$2(0, t1._dx, t1._dy);
      this.super$RenderProxyBoxMixin$applyPaintTransform(child, transform);
    }
  };
  A._TextSelectionToolbarItemsLayout.prototype = {
    createRenderObject$1(context) {
      var t1 = new A._RenderTextSelectionToolbarItemsLayout(this.isAbove, this.overflowOpen, 0, null, null, B.LayerHandle$(type$.ContainerLayer));
      t1.RenderObject$0();
      return t1;
    },
    updateRenderObject$2(context, renderObject) {
      type$._RenderTextSelectionToolbarItemsLayout._as(renderObject);
      renderObject.set$isAbove(this.isAbove);
      renderObject.set$overflowOpen(this.overflowOpen);
    },
    createElement$0(_) {
      var t1 = B.HashSet_HashSet(type$.Element);
      return new A._TextSelectionToolbarItemsLayoutElement(t1, this, C._ElementLifecycle_0);
    }
  };
  A._TextSelectionToolbarItemsLayoutElement.prototype = {};
  A._RenderTextSelectionToolbarItemsLayout.prototype = {
    set$isAbove(value) {
      if (value === this._isAbove)
        return;
      this._isAbove = value;
      this.markNeedsLayout$0();
    },
    set$overflowOpen(value) {
      if (value === this._overflowOpen)
        return;
      this._overflowOpen = value;
      this.markNeedsLayout$0();
    },
    _text_selection_toolbar$_layoutChildren$0() {
      var t3, _this = this, t1 = {},
        t2 = type$.BoxConstraints,
        sizedConstraints = _this._overflowOpen ? t2._as(B.RenderObject.prototype.get$constraints.call(_this)) : F.BoxConstraints$loose(new B.Size(t2._as(B.RenderObject.prototype.get$constraints.call(_this)).maxWidth, 44));
      t1.i = -1;
      t1.width = 0;
      _this.visitChildren$1(new A._RenderTextSelectionToolbarItemsLayout__layoutChildren_closure(t1, _this, sizedConstraints));
      t2 = _this.ContainerRenderObjectMixin__firstChild;
      t2.toString;
      t3 = _this._lastIndexThatFits;
      if (t3 !== -1 && t3 === _this.ContainerRenderObjectMixin__childCount - 2 && t1.width - t2._size._dx <= sizedConstraints.maxWidth)
        _this._lastIndexThatFits = -1;
    },
    _shouldPaintChild$2(renderObjectChild, index) {
      var t1, _this = this;
      if (renderObjectChild === _this.ContainerRenderObjectMixin__firstChild)
        return _this._lastIndexThatFits !== -1;
      t1 = _this._lastIndexThatFits;
      if (t1 === -1)
        return true;
      return index > t1 === _this._overflowOpen;
    },
    _placeChildren$0() {
      var t2, t3, t4, t5, _this = this, t1 = {};
      t1.i = -1;
      t1.nextSize = C.Size_0_0;
      t1.fitWidth = 0;
      t2 = _this.ContainerRenderObjectMixin__firstChild;
      t2.toString;
      t1.overflowHeight = _this._overflowOpen && !_this._isAbove ? t2._size._dy : 0;
      _this.visitChildren$1(new A._RenderTextSelectionToolbarItemsLayout__placeChildren_closure(t1, _this, t2));
      t3 = t2.parentData;
      t3.toString;
      type$.ToolbarItemsParentData._as(t3);
      t4 = _this.ContainerRenderObjectMixin__firstChild;
      t4.toString;
      if (_this._shouldPaintChild$2(t4, 0)) {
        t3.shouldPaint = true;
        if (_this._overflowOpen) {
          t4 = _this._isAbove;
          t3.offset = t4 ? new B.Offset(0, t1.overflowHeight) : C.Offset_0_0;
          t3 = t1.nextSize;
          t5 = t3._dy;
          t2 = t4 ? t5 + t2._size._dy : t5;
          t1.nextSize = new B.Size(t3._dx, t2);
        } else {
          t3.offset = new B.Offset(t1.fitWidth, 0);
          t3 = t1.nextSize;
          t1.nextSize = new B.Size(t3._dx + t2._size._dx, t3._dy);
        }
      } else
        t3.shouldPaint = false;
      _this._size = t1.nextSize;
    },
    performLayout$0() {
      var t1, _this = this;
      _this._lastIndexThatFits = -1;
      if (_this.ContainerRenderObjectMixin__firstChild == null) {
        t1 = type$.BoxConstraints._as(B.RenderObject.prototype.get$constraints.call(_this));
        _this._size = new B.Size(B.clampDouble(0, t1.minWidth, t1.maxWidth), B.clampDouble(0, t1.minHeight, t1.maxHeight));
        return;
      }
      _this._text_selection_toolbar$_layoutChildren$0();
      _this._placeChildren$0();
    },
    paint$2(context, offset) {
      this.visitChildren$1(new A._RenderTextSelectionToolbarItemsLayout_paint_closure(context, offset));
    },
    setupParentData$1(child) {
      type$.RenderBox._as(child);
      if (!(child.parentData instanceof A.ToolbarItemsParentData))
        child.parentData = new A.ToolbarItemsParentData(null, null, C.Offset_0_0);
    },
    hitTestChildren$2$position(result, position) {
      var t2, child, _box_0 = {},
        t1 = _box_0.child = this.ContainerRenderObjectMixin__lastChild;
      for (t2 = type$.ToolbarItemsParentData; t1 != null;) {
        t1 = t1.parentData;
        t1.toString;
        t2._as(t1);
        if (!t1.shouldPaint) {
          child = t1.ContainerParentDataMixin_previousSibling;
          _box_0.child = child;
          t1 = child;
          continue;
        }
        if (result.addWithPaintOffset$3$hitTest$offset$position(new A._RenderTextSelectionToolbarItemsLayout_hitTestChildren_closure(_box_0, position, t1), t1.offset, position))
          return true;
        child = t1.ContainerParentDataMixin_previousSibling;
        _box_0.child = child;
        t1 = child;
      }
      return false;
    },
    visitChildrenForSemantics$1(visitor) {
      this.visitChildren$1(new A._RenderTextSelectionToolbarItemsLayout_visitChildrenForSemantics_closure(type$.void_Function_RenderObject._as(visitor)));
    }
  };
  A._TextSelectionToolbarContainer.prototype = {
    build$1(context) {
      var _null = null;
      return B.Material$(C.Duration_200000, D.BorderRadius_tLn1, this.child, C.Clip_2, _null, 1, _null, _null, _null, _null, _null, C.MaterialType_1);
    }
  };
  A._TextSelectionToolbarOverflowButton.prototype = {
    build$1(context) {
      var _null = null;
      return B.Material$(C.Duration_200000, _null, F.IconButton$(_null, this.icon, _null, this.onPressed, this.tooltip), C.Clip_0, C.Color_0, 0, _null, _null, _null, _null, _null, C.MaterialType_1);
    }
  };
  A.__RenderTextSelectionToolbarItemsLayout_RenderBox_ContainerRenderObjectMixin.prototype = {
    attach$1(owner) {
      var child, t1, t2;
      type$.PipelineOwner._as(owner);
      this.super$RenderObject$attach(owner);
      child = this.ContainerRenderObjectMixin__firstChild;
      for (t1 = type$.ToolbarItemsParentData; child != null;) {
        child.attach$1(owner);
        t2 = child.parentData;
        t2.toString;
        child = t1._as(t2).ContainerParentDataMixin_nextSibling;
      }
    },
    detach$0(_) {
      var child, t1, t2;
      this.super$AbstractNode$detach(0);
      child = this.ContainerRenderObjectMixin__firstChild;
      for (t1 = type$.ToolbarItemsParentData; child != null;) {
        child.detach$0(0);
        t2 = child.parentData;
        t2.toString;
        child = t1._as(t2).ContainerParentDataMixin_nextSibling;
      }
    }
  };
  A.__TextSelectionToolbarOverflowableState_State_TickerProviderStateMixin.prototype = {
    activate$0() {
      this.super$State$activate();
      this._updateTickerModeNotifier$0();
      this._updateTickers$0();
    },
    dispose$0() {
      var _this = this,
        t1 = _this.TickerProviderStateMixin__tickerModeNotifier;
      if (t1 != null)
        t1.removeListener$1(0, _this.get$_updateTickers());
      _this.set$_tickerModeNotifier(null);
      _this.super$State$dispose();
    }
  };
  A._TextSelectionToolbarItemPosition.prototype = {
    _enumToString$0() {
      return "_TextSelectionToolbarItemPosition." + this._core$_name;
    }
  };
  A.TextSelectionToolbarTextButton.prototype = {
    build$1(context) {
      var _null = null,
        foregroundColor = B.Theme_of(context).colorScheme.brightness === C.Brightness_0 ? C.Color_4294967295 : C.Color_3707764736;
      return A.TextButton$(this.child, this.onPressed, E.TextButton_styleFrom(_null, _null, _null, _null, _null, _null, _null, _null, _null, foregroundColor, _null, D.Size_48_48, this.padding, _null, C.RoundedRectangleBorder_27D, _null, _null, _null, _null));
    }
  };
  A.TextAlignVertical.prototype = {
    toString$0(_) {
      return "TextAlignVertical(y: " + this.y + ")";
    }
  };
  A.PlaceholderSpan.prototype = {
    computeToPlainText$3$includePlaceholders$includeSemanticsLabels(buffer, includePlaceholders, includeSemanticsLabels) {
      buffer._contents += B.Primitives_stringFromCharCode(65532);
    },
    computeSemanticsInformation$1(collector) {
      C.JSArray_methods.add$1(type$.List_InlineSpanSemanticsInformation._as(collector), D.InlineSpanSemanticsInformation_o8k);
    }
  };
  A.ShapeDecoration.prototype = {
    getClipPath$2(rect, textDirection) {
      return this.shape.getOuterPath$2$textDirection(rect, textDirection);
    },
    get$padding(_) {
      return this.shape.get$dimensions();
    },
    get$isComplex() {
      return this.shadows != null;
    },
    lerpFrom$2(a, t) {
      if (a instanceof B.BoxDecoration)
        return A.ShapeDecoration_lerp(A.ShapeDecoration_ShapeDecoration$fromBoxDecoration(a), this, t);
      else if (a == null || a instanceof A.ShapeDecoration)
        return A.ShapeDecoration_lerp(type$.nullable_ShapeDecoration._as(a), this, t);
      return this.super$Decoration$lerpFrom(a, t);
    },
    lerpTo$2(b, t) {
      if (b instanceof B.BoxDecoration)
        return A.ShapeDecoration_lerp(this, A.ShapeDecoration_ShapeDecoration$fromBoxDecoration(b), t);
      else if (b == null || b instanceof A.ShapeDecoration)
        return A.ShapeDecoration_lerp(this, type$.nullable_ShapeDecoration._as(b), t);
      return this.super$Decoration$lerpTo(b, t);
    },
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (J.get$runtimeType$(other) !== B.getRuntimeType(_this))
        return false;
      return other instanceof A.ShapeDecoration && J.$eq$(other.color, _this.color) && J.$eq$(other.image, _this.image) && B.listEquals(other.shadows, _this.shadows, type$.BoxShadow) && other.shape.$eq(0, _this.shape);
    },
    get$hashCode(_) {
      var _this = this,
        t1 = _this.shadows;
      t1 = t1 == null ? null : B.Object_hashAll(t1);
      return B.Object_hash(_this.color, _this.gradient, _this.image, _this.shape, t1, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue);
    },
    hitTest$3$textDirection(size, position, textDirection) {
      return this.shape.getOuterPath$2$textDirection(new B.Rect(0, 0, 0 + size._dx, 0 + size._dy), textDirection).contains$1(0, position);
    },
    createBoxPainter$1(onChanged) {
      return new A._ShapeDecorationPainter(this, type$.nullable_void_Function._as(onChanged));
    }
  };
  A._ShapeDecorationPainter.prototype = {
    _precache$2(rect, textDirection) {
      var t1, t2, t3, _this = this;
      if (rect.$eq(0, _this._lastRect) && textDirection == _this._lastTextDirection)
        return;
      if (_this._interiorPaint == null)
        t1 = _this._shape_decoration$_decoration.color != null || false;
      else
        t1 = false;
      if (t1) {
        t1 = $.$get$_renderer().createPaint$0();
        _this._interiorPaint = t1;
        t2 = _this._shape_decoration$_decoration.color;
        if (t2 != null)
          t1.set$color(0, t2);
      }
      t1 = _this._shape_decoration$_decoration;
      t2 = t1.shadows;
      if (t2 != null) {
        if (_this._shadowCount == null) {
          _this._shadowCount = t2.length;
          t3 = B._arrayInstanceType(t2);
          _this.set$___ShapeDecorationPainter__shadowPaints_A(type$.List_Paint._as(B.List_List$of(new B.MappedListIterable(t2, t3._eval$1("Paint(1)")._as(new A._ShapeDecorationPainter__precache_closure()), t3._eval$1("MappedListIterable<1,Paint>")), true, type$.Paint)));
        }
        if (t1.shape.get$preferPaintInterior()) {
          t3 = B._arrayInstanceType(t2);
          _this.set$___ShapeDecorationPainter__shadowBounds_A(type$.List_Rect._as(B.List_List$of(new B.MappedListIterable(t2, t3._eval$1("Rect(1)")._as(new A._ShapeDecorationPainter__precache_closure0(rect)), t3._eval$1("MappedListIterable<1,Rect>")), true, type$.Rect)));
        } else {
          t3 = B._arrayInstanceType(t2);
          _this.set$___ShapeDecorationPainter__shadowPaths_A(type$.List_Path._as(B.List_List$of(new B.MappedListIterable(t2, t3._eval$1("Path(1)")._as(new A._ShapeDecorationPainter__precache_closure1(_this, rect, textDirection)), t3._eval$1("MappedListIterable<1,Path>")), true, type$.Path)));
        }
      }
      t2 = t1.shape;
      if (!t2.get$preferPaintInterior())
        t3 = _this._interiorPaint != null || _this._shadowCount != null;
      else
        t3 = false;
      if (t3)
        _this.___ShapeDecorationPainter__outerPath_A = t2.getOuterPath$2$textDirection(rect, textDirection);
      if (t1.image != null)
        _this._innerPath = t2.getInnerPath$2$textDirection(rect, textDirection);
      _this._lastRect = rect;
      _this._lastTextDirection = textDirection;
    },
    _shape_decoration$_paintShadows$3(canvas, rect, textDirection) {
      var t1, index, t2, t3, _this = this,
        _s13_ = "_shadowPaints";
      if (_this._shadowCount != null) {
        t1 = _this._shape_decoration$_decoration.shape;
        if (t1.get$preferPaintInterior()) {
          index = 0;
          while (true) {
            t2 = _this._shadowCount;
            t2.toString;
            if (!(index < t2))
              break;
            t2 = _this.___ShapeDecorationPainter__shadowBounds_A;
            t2 === $ && B.throwLateFieldNI("_shadowBounds");
            if (!(index < t2.length))
              return B.ioore(t2, index);
            t2 = t2[index];
            t3 = _this.___ShapeDecorationPainter__shadowPaints_A;
            t3 === $ && B.throwLateFieldNI(_s13_);
            if (!(index < t3.length))
              return B.ioore(t3, index);
            t1.paintInterior$4$textDirection(canvas, t2, t3[index], textDirection);
            ++index;
          }
        } else {
          index = 0;
          while (true) {
            t1 = _this._shadowCount;
            t1.toString;
            if (!(index < t1))
              break;
            t1 = _this.___ShapeDecorationPainter__shadowPaths_A;
            t1 === $ && B.throwLateFieldNI("_shadowPaths");
            if (!(index < t1.length))
              return B.ioore(t1, index);
            t1 = t1[index];
            t2 = _this.___ShapeDecorationPainter__shadowPaints_A;
            t2 === $ && B.throwLateFieldNI(_s13_);
            if (!(index < t2.length))
              return B.ioore(t2, index);
            canvas.drawPath$2(t1, t2[index]);
            ++index;
          }
        }
      }
    },
    _paintImage$2(canvas, configuration) {
      var t2, _this = this,
        t1 = _this._shape_decoration$_decoration.image;
      if (t1 == null)
        return;
      t2 = _this._imagePainter;
      if (t2 == null) {
        t2 = _this.onChanged;
        t2.toString;
        t2 = _this._imagePainter = t1.createPainter$1(t2);
        t1 = t2;
      } else
        t1 = t2;
      t2 = _this._lastRect;
      t2.toString;
      t1.paint$4(canvas, t2, _this._innerPath, configuration);
    },
    dispose$0() {
      var t1 = this._imagePainter;
      if (t1 != null)
        t1.dispose$0();
      this.super$BoxPainter$dispose();
    },
    paint$3(canvas, offset, configuration) {
      var _this = this,
        t1 = configuration.size,
        t2 = offset._dx,
        t3 = offset._dy,
        rect = new B.Rect(t2, t3, t2 + t1._dx, t3 + t1._dy),
        textDirection = configuration.textDirection;
      _this._precache$2(rect, textDirection);
      _this._shape_decoration$_paintShadows$3(canvas, rect, textDirection);
      if (_this._interiorPaint != null) {
        t1 = _this._shape_decoration$_decoration.shape;
        t2 = t1.get$preferPaintInterior();
        t3 = _this._interiorPaint;
        if (t2) {
          t3.toString;
          t1.paintInterior$4$textDirection(canvas, rect, t3, textDirection);
        } else {
          t1 = _this.___ShapeDecorationPainter__outerPath_A;
          t1 === $ && B.throwLateFieldNI("_outerPath");
          t3.toString;
          canvas.drawPath$2(t1, t3);
        }
      }
      _this._paintImage$2(canvas, configuration);
      _this._shape_decoration$_decoration.shape.paint$3$textDirection(canvas, rect, textDirection);
    },
    set$___ShapeDecorationPainter__shadowBounds_A(___ShapeDecorationPainter__shadowBounds_A) {
      this.___ShapeDecorationPainter__shadowBounds_A = type$.List_Rect._as(___ShapeDecorationPainter__shadowBounds_A);
    },
    set$___ShapeDecorationPainter__shadowPaths_A(___ShapeDecorationPainter__shadowPaths_A) {
      this.___ShapeDecorationPainter__shadowPaths_A = type$.List_Path._as(___ShapeDecorationPainter__shadowPaths_A);
    },
    set$___ShapeDecorationPainter__shadowPaints_A(___ShapeDecorationPainter__shadowPaints_A) {
      this.___ShapeDecorationPainter__shadowPaints_A = type$.List_Paint._as(___ShapeDecorationPainter__shadowPaints_A);
    }
  };
  A.StrutStyle.prototype = {
    get$fontFamilyFallback() {
      return this._strut_style$_fontFamilyFallback;
    },
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (J.get$runtimeType$(other) !== B.getRuntimeType(_this))
        return false;
      return other instanceof A.StrutStyle && other.fontFamily == _this.fontFamily && other.fontSize == _this.fontSize && other.fontWeight == _this.fontWeight && other.fontStyle == _this.fontStyle && other.height == _this.height && other.leading == _this.leading && other.forceStrutHeight == _this.forceStrutHeight;
    },
    get$hashCode(_) {
      var _this = this;
      return B.Object_hash(_this.fontFamily, _this.fontSize, _this.fontWeight, _this.fontStyle, _this.height, _this.leading, _this.forceStrutHeight, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue);
    },
    toStringShort$0() {
      return "StrutStyle";
    }
  };
  A._StrutStyle_Object_Diagnosticable.prototype = {};
  A.RenderAnimatedSizeState.prototype = {
    _enumToString$0() {
      return "RenderAnimatedSizeState." + this._core$_name;
    }
  };
  A.RenderAnimatedSize.prototype = {
    RenderAnimatedSize$8$alignment$child$clipBehavior$curve$duration$reverseDuration$textDirection$vsync(alignment, child, clipBehavior, curve, duration, reverseDuration, textDirection, vsync) {
      var t3, _this = this,
        t1 = B.AnimationController$(null, duration, reverseDuration, null, vsync),
        t2 = type$.void_Function._as(new A.RenderAnimatedSize_closure(_this));
      t1.didRegisterListener$0();
      t3 = t1.AnimationLocalListenersMixin__listeners;
      t3.$ti._precomputed1._as(t2);
      t3._isDirty = true;
      C.JSArray_methods.add$1(t3._list, t2);
      _this.__RenderAnimatedSize__controller_F !== $ && B.throwLateFieldAI("_controller");
      _this.__RenderAnimatedSize__controller_F = t1;
      t1 = B.CurvedAnimation$(curve, t1, null);
      _this.__RenderAnimatedSize__animation_F !== $ && B.throwLateFieldAI("_animation");
      _this.__RenderAnimatedSize__animation_F = t1;
    },
    set$duration(_, value) {
      var t1 = this.__RenderAnimatedSize__controller_F;
      t1 === $ && B.throwLateFieldNI("_controller");
      if (value.$eq(0, t1.duration))
        return;
      t1.duration = value;
    },
    set$reverseDuration(value) {
      var t1 = this.__RenderAnimatedSize__controller_F;
      t1 === $ && B.throwLateFieldNI("_controller");
      if (value == t1.reverseDuration)
        return;
      t1.reverseDuration = value;
    },
    set$curve(_, value) {
      var t1 = this.__RenderAnimatedSize__animation_F;
      t1 === $ && B.throwLateFieldNI("_animation");
      if (value === t1.curve)
        return;
      t1.curve = value;
    },
    set$vsync(value) {
      var t1, t2, t3;
      if (value === this._vsync)
        return;
      this._vsync = value;
      t1 = this.__RenderAnimatedSize__controller_F;
      t1 === $ && B.throwLateFieldNI("_controller");
      t2 = t1._ticker;
      t2.toString;
      t1 = t1._ticker = value.createTicker$1(t1.get$_animation_controller$_tick());
      t3 = t2._ticker$_future;
      if (t3 != null) {
        t1._ticker$_future = t3;
        t1._startTime = t2._startTime;
        if (!t1._muted)
          t3 = t1._animationId == null;
        else
          t3 = false;
        if (t3)
          t1._animationId = $.SchedulerBinding__instance.scheduleFrameCallback$2$rescheduling(t1.get$_ticker$_tick(), false);
        t2._ticker$_future = null;
        t2.unscheduleTick$0();
      }
      t2.dispose$0();
    },
    attach$1(owner) {
      this.super$_RenderShiftedBox_RenderBox_RenderObjectWithChildMixin$attach(type$.PipelineOwner._as(owner));
      switch (this._animated_size$_state.index) {
        case 0:
        case 1:
          break;
        case 2:
        case 3:
          this.markNeedsLayout$0();
          break;
      }
    },
    detach$0(_) {
      var t1 = this.__RenderAnimatedSize__controller_F;
      t1 === $ && B.throwLateFieldNI("_controller");
      t1.stop$0(0);
      this.super$_RenderShiftedBox_RenderBox_RenderObjectWithChildMixin$detach(0);
    },
    performLayout$0() {
      var t2, constraints, t3, t4, _this = this,
        t1 = _this.__RenderAnimatedSize__controller_F;
      t1 === $ && B.throwLateFieldNI("_controller");
      t2 = t1.__AnimationController__value_A;
      t2 === $ && B.throwLateFieldNI("_value");
      _this._animated_size$_lastValue = t2;
      _this.__RenderAnimatedSize__hasVisualOverflow_A = false;
      constraints = type$.BoxConstraints._as(B.RenderObject.prototype.get$constraints.call(_this));
      t2 = _this.RenderObjectWithChildMixin__child;
      if (t2 != null)
        t3 = constraints.minWidth >= constraints.maxWidth && constraints.minHeight >= constraints.maxHeight;
      else
        t3 = true;
      if (t3) {
        t1.stop$0(0);
        t1 = _this._sizeTween;
        t2 = new B.Size(B.clampDouble(0, constraints.minWidth, constraints.maxWidth), B.clampDouble(0, constraints.minHeight, constraints.maxHeight));
        t1.set$end(0, t2);
        t1.set$begin(t2);
        _this._size = t2;
        _this._animated_size$_state = D.RenderAnimatedSizeState_0;
        t2 = _this.RenderObjectWithChildMixin__child;
        if (t2 != null)
          t2.layout$1(constraints);
        return;
      }
      t2.layout$2$parentUsesSize(constraints, true);
      switch (_this._animated_size$_state.index) {
        case 0:
          t1 = _this._sizeTween;
          t2 = _this.RenderObjectWithChildMixin__child._size;
          t2.toString;
          t1.set$end(0, t2);
          t1.set$begin(t2);
          _this._animated_size$_state = D.RenderAnimatedSizeState_1;
          break;
        case 1:
          t2 = _this._sizeTween;
          t3 = t2.end;
          t4 = _this.RenderObjectWithChildMixin__child._size;
          t4.toString;
          if (!J.$eq$(t3, t4)) {
            t3 = _this._size;
            t3.toString;
            t2.set$begin(t3);
            t3 = _this.RenderObjectWithChildMixin__child._size;
            t3.toString;
            t2.set$end(0, t3);
            _this._animated_size$_lastValue = 0;
            t1.forward$1$from(0, 0);
            _this._animated_size$_state = D.RenderAnimatedSizeState_2;
          } else {
            t3 = t1.__AnimationController__value_A;
            t3 === $ && B.throwLateFieldNI("_value");
            if (t3 === t1.upperBound) {
              t1 = _this.RenderObjectWithChildMixin__child._size;
              t1.toString;
              t2.set$end(0, t1);
              t2.set$begin(t1);
            } else {
              t2 = t1._ticker;
              if (!(t2 != null && t2._ticker$_future != null))
                t1.forward$0(0);
            }
          }
          break;
        case 2:
          t2 = _this._sizeTween;
          t3 = t2.end;
          t4 = _this.RenderObjectWithChildMixin__child._size;
          t4.toString;
          if (!J.$eq$(t3, t4)) {
            t3 = _this.RenderObjectWithChildMixin__child._size;
            t3.toString;
            t2.set$end(0, t3);
            t2.set$begin(t3);
            _this._animated_size$_lastValue = 0;
            t1.forward$1$from(0, 0);
            _this._animated_size$_state = D.RenderAnimatedSizeState_3;
          } else {
            _this._animated_size$_state = D.RenderAnimatedSizeState_1;
            t2 = t1._ticker;
            if (!(t2 != null && t2._ticker$_future != null))
              t1.forward$0(0);
          }
          break;
        case 3:
          t2 = _this._sizeTween;
          t3 = t2.end;
          t4 = _this.RenderObjectWithChildMixin__child._size;
          t4.toString;
          if (!J.$eq$(t3, t4)) {
            t3 = _this.RenderObjectWithChildMixin__child._size;
            t3.toString;
            t2.set$end(0, t3);
            t2.set$begin(t3);
            _this._animated_size$_lastValue = 0;
            t1.forward$1$from(0, 0);
          } else {
            t1.stop$0(0);
            _this._animated_size$_state = D.RenderAnimatedSizeState_1;
          }
          break;
      }
      t1 = _this._sizeTween;
      t2 = _this.__RenderAnimatedSize__animation_F;
      t2 === $ && B.throwLateFieldNI("_animation");
      type$.Animation_double._as(t2);
      t2 = t1.transform$1(0, t2.get$value(t2));
      t2.toString;
      _this._size = constraints.constrain$1(t2);
      _this.alignChild$0();
      t2 = _this._size;
      t3 = t2._dx;
      t1 = t1.end;
      if (t3 < t1._dx || t2._dy < t1._dy)
        _this.__RenderAnimatedSize__hasVisualOverflow_A = true;
    },
    computeDryLayout$1(constraints) {
      var t2, childSize, _this = this,
        t1 = _this.RenderObjectWithChildMixin__child;
      if (t1 != null)
        t2 = constraints.minWidth >= constraints.maxWidth && constraints.minHeight >= constraints.maxHeight;
      else
        t2 = true;
      if (t2)
        return new B.Size(B.clampDouble(0, constraints.minWidth, constraints.maxWidth), B.clampDouble(0, constraints.minHeight, constraints.maxHeight));
      childSize = t1.getDryLayout$1(constraints);
      switch (_this._animated_size$_state.index) {
        case 0:
          return constraints.constrain$1(childSize);
        case 1:
          if (!J.$eq$(_this._sizeTween.end, childSize)) {
            t1 = _this._size;
            t1.toString;
            return constraints.constrain$1(t1);
          } else {
            t1 = _this.__RenderAnimatedSize__controller_F;
            t1 === $ && B.throwLateFieldNI("_controller");
            t2 = t1.__AnimationController__value_A;
            t2 === $ && B.throwLateFieldNI("_value");
            if (t2 === t1.upperBound)
              return constraints.constrain$1(childSize);
          }
          break;
        case 3:
        case 2:
          if (!J.$eq$(_this._sizeTween.end, childSize))
            return constraints.constrain$1(childSize);
          break;
      }
      t1 = _this.__RenderAnimatedSize__animation_F;
      t1 === $ && B.throwLateFieldNI("_animation");
      type$.Animation_double._as(t1);
      t1 = _this._sizeTween.transform$1(0, t1.get$value(t1));
      t1.toString;
      return constraints.constrain$1(t1);
    },
    paint$2(context, offset) {
      var t1, t2, t3, t4, _this = this;
      if (_this.RenderObjectWithChildMixin__child != null) {
        t1 = _this.__RenderAnimatedSize__hasVisualOverflow_A;
        t1 === $ && B.throwLateFieldNI("_hasVisualOverflow");
        t1 = t1 && _this._animated_size$_clipBehavior !== C.Clip_0;
      } else
        t1 = false;
      t2 = _this._animated_size$_clipRectLayer;
      if (t1) {
        t1 = _this._size;
        t3 = t1._dx;
        t1 = t1._dy;
        t4 = _this.__RenderObject__needsCompositing_A;
        t4 === $ && B.throwLateFieldNI("_needsCompositing");
        t2.set$layer(0, context.pushClipRect$6$clipBehavior$oldLayer(t4, offset, new B.Rect(0, 0, 0 + t3, 0 + t1), B.RenderShiftedBox.prototype.get$paint.call(_this), _this._animated_size$_clipBehavior, t2._layer));
      } else {
        t2.set$layer(0, null);
        _this.super$RenderShiftedBox$paint(context, offset);
      }
    },
    dispose$0() {
      this._animated_size$_clipRectLayer.set$layer(0, null);
      this.super$RenderObject$dispose();
    }
  };
  A.TextSelectionPoint.prototype = {
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (J.get$runtimeType$(other) !== B.getRuntimeType(_this))
        return false;
      return other instanceof A.TextSelectionPoint && other.point.$eq(0, _this.point) && other.direction == _this.direction;
    },
    toString$0(_) {
      var _this = this;
      switch (_this.direction) {
        case C.TextDirection_1:
          return _this.point.toString$0(0) + "-ltr";
        case C.TextDirection_0:
          return _this.point.toString$0(0) + "-rtl";
        case null:
          return _this.point.toString$0(0);
      }
    },
    get$hashCode(_) {
      return B.Object_hash(this.point, this.direction, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue);
    }
  };
  A.VerticalCaretMovementRun.prototype = {
    get$isValid() {
      var _this = this;
      if (!_this._isValid)
        return false;
      if (_this._editable._editable$_textPainter.computeLineMetrics$0() !== _this._lineMetrics)
        _this._isValid = false;
      return _this._isValid;
    },
    _getTextPositionForLine$1(lineNumber) {
      var t2, t3, newOffset, position, _this = this,
        t1 = _this._positionCache,
        cachedPosition = t1.$index(0, lineNumber);
      if (cachedPosition != null)
        return cachedPosition;
      t2 = _this._currentOffset;
      t3 = _this._lineMetrics;
      if (!(lineNumber >= 0 && lineNumber < t3.length))
        return B.ioore(t3, lineNumber);
      newOffset = new B.Offset(t2._dx, t3[lineNumber].get$baseline());
      position = new B.MapEntry(newOffset, _this._editable._editable$_textPainter._paragraph.getPositionForOffset$1(newOffset), type$.MapEntry_Offset_TextPosition);
      t1.$indexSet(0, lineNumber, position);
      return position;
    },
    get$current(_) {
      return this._currentTextPosition;
    },
    moveNext$0() {
      var position, _this = this,
        t1 = _this._currentLine + 1;
      if (t1 >= _this._lineMetrics.length)
        return false;
      position = _this._getTextPositionForLine$1(t1);
      ++_this._currentLine;
      _this.set$_currentOffset(position.key);
      _this.set$_currentTextPosition(position.value);
      return true;
    },
    movePrevious$0() {
      var position, _this = this,
        t1 = _this._currentLine;
      if (t1 <= 0)
        return false;
      position = _this._getTextPositionForLine$1(t1 - 1);
      --_this._currentLine;
      _this.set$_currentOffset(position.key);
      _this.set$_currentTextPosition(position.value);
      return true;
    },
    moveByOffset$1(offset) {
      var t1, _this = this,
        initialOffset = _this._currentOffset;
      if (offset >= 0) {
        for (t1 = initialOffset._dy + offset; _this._currentOffset._dy < t1;)
          if (!_this.moveNext$0())
            break;
      } else
        for (t1 = initialOffset._dy + offset; _this._currentOffset._dy > t1;)
          if (!_this.movePrevious$0())
            break;
      return !initialOffset.$eq(0, _this._currentOffset);
    },
    set$_currentOffset(_currentOffset) {
      this._currentOffset = type$.Offset._as(_currentOffset);
    },
    set$_currentTextPosition(_currentTextPosition) {
      this._currentTextPosition = type$.TextPosition._as(_currentTextPosition);
    }
  };
  A.RenderEditable.prototype = {
    setupParentData$1(child) {
      type$.RenderBox._as(child);
      if (!(child.parentData instanceof B.TextParentData))
        child.parentData = new B.TextParentData(null, null, C.Offset_0_0);
    },
    dispose$0() {
      var _this = this,
        t1 = _this._foregroundRenderObject;
      if (t1 != null)
        t1.dispose$0();
      _this._foregroundRenderObject = null;
      t1 = _this._backgroundRenderObject;
      if (t1 != null)
        t1.dispose$0();
      _this._backgroundRenderObject = null;
      _this._editable$_clipRectLayer.set$layer(0, null);
      t1 = _this._cachedBuiltInForegroundPainters;
      if (t1 != null)
        t1.dispose$0();
      t1 = _this._cachedBuiltInPainters;
      if (t1 != null)
        t1.dispose$0();
      _this._selectionStartInViewport.dispose$0();
      _this._selectionEndInViewport.dispose$0();
      _this._autocorrectHighlightPainter.dispose$0();
      _this._selectionPainter.dispose$0();
      _this.get$_caretPainter().dispose$0();
      _this._editable$_textPainter.dispose$0();
      _this.super$RenderObject$dispose();
    },
    _updateForegroundPainter$1(newPainter) {
      var foregroundRenderObject, _this = this,
        effectivePainter = _this.get$_builtInForegroundPainters(),
        t1 = _this._foregroundRenderObject;
      if (t1 == null) {
        foregroundRenderObject = A._RenderEditableCustomPaint$(effectivePainter);
        _this.adoptChild$1(foregroundRenderObject);
        _this._foregroundRenderObject = foregroundRenderObject;
      } else
        t1.set$painter(effectivePainter);
      _this._editable$_foregroundPainter = newPainter;
    },
    _editable$_extractPlaceholderSpans$1(span) {
      this.set$__RenderEditable__placeholderSpans_A(type$.List_PlaceholderSpan._as(B._setArrayType([], type$.JSArray_PlaceholderSpan)));
      span.visitChildren$1(new A.RenderEditable__extractPlaceholderSpans_closure(this));
    },
    _updatePainter$1(newPainter) {
      var backgroundRenderObject, _this = this,
        effectivePainter = _this.get$_builtInPainters(),
        t1 = _this._backgroundRenderObject;
      if (t1 == null) {
        backgroundRenderObject = A._RenderEditableCustomPaint$(effectivePainter);
        _this.adoptChild$1(backgroundRenderObject);
        _this._backgroundRenderObject = backgroundRenderObject;
      } else
        t1.set$painter(effectivePainter);
      _this._editable$_painter = newPainter;
    },
    get$_caretPainter() {
      var t1, t2, _this = this,
        value = _this.__RenderEditable__caretPainter_FI;
      if (value === $) {
        t1 = $.$get$_renderer().createPaint$0();
        t2 = $.$get$ChangeNotifier__emptyListeners();
        _this.__RenderEditable__caretPainter_FI !== $ && B.throwLateFieldADI("_caretPainter");
        value = _this.__RenderEditable__caretPainter_FI = new A._FloatingCursorPainter(_this.get$_onCaretChanged(), t1, C.Offset_0_0, t2);
      }
      return value;
    },
    get$_builtInForegroundPainters() {
      var _this = this,
        t1 = _this._cachedBuiltInForegroundPainters;
      if (t1 == null) {
        t1 = B._setArrayType([], type$.JSArray_RenderEditablePainter);
        if (_this._paintCursorOnTop)
          t1.push(_this.get$_caretPainter());
        t1 = _this._cachedBuiltInForegroundPainters = new A._CompositeRenderEditablePainter(t1, $.$get$ChangeNotifier__emptyListeners());
      }
      return t1;
    },
    get$_builtInPainters() {
      var _this = this,
        t1 = _this._cachedBuiltInPainters;
      if (t1 == null) {
        t1 = B._setArrayType([_this._autocorrectHighlightPainter, _this._selectionPainter], type$.JSArray_RenderEditablePainter);
        if (!_this._paintCursorOnTop)
          t1.push(_this.get$_caretPainter());
        t1 = _this._cachedBuiltInPainters = new A._CompositeRenderEditablePainter(t1, $.$get$ChangeNotifier__emptyListeners());
      }
      return t1;
    },
    _onCaretChanged$1(caretRect) {
      if (!J.$eq$(this._lastCaretRect, caretRect))
        this.onCaretChanged.call$1(caretRect);
      this._lastCaretRect = caretRect;
    },
    set$textHeightBehavior(value) {
      return;
    },
    set$textWidthBasis(value) {
      var t1 = this._editable$_textPainter;
      if (t1._textWidthBasis === value)
        return;
      t1.set$textWidthBasis(value);
      this.markNeedsTextLayout$0();
    },
    set$devicePixelRatio(_, value) {
      if (this._editable$_devicePixelRatio === value)
        return;
      this._editable$_devicePixelRatio = value;
      this.markNeedsTextLayout$0();
    },
    set$obscuringCharacter(value) {
      if (this._obscuringCharacter === value)
        return;
      this._obscuringCharacter = value;
      this.markNeedsLayout$0();
    },
    set$obscureText(value) {
      return;
    },
    getLineAtOffset$1(position) {
      var line = this._editable$_textPainter._paragraph.getLineBoundary$1(position);
      return B.TextSelection$(C.TextAffinity_1, line.start, line.end, false);
    },
    getWordBoundary$1(position) {
      return this._editable$_textPainter._paragraph.getWordBoundary$1(position);
    },
    _setSelection$2(nextSelection, cause) {
      var textLength, t1;
      if (nextSelection.get$isValid()) {
        textLength = this.textSelectionDelegate._widget.controller._change_notifier$_value.text.length;
        nextSelection = nextSelection.copyWith$2$baseOffset$extentOffset(Math.min(nextSelection.baseOffset, textLength), Math.min(nextSelection.extentOffset, textLength));
      }
      t1 = this.textSelectionDelegate._widget.controller._change_notifier$_value.copyWith$1$selection(nextSelection);
      this.textSelectionDelegate.userUpdateTextEditingValue$2(t1, cause);
    },
    markNeedsPaint$0() {
      this.super$RenderObject$markNeedsPaint();
      var t1 = this._foregroundRenderObject;
      if (t1 != null)
        t1.markNeedsPaint$0();
      t1 = this._backgroundRenderObject;
      if (t1 != null)
        t1.markNeedsPaint$0();
    },
    markNeedsTextLayout$0() {
      this._textLayoutLastMinWidth = this._textLayoutLastMaxWidth = null;
      this.markNeedsLayout$0();
    },
    systemFontsDidChange$0() {
      var _this = this;
      _this.super$RelayoutWhenSystemFontsChangeMixin$systemFontsDidChange();
      _this._editable$_textPainter.markNeedsLayout$0();
      _this._textLayoutLastMinWidth = _this._textLayoutLastMaxWidth = null;
    },
    set$text(_, value) {
      var _this = this,
        t1 = _this._editable$_textPainter;
      if (J.$eq$(t1._text_painter$_text, value))
        return;
      _this._cachedLineBreakCount = null;
      t1.set$text(0, value);
      _this._cachedAttributedValue = null;
      _this.set$_editable$_cachedCombinedSemanticsInfos(null);
      _this._editable$_extractPlaceholderSpans$1(value);
      _this.markNeedsTextLayout$0();
      _this.markNeedsSemanticsUpdate$0();
    },
    set$textAlign(_, value) {
      var t1 = this._editable$_textPainter;
      if (t1._textAlign === value)
        return;
      t1.set$textAlign(0, value);
      this.markNeedsTextLayout$0();
    },
    set$textDirection(value) {
      var t1 = this._editable$_textPainter;
      if (t1._text_painter$_textDirection === value)
        return;
      t1.set$textDirection(value);
      this.markNeedsTextLayout$0();
      this.markNeedsSemanticsUpdate$0();
    },
    set$locale(_, value) {
      var t1 = this._editable$_textPainter;
      if (J.$eq$(t1._text_painter$_locale, value))
        return;
      t1.set$locale(0, value);
      this.markNeedsTextLayout$0();
    },
    set$strutStyle(value) {
      var t1 = this._editable$_textPainter;
      if (J.$eq$(t1._strutStyle, value))
        return;
      t1.set$strutStyle(value);
      this.markNeedsTextLayout$0();
    },
    set$showCursor(value) {
      var t1, _this = this;
      type$.ValueNotifier_bool._as(value);
      t1 = _this._showCursor;
      if (t1 === value)
        return;
      if (_this._node$_owner != null)
        t1.removeListener$1(0, _this.get$_showHideCursor());
      _this.set$_showCursor(value);
      if (_this._node$_owner != null) {
        _this.get$_caretPainter().set$shouldPaint(_this._showCursor._change_notifier$_value);
        _this._showCursor.addListener$1(0, _this.get$_showHideCursor());
      }
    },
    _showHideCursor$0() {
      this.get$_caretPainter().set$shouldPaint(this._showCursor._change_notifier$_value);
    },
    set$hasFocus(value) {
      if (this._editable$_hasFocus === value)
        return;
      this._editable$_hasFocus = value;
      this.markNeedsSemanticsUpdate$0();
    },
    set$forceLine(value) {
      if (this._forceLine)
        return;
      this._forceLine = true;
      this.markNeedsLayout$0();
    },
    set$readOnly(_, value) {
      if (this._readOnly === value)
        return;
      this._readOnly = value;
      this.markNeedsSemanticsUpdate$0();
    },
    set$maxLines(value) {
      var t1, _this = this;
      if (_this._editable$_maxLines === value)
        return;
      _this._editable$_maxLines = value;
      t1 = value === 1 ? 1 : null;
      _this._editable$_textPainter.set$maxLines(t1);
      _this.markNeedsTextLayout$0();
    },
    set$minLines(value) {
      return;
    },
    set$expands(value) {
      return;
    },
    set$textScaleFactor(value) {
      var t1 = this._editable$_textPainter;
      if (t1._textScaleFactor === value)
        return;
      t1.set$textScaleFactor(value);
      this.markNeedsTextLayout$0();
    },
    set$selection(value) {
      var _this = this;
      if (_this._selection.$eq(0, value))
        return;
      _this._selection = value;
      _this._selectionPainter.set$highlightedRange(value);
      _this.markNeedsPaint$0();
      _this.markNeedsSemanticsUpdate$0();
    },
    set$offset(_, value) {
      var _this = this,
        t1 = _this._editable$_offset;
      if (t1 === value)
        return;
      if (_this._node$_owner != null)
        t1.removeListener$1(0, _this.get$markNeedsPaint());
      _this._editable$_offset = value;
      if (_this._node$_owner != null)
        value.addListener$1(0, _this.get$markNeedsPaint());
      _this.markNeedsLayout$0();
    },
    set$cursorWidth(value) {
      if (this._cursorWidth === value)
        return;
      this._cursorWidth = value;
      this.markNeedsLayout$0();
    },
    set$cursorHeight(value) {
      return;
    },
    set$paintCursorAboveText(value) {
      var _this = this;
      if (_this._paintCursorOnTop === value)
        return;
      _this._paintCursorOnTop = value;
      _this._cachedBuiltInPainters = _this._cachedBuiltInForegroundPainters = null;
      _this._updateForegroundPainter$1(_this._editable$_foregroundPainter);
      _this._updatePainter$1(_this._editable$_painter);
    },
    set$startHandleLayerLink(value) {
      if (this._editable$_startHandleLayerLink === value)
        return;
      this._editable$_startHandleLayerLink = value;
      this.markNeedsPaint$0();
    },
    set$endHandleLayerLink(value) {
      if (this._editable$_endHandleLayerLink === value)
        return;
      this._editable$_endHandleLayerLink = value;
      this.markNeedsPaint$0();
    },
    set$enableInteractiveSelection(value) {
      var _this = this;
      if (_this._enableInteractiveSelection === value)
        return;
      _this._enableInteractiveSelection = value;
      _this.markNeedsTextLayout$0();
      _this.markNeedsSemanticsUpdate$0();
    },
    get$selectionEnabled() {
      var t1 = this._enableInteractiveSelection;
      return t1;
    },
    getBoxesForSelection$1(selection) {
      var t1, t2, t3;
      this._computeTextMetricsIfNeeded$0();
      t1 = this._editable$_textPainter.getBoxesForSelection$1(selection);
      t2 = B._arrayInstanceType(t1);
      t3 = t2._eval$1("MappedListIterable<1,Rect>");
      return B.List_List$of(new B.MappedListIterable(t1, t2._eval$1("Rect(1)")._as(new A.RenderEditable_getBoxesForSelection_closure(this)), t3), true, t3._eval$1("ListIterable.E"));
    },
    describeSemanticsConfiguration$1(config) {
      var t1, t2, collector, buffer, attributes, t3, offset, _i, t4, info, label, t5, _i0, infoAttribute, originalRange, _this = this;
      _this.super$RenderObject$describeSemanticsConfiguration(config);
      t1 = _this._editable$_textPainter;
      t2 = t1._text_painter$_text;
      t2.toString;
      collector = B._setArrayType([], type$.JSArray_InlineSpanSemanticsInformation);
      t2.computeSemanticsInformation$1(collector);
      _this.set$_editable$_semanticsInfo(collector);
      t2 = _this._editable$_semanticsInfo;
      t2.toString;
      if (C.JSArray_methods.any$1(t2, new A.RenderEditable_describeSemanticsConfiguration_closure()) && B.defaultTargetPlatform() !== C.TargetPlatform_4) {
        config.explicitChildNodes = config._isSemanticBoundary = true;
        return;
      }
      t2 = _this._cachedAttributedValue;
      if (t2 == null) {
        buffer = new B.StringBuffer("");
        attributes = B._setArrayType([], type$.JSArray_StringAttribute);
        for (t2 = _this._editable$_semanticsInfo, t3 = t2.length, offset = 0, _i = 0, t4 = ""; _i < t2.length; t2.length === t3 || (0, B.throwConcurrentModificationError)(t2), ++_i) {
          info = t2[_i];
          label = info.semanticsLabel;
          if (label == null)
            label = info.text;
          for (t4 = info.stringAttributes, t5 = t4.length, _i0 = 0; _i0 < t4.length; t4.length === t5 || (0, B.throwConcurrentModificationError)(t4), ++_i0) {
            infoAttribute = t4[_i0];
            originalRange = infoAttribute.range;
            C.JSArray_methods.add$1(attributes, infoAttribute.copy$1$range(new B.TextRange(offset + originalRange.start, offset + originalRange.end)));
          }
          t4 = buffer._contents += label;
          offset += label.length;
        }
        t2 = new B.AttributedString(t4.charCodeAt(0) == 0 ? t4 : t4, attributes);
        _this._cachedAttributedValue = t2;
      }
      t2.toString;
      config._attributedValue = t2;
      config._hasBeenAnnotated = true;
      config._setFlag$2(C.SemanticsFlag_1024, false);
      config._setFlag$2(C.SemanticsFlag_524288, _this._editable$_maxLines !== 1);
      t2 = t1._text_painter$_textDirection;
      t2.toString;
      config._textDirection = t2;
      config._hasBeenAnnotated = true;
      config._setFlag$2(C.SemanticsFlag_32, _this._editable$_hasFocus);
      config._setFlag$2(C.SemanticsFlag_16, true);
      config._setFlag$2(C.SemanticsFlag_1048576, _this._readOnly);
      if (_this._editable$_hasFocus && _this.get$selectionEnabled())
        config.set$onSetSelection(_this.get$_handleSetSelection());
      if (_this._editable$_hasFocus && !_this._readOnly)
        config.set$onSetText(_this.get$_handleSetText());
      if (_this.get$selectionEnabled())
        t2 = _this._selection.get$isValid();
      else
        t2 = false;
      if (t2) {
        t2 = _this._selection;
        config._textSelection = t2;
        config._hasBeenAnnotated = true;
        if (t1.getOffsetBefore$1(t2.extentOffset) != null) {
          config.set$onMoveCursorBackwardByWord(_this.get$_handleMoveCursorBackwardByWord());
          config.set$onMoveCursorBackwardByCharacter(_this.get$_handleMoveCursorBackwardByCharacter());
        }
        if (t1.getOffsetAfter$1(_this._selection.extentOffset) != null) {
          config.set$onMoveCursorForwardByWord(_this.get$_handleMoveCursorForwardByWord());
          config.set$onMoveCursorForwardByCharacter(_this.get$_handleMoveCursorForwardByCharacter());
        }
      }
    },
    _handleSetText$1(text) {
      this.textSelectionDelegate.userUpdateTextEditingValue$2(new B.TextEditingValue(text, A.TextSelection$collapsed(C.TextAffinity_1, text.length), C.TextRange_m1_m1), C.SelectionChangedCause_4);
    },
    assembleSemanticsNode$3(node, config, children) {
      var newChildren, t1, t2, child, newChildCache, t3, t4, t5, t6, t7, t8, currentDirection, ordinal, start, placeholderIndex, childIndex, _i, info, start0, t9, t10, childNode, t11, t12, rects, rect, currentDirection0, t13, t14, currentRect, configuration, ordinal0, paintRect, newChild, it, key, _this = this, _null = null;
      type$.Iterable_SemanticsNode._as(children);
      newChildren = B._setArrayType([], type$.JSArray_SemanticsNode);
      t1 = _this._editable$_textPainter;
      t2 = t1._text_painter$_textDirection;
      t2.toString;
      child = _this.ContainerRenderObjectMixin__firstChild;
      newChildCache = B.LinkedHashMap_LinkedHashMap(_null, _null, _null, type$.Key, type$.SemanticsNode);
      if (_this._editable$_cachedCombinedSemanticsInfos == null) {
        t3 = _this._editable$_semanticsInfo;
        t3.toString;
        _this.set$_editable$_cachedCombinedSemanticsInfos(B.combineSemanticsInfo(t3));
      }
      for (t3 = _this._editable$_cachedCombinedSemanticsInfos, t4 = t3.length, t5 = type$.BoxConstraints, t6 = B._instanceType(_this), t7 = t6._eval$1("ContainerRenderObjectMixin.0"), t6 = t6._eval$1("ContainerRenderObjectMixin.1"), t8 = type$.TextParentData, currentDirection = t2, ordinal = 0, start = 0, placeholderIndex = 0, childIndex = 0, _i = 0; _i < t3.length; t3.length === t4 || (0, B.throwConcurrentModificationError)(t3), ++_i, start = start0) {
        info = t3[_i];
        t2 = info.text;
        start0 = start + t2.length;
        t9 = start < start0;
        t10 = t9 ? start : start0;
        t9 = t9 ? start0 : start;
        if (info.isPlaceholder) {
          t2 = "PlaceholderSpanIndexSemanticsTag(" + placeholderIndex + ")";
          while (true) {
            t9 = children.length;
            if (t9 > childIndex) {
              if (!(childIndex >= 0))
                return B.ioore(children, childIndex);
              t9 = children[childIndex].tags;
              t9 = t9 != null && t9.contains$1(0, new B.PlaceholderSpanIndexSemanticsTag(placeholderIndex, t2));
            } else
              t9 = false;
            if (!t9)
              break;
            if (!(childIndex >= 0 && childIndex < children.length))
              return B.ioore(children, childIndex);
            childNode = children[childIndex];
            t9 = child.parentData;
            t9.toString;
            t8._as(t9);
            t10 = childNode._semantics$_rect;
            t11 = t10.left;
            t12 = t10.top;
            t9 = t9.scale;
            t9.toString;
            t9 = new B.Rect(t11, t12, t11 + (t10.right - t11) * t9, t12 + (t10.bottom - t12) * t9);
            if (!t10.$eq(0, t9)) {
              childNode._semantics$_rect = t9;
              childNode._semantics$_markDirty$0();
            }
            C.JSArray_methods.add$1(newChildren, childNode);
            ++childIndex;
          }
          child.toString;
          t2 = t7._as(child).parentData;
          t2.toString;
          child = t6._as(t2).ContainerParentDataMixin_nextSibling;
          ++placeholderIndex;
        } else {
          rects = t1._paragraph.getBoxesForRange$4$boxHeightStyle$boxWidthStyle(t10, t9, C.BoxHeightStyle_0, C.BoxWidthStyle_0);
          if (rects.length === 0)
            continue;
          t9 = C.JSArray_methods.get$first(rects);
          rect = new B.Rect(t9.left, t9.top, t9.right, t9.bottom);
          currentDirection0 = C.JSArray_methods.get$first(rects).direction;
          for (t9 = B._arrayInstanceType(rects), t10 = t9._eval$1("SubListIterable<1>"), t11 = new B.SubListIterable(rects, 1, _null, t10), t11.SubListIterable$3(rects, 1, _null, t9._precomputed1), t11 = new B.ListIterator(t11, t11.get$length(t11), t10._eval$1("ListIterator<ListIterable.E>")), t10 = t10._eval$1("ListIterable.E"); t11.moveNext$0();) {
            t9 = t11.__internal$_current;
            if (t9 == null)
              t9 = t10._as(t9);
            rect = rect.expandToInclude$1(new B.Rect(t9.left, t9.top, t9.right, t9.bottom));
            currentDirection0 = t9.direction;
          }
          t9 = rect.left;
          t10 = Math.max(0, t9);
          t11 = rect.top;
          t12 = Math.max(0, t11);
          t9 = Math.min(rect.right - t9, t5._as(B.RenderObject.prototype.get$constraints.call(_this)).maxWidth);
          t11 = Math.min(rect.bottom - t11, t5._as(B.RenderObject.prototype.get$constraints.call(_this)).maxHeight);
          t13 = Math.floor(t10) - 4;
          t14 = Math.floor(t12) - 4;
          t9 = Math.ceil(t10 + t9) + 4;
          t11 = Math.ceil(t12 + t11) + 4;
          currentRect = new B.Rect(t13, t14, t9, t11);
          configuration = B.SemanticsConfiguration$();
          ordinal0 = ordinal + 1;
          configuration._sortKey = new B.OrdinalSortKey(ordinal, _null);
          configuration._hasBeenAnnotated = true;
          configuration._textDirection = currentDirection;
          t12 = info.semanticsLabel;
          t2 = t12 == null ? t2 : t12;
          configuration._attributedLabel = new B.AttributedString(t2, info.stringAttributes);
          t2 = node.parentPaintClipRect;
          if (t2 != null) {
            paintRect = t2.intersect$1(currentRect);
            if (paintRect.left >= paintRect.right || paintRect.top >= paintRect.bottom)
              t2 = !(t13 >= t9 || t14 >= t11);
            else
              t2 = false;
            configuration._setFlag$2(C.SemanticsFlag_8192, t2);
          }
          newChild = B._Cell$named("newChild");
          t2 = _this._editable$_cachedChildNodes;
          t9 = t2 == null ? _null : t2._length !== 0;
          if (t9 === true) {
            t2.toString;
            t9 = new B.LinkedHashMapKeyIterable(t2, B._instanceType(t2)._eval$1("LinkedHashMapKeyIterable<1>"));
            it = t9.get$iterator(t9);
            if (!it.moveNext$0())
              B.throwExpression(B.IterableElementError_noElement());
            t2 = t2.remove$1(0, it.get$current(it));
            t2.toString;
            if (newChild.__late_helper$_value !== newChild)
              B.throwExpression(B.LateError$localAI(newChild.__late_helper$_name));
            newChild.__late_helper$_value = t2;
          } else {
            key = new B.UniqueKey();
            t2 = B.SemanticsNode$(key, _this._createShowOnScreenFor$1(key));
            if (newChild.__late_helper$_value !== newChild)
              B.throwExpression(B.LateError$localAI(newChild.__late_helper$_name));
            newChild.__late_helper$_value = t2;
          }
          if (t2 === newChild)
            B.throwExpression(B.LateError$localNI(newChild.__late_helper$_name));
          J.updateWith$1$config$z(t2, configuration);
          if (!t2._semantics$_rect.$eq(0, currentRect)) {
            t2._semantics$_rect = currentRect;
            t2._semantics$_markDirty$0();
          }
          t2 = newChild.__late_helper$_value;
          if (t2 === newChild)
            B.throwExpression(B.LateError$localNI(newChild.__late_helper$_name));
          t9 = t2.key;
          t9.toString;
          newChildCache.$indexSet(0, t9, t2);
          t2 = newChild.__late_helper$_value;
          if (t2 === newChild)
            B.throwExpression(B.LateError$localNI(newChild.__late_helper$_name));
          C.JSArray_methods.add$1(newChildren, t2);
          ordinal = ordinal0;
          currentDirection = currentDirection0;
        }
      }
      _this.set$_editable$_cachedChildNodes(newChildCache);
      node.updateWith$2$childrenInInversePaintOrder$config(0, newChildren, config);
    },
    _createShowOnScreenFor$1(key) {
      return new A.RenderEditable__createShowOnScreenFor_closure(this, key);
    },
    _handleSetSelection$1(selection) {
      this._setSelection$2(selection, C.SelectionChangedCause_4);
    },
    _handleMoveCursorForwardByCharacter$1(extendSelection) {
      var _this = this,
        extentOffset = _this._editable$_textPainter.getOffsetAfter$1(_this._selection.extentOffset);
      if (extentOffset == null)
        return;
      _this._setSelection$2(B.TextSelection$(C.TextAffinity_1, !extendSelection ? extentOffset : _this._selection.baseOffset, extentOffset, false), C.SelectionChangedCause_4);
    },
    _handleMoveCursorBackwardByCharacter$1(extendSelection) {
      var _this = this,
        extentOffset = _this._editable$_textPainter.getOffsetBefore$1(_this._selection.extentOffset);
      if (extentOffset == null)
        return;
      _this._setSelection$2(B.TextSelection$(C.TextAffinity_1, !extendSelection ? extentOffset : _this._selection.baseOffset, extentOffset, false), C.SelectionChangedCause_4);
    },
    _handleMoveCursorForwardByWord$1(extendSelection) {
      var baseOffset, _this = this,
        t1 = _this._selection.get$extent(),
        nextWord = _this._getNextWord$1(_this._editable$_textPainter._paragraph.getWordBoundary$1(t1).end);
      if (nextWord == null)
        return;
      baseOffset = extendSelection ? _this._selection.baseOffset : nextWord.start;
      _this._setSelection$2(B.TextSelection$(C.TextAffinity_1, baseOffset, nextWord.start, false), C.SelectionChangedCause_4);
    },
    _handleMoveCursorBackwardByWord$1(extendSelection) {
      var baseOffset, _this = this,
        t1 = _this._selection.get$extent(),
        previousWord = _this._getPreviousWord$1(_this._editable$_textPainter._paragraph.getWordBoundary$1(t1).start - 1);
      if (previousWord == null)
        return;
      baseOffset = extendSelection ? _this._selection.baseOffset : previousWord.start;
      _this._setSelection$2(B.TextSelection$(C.TextAffinity_1, baseOffset, previousWord.start, false), C.SelectionChangedCause_4);
    },
    _getNextWord$1(offset) {
      var t1, range, t2;
      for (t1 = this._editable$_textPainter; true;) {
        range = t1._paragraph.getWordBoundary$1(new B.TextPosition(offset, C.TextAffinity_1));
        t2 = range.start;
        t2 = !(t2 >= 0 && range.end >= 0) || t2 === range.end;
        if (t2)
          return null;
        if (!this._onlyWhitespace$1(range))
          return range;
        offset = range.end;
      }
    },
    _getPreviousWord$1(offset) {
      var t1, range, t2;
      for (t1 = this._editable$_textPainter; offset >= 0;) {
        range = t1._paragraph.getWordBoundary$1(new B.TextPosition(offset, C.TextAffinity_1));
        t2 = range.start;
        t2 = !(t2 >= 0 && range.end >= 0) || t2 === range.end;
        if (t2)
          return null;
        if (!this._onlyWhitespace$1(range))
          return range;
        offset = range.start - 1;
      }
      return null;
    },
    _onlyWhitespace$1(range) {
      var i, t1, t2, t3;
      for (i = range.start, t1 = range.end, t2 = this._editable$_textPainter; i < t1; ++i) {
        t3 = t2._text_painter$_text.codeUnitAt$1(0, i);
        t3.toString;
        if (!B.TextLayoutMetrics_isWhitespace(t3))
          return false;
      }
      return true;
    },
    attach$1(owner) {
      var t1, _this = this, _null = null;
      type$.PipelineOwner._as(owner);
      _this.super$_RenderEditable_RenderBox_RelayoutWhenSystemFontsChangeMixin_ContainerRenderObjectMixin$attach(owner);
      t1 = _this._foregroundRenderObject;
      if (t1 != null)
        t1.attach$1(owner);
      t1 = _this._backgroundRenderObject;
      if (t1 != null)
        t1.attach$1(owner);
      t1 = B.TapGestureRecognizer$(_this, _null);
      t1.set$onTapDown(_this.get$_editable$_handleTapDown());
      t1.set$onTap(_this.get$_editable$_handleTap());
      _this.__RenderEditable__tap_A = t1;
      t1 = B.LongPressGestureRecognizer$(_this, _null, _null, _null);
      t1.set$onLongPress(_this.get$_handleLongPress());
      _this.__RenderEditable__longPress_A = t1;
      _this._editable$_offset.addListener$1(0, _this.get$markNeedsPaint());
      _this.get$_caretPainter().set$shouldPaint(_this._showCursor._change_notifier$_value);
      _this._showCursor.addListener$1(0, _this.get$_showHideCursor());
    },
    detach$0(_) {
      var _this = this,
        t1 = _this.__RenderEditable__tap_A;
      t1 === $ && B.throwLateFieldNI("_tap");
      t1._stopTimer$0();
      t1.super$OneSequenceGestureRecognizer$dispose();
      t1 = _this.__RenderEditable__longPress_A;
      t1 === $ && B.throwLateFieldNI("_longPress");
      t1._stopTimer$0();
      t1.super$OneSequenceGestureRecognizer$dispose();
      _this._editable$_offset.removeListener$1(0, _this.get$markNeedsPaint());
      _this._showCursor.removeListener$1(0, _this.get$_showHideCursor());
      _this.super$_RenderEditable_RenderBox_RelayoutWhenSystemFontsChangeMixin_ContainerRenderObjectMixin$detach(0);
      t1 = _this._foregroundRenderObject;
      if (t1 != null)
        t1.detach$0(0);
      t1 = _this._backgroundRenderObject;
      if (t1 != null)
        t1.detach$0(0);
    },
    redepthChildren$0() {
      var _this = this,
        foregroundChild = _this._foregroundRenderObject,
        backgroundChild = _this._backgroundRenderObject;
      if (foregroundChild != null)
        _this.redepthChild$1(foregroundChild);
      if (backgroundChild != null)
        _this.redepthChild$1(backgroundChild);
      _this.super$ContainerRenderObjectMixin$redepthChildren();
    },
    visitChildren$1(visitor) {
      var foregroundChild, backgroundChild;
      type$.void_Function_RenderObject._as(visitor);
      foregroundChild = this._foregroundRenderObject;
      backgroundChild = this._backgroundRenderObject;
      if (foregroundChild != null)
        visitor.call$1(foregroundChild);
      if (backgroundChild != null)
        visitor.call$1(backgroundChild);
      this.super$ContainerRenderObjectMixin$visitChildren(visitor);
    },
    get$_editable$_paintOffset() {
      switch ((this._editable$_maxLines !== 1 ? C.Axis_1 : C.Axis_0).index) {
        case 0:
          var t1 = this._editable$_offset._pixels;
          t1.toString;
          return new B.Offset(-t1, 0);
        case 1:
          t1 = this._editable$_offset._pixels;
          t1.toString;
          return new B.Offset(0, -t1);
      }
    },
    get$_viewportExtent() {
      switch ((this._editable$_maxLines !== 1 ? C.Axis_1 : C.Axis_0).index) {
        case 0:
          return this._size._dx;
        case 1:
          return this._size._dy;
      }
    },
    _getMaxScrollExtent$1(contentSize) {
      switch ((this._editable$_maxLines !== 1 ? C.Axis_1 : C.Axis_0).index) {
        case 0:
          return Math.max(0, contentSize._dx - this._size._dx);
        case 1:
          return Math.max(0, contentSize._dy - this._size._dy);
      }
    },
    getEndpointsForSelection$1(selection) {
      var paintOffset, boxes, t1, t2, t3, t4, start, end, _this = this;
      _this._computeTextMetricsIfNeeded$0();
      paintOffset = _this.get$_editable$_paintOffset();
      if (selection.start === selection.end)
        boxes = B._setArrayType([], type$.JSArray_TextBox);
      else {
        t1 = _this._selectionPainter;
        boxes = _this._editable$_textPainter.getBoxesForSelection$3$boxHeightStyle$boxWidthStyle(selection, t1._selectionHeightStyle, t1._selectionWidthStyle);
      }
      if (boxes.length === 0) {
        t1 = _this._editable$_textPainter;
        t2 = selection.get$extent();
        t3 = _this.__RenderEditable__caretPrototype_A;
        t3 === $ && B.throwLateFieldNI("_caretPrototype");
        t1._computeCaretMetrics$2(t2, t3);
        t3 = t1.__TextPainter__caretMetrics_A;
        t3 === $ && B.throwLateFieldNI("_caretMetrics");
        return B._setArrayType([new A.TextSelectionPoint(new B.Offset(0, t1.get$preferredLineHeight()).$add(0, t3.offset).$add(0, paintOffset), null)], type$.JSArray_TextSelectionPoint);
      } else {
        t1 = C.JSArray_methods.get$first(boxes);
        t1 = t1.direction === C.TextDirection_1 ? t1.left : t1.right;
        t2 = _this._editable$_textPainter;
        t3 = t2.get$width(t2);
        t4 = t2._paragraph;
        Math.ceil(t4.get$height(t4));
        start = new B.Offset(B.clampDouble(t1, 0, t3), C.JSArray_methods.get$first(boxes).bottom).$add(0, paintOffset);
        t3 = C.JSArray_methods.get$last(boxes);
        t1 = t3.direction === C.TextDirection_1 ? t3.right : t3.left;
        t3 = t2.get$width(t2);
        t2 = t2._paragraph;
        Math.ceil(t2.get$height(t2));
        end = new B.Offset(B.clampDouble(t1, 0, t3), C.JSArray_methods.get$last(boxes).bottom).$add(0, paintOffset);
        return B._setArrayType([new A.TextSelectionPoint(start, C.JSArray_methods.get$first(boxes).direction), new A.TextSelectionPoint(end, C.JSArray_methods.get$last(boxes).direction)], type$.JSArray_TextSelectionPoint);
      }
    },
    getRectForComposingRange$1(range) {
      var t1, _this = this;
      if (!range.get$isValid() || range.start === range.end)
        return null;
      _this._computeTextMetricsIfNeeded$0();
      t1 = _this._selectionPainter;
      t1 = C.JSArray_methods.fold$1$2(_this._editable$_textPainter.getBoxesForSelection$3$boxHeightStyle$boxWidthStyle(B.TextSelection$(C.TextAffinity_1, range.start, range.end, false), t1._selectionHeightStyle, t1._selectionWidthStyle), null, new A.RenderEditable_getRectForComposingRange_closure(), type$.nullable_Rect);
      return t1 == null ? null : t1.shift$1(_this.get$_editable$_paintOffset());
    },
    getPositionForPoint$1(globalPosition) {
      var t1, _this = this;
      _this._computeTextMetricsIfNeeded$0();
      t1 = _this.get$_editable$_paintOffset();
      t1 = _this.globalToLocal$1(globalPosition.$add(0, new B.Offset(-t1._dx, -t1._dy)));
      return _this._editable$_textPainter._paragraph.getPositionForOffset$1(t1);
    },
    getLocalRectForCaret$1(caretPosition) {
      var t1, t2, t3, rect, _this = this;
      _this._computeTextMetricsIfNeeded$0();
      t1 = _this._editable$_textPainter;
      t2 = _this.__RenderEditable__caretPrototype_A;
      t2 === $ && B.throwLateFieldNI("_caretPrototype");
      t1._computeCaretMetrics$2(caretPosition, t2);
      t2 = t1.__TextPainter__caretMetrics_A;
      t2 === $ && B.throwLateFieldNI("_caretMetrics");
      t3 = _this._cursorWidth;
      t1 = t1.get$preferredLineHeight();
      rect = new B.Rect(0, 0, t3, 0 + t1).shift$1(t2.offset.$add(0, _this.get$_editable$_paintOffset()).$add(0, _this.get$_caretPainter()._cursorOffset));
      return rect.shift$1(_this._snapToPhysicalPixel$1(new B.Offset(rect.left, rect.top)));
    },
    _preferredHeight$1(width) {
      var t4,
        maxLines = this._editable$_maxLines,
        t1 = this._editable$_textPainter,
        t2 = t1.get$preferredLineHeight(),
        t3 = maxLines === 1;
      if (t3) {
        t4 = t1._text_painter$_text;
        if ((t4 == null ? null : t4.codeUnitAt$1(0, 0)) == null) {
          t4 = t1._strutStyle;
          if (t4 != null)
            !t4.$eq(0, D.StrutStyle_yfz);
        }
      }
      if (t3 && true) {
        this._editable$_layoutText$1$maxWidth(width);
        t1 = t1._paragraph;
        return Math.ceil(t1.get$height(t1));
      }
      return t2 * maxLines;
    },
    computeDistanceToActualBaseline$1(baseline) {
      this._computeTextMetricsIfNeeded$0();
      return this._editable$_textPainter.computeDistanceToActualBaseline$1(baseline);
    },
    hitTestSelf$1(position) {
      return true;
    },
    hitTestChildren$2$position(result, position) {
      var effectivePosition, span, hitText, t2, t3, t4, t5, childIndex, t6, t7, t8, transform, child, _this = this, _box_0 = {},
        t1 = _this._editable$_textPainter,
        textSpan = t1._text_painter$_text;
      if (textSpan != null) {
        effectivePosition = position.$sub(0, _this.get$_editable$_paintOffset());
        span = textSpan.getSpanForPosition$1(t1._paragraph.getPositionForOffset$1(effectivePosition));
        if (type$.HitTestTarget._is(span)) {
          result.add$1(0, new B.HitTestEntry(span, type$.HitTestEntry_HitTestTarget));
          hitText = true;
        } else
          hitText = false;
      } else
        hitText = false;
      t2 = _box_0.child = _this.ContainerRenderObjectMixin__firstChild;
      t3 = B._instanceType(_this);
      t4 = t3._eval$1("ContainerRenderObjectMixin.0");
      t3 = t3._eval$1("ContainerRenderObjectMixin.1");
      t5 = type$.TextParentData;
      childIndex = 0;
      while (true) {
        if (!(t2 != null && childIndex < t1._inlinePlaceholderBoxes.length))
          break;
        t2 = t2.parentData;
        t2.toString;
        t5._as(t2);
        t6 = t2.offset;
        t7 = t6._dx;
        t6 = t6._dy;
        t8 = new Float64Array(16);
        transform = new B.Matrix4(t8);
        transform.setIdentity$0();
        if (14 >= 16)
          return B.ioore(t8, 14);
        t8[14] = 0;
        t8[13] = t6;
        t8[12] = t7;
        t7 = t2.scale;
        transform.scale$3(0, t7, t7, t7);
        if (result.addWithPaintTransform$3$hitTest$position$transform(new A.RenderEditable_hitTestChildren_closure(_box_0, position, t2), position, transform))
          return true;
        t2 = t4._as(_box_0.child).parentData;
        t2.toString;
        child = t3._as(t2).ContainerParentDataMixin_nextSibling;
        _box_0.child = child;
        ++childIndex;
        t2 = child;
      }
      return hitText;
    },
    handleEvent$2($event, entry) {
      type$.BoxHitTestEntry._as(entry);
      type$.PointerDownEvent._is($event);
    },
    _editable$_handleTapDown$1(details) {
      this._lastTapDownPosition = details.globalPosition;
    },
    _editable$_handleTap$0() {
      var t1 = this._lastTapDownPosition;
      t1.toString;
      this.selectPositionAt$2$cause$from(D.SelectionChangedCause_0, t1);
    },
    _handleLongPress$0() {
      var t1 = this._lastTapDownPosition;
      t1.toString;
      this.selectWordsInRange$2$cause$from(D.SelectionChangedCause_2, t1);
    },
    selectPositionAt$3$cause$from$to(cause, from, to) {
      var fromPosition, toPosition, baseOffset, extentOffset, _this = this,
        t1 = type$.BoxConstraints,
        t2 = t1._as(B.RenderObject.prototype.get$constraints.call(_this));
      _this._editable$_layoutText$2$maxWidth$minWidth(t1._as(B.RenderObject.prototype.get$constraints.call(_this)).maxWidth, t2.minWidth);
      t2 = _this._editable$_textPainter;
      t1 = _this.globalToLocal$1(from.$sub(0, _this.get$_editable$_paintOffset()));
      fromPosition = t2._paragraph.getPositionForOffset$1(t1);
      if (to == null)
        toPosition = null;
      else {
        t1 = _this.globalToLocal$1(to.$sub(0, _this.get$_editable$_paintOffset()));
        toPosition = t2._paragraph.getPositionForOffset$1(t1);
      }
      baseOffset = fromPosition.offset;
      extentOffset = toPosition == null ? null : toPosition.offset;
      if (extentOffset == null)
        extentOffset = baseOffset;
      _this._setSelection$2(B.TextSelection$(fromPosition.affinity, baseOffset, extentOffset, false), cause);
    },
    selectPositionAt$2$cause$from(cause, from) {
      return this.selectPositionAt$3$cause$from$to(cause, from, null);
    },
    selectWordsInRange$3$cause$from$to(cause, from, to) {
      var t1, t2, fromPosition, fromWord, toPosition, toWord, isFromWordBeforeToWord, _this = this;
      _this._computeTextMetricsIfNeeded$0();
      t1 = _this._editable$_textPainter;
      t2 = _this.globalToLocal$1(from.$sub(0, _this.get$_editable$_paintOffset()));
      fromPosition = t1._paragraph.getPositionForOffset$1(t2);
      fromWord = _this._getWordAtOffset$1(fromPosition);
      if (to == null)
        toPosition = fromPosition;
      else {
        t2 = _this.globalToLocal$1(to.$sub(0, _this.get$_editable$_paintOffset()));
        toPosition = t1._paragraph.getPositionForOffset$1(t2);
      }
      toWord = toPosition.$eq(0, fromPosition) ? fromWord : _this._getWordAtOffset$1(toPosition);
      isFromWordBeforeToWord = fromWord.start < toWord.end;
      t1 = isFromWordBeforeToWord ? fromWord.get$base().offset : fromWord.get$extent().offset;
      t2 = isFromWordBeforeToWord ? toWord.get$extent().offset : toWord.get$base().offset;
      _this._setSelection$2(B.TextSelection$(fromWord.affinity, t1, t2, false), cause);
    },
    selectWordsInRange$2$cause$from(cause, from) {
      return this.selectWordsInRange$3$cause$from$to(cause, from, null);
    },
    _getWordAtOffset$1(position) {
      var word, effectiveOffset0, previousWord, nextWord, _this = this,
        effectiveOffset = position.offset,
        t1 = _this._editable$_textPainter;
      if (effectiveOffset >= t1.get$plainText().length)
        return A.TextSelection$fromPosition(new B.TextPosition(t1.get$plainText().length, C.TextAffinity_0));
      word = t1._paragraph.getWordBoundary$1(position);
      switch (position.affinity.index) {
        case 0:
          effectiveOffset0 = effectiveOffset - 1;
          break;
        case 1:
          effectiveOffset0 = effectiveOffset;
          break;
        default:
          effectiveOffset0 = null;
      }
      if (B.TextLayoutMetrics_isWhitespace(C.JSString_methods.codeUnitAt$1(t1.get$plainText(), effectiveOffset0))) {
        if (typeof effectiveOffset0 !== "number")
          return effectiveOffset0.$gt();
        t1 = effectiveOffset0 > 0;
      } else
        t1 = false;
      if (t1) {
        t1 = word.start;
        previousWord = _this._getPreviousWord$1(t1);
        switch (B.defaultTargetPlatform().index) {
          case 2:
            if (previousWord == null) {
              nextWord = _this._getNextWord$1(t1);
              if (nextWord == null)
                return A.TextSelection$collapsed(C.TextAffinity_1, effectiveOffset);
              return B.TextSelection$(C.TextAffinity_1, effectiveOffset, nextWord.end, false);
            }
            return B.TextSelection$(C.TextAffinity_1, previousWord.start, effectiveOffset, false);
          case 0:
            if (_this._readOnly) {
              if (previousWord == null)
                return B.TextSelection$(C.TextAffinity_1, effectiveOffset, effectiveOffset + 1, false);
              return B.TextSelection$(C.TextAffinity_1, previousWord.start, effectiveOffset, false);
            }
            break;
          case 1:
          case 4:
          case 3:
          case 5:
            break;
        }
      }
      return B.TextSelection$(C.TextAffinity_1, word.start, word.end, false);
    },
    _layoutChildren$2$dry(constraints, dry) {
      var child, placeholderDimensions, boxConstraints, t2, t3, childIndex, t4, t5, baselineOffset, childSize, _this = this,
        _s17_ = "_placeholderSpans",
        t1 = _this.ContainerRenderObjectMixin__childCount;
      if (t1 === 0) {
        t1 = type$.JSArray_PlaceholderDimensions;
        _this._editable$_textPainter.setPlaceholderDimensions$1(B._setArrayType([], t1));
        return B._setArrayType([], t1);
      }
      child = _this.ContainerRenderObjectMixin__firstChild;
      placeholderDimensions = B.List_List$filled(t1, C.PlaceholderDimensions_Ism, false, type$.PlaceholderDimensions);
      boxConstraints = new B.BoxConstraints(0, constraints.maxWidth, 0, 1 / 0).$div(0, _this._editable$_textPainter._textScaleFactor);
      for (t1 = B._instanceType(_this), t2 = t1._eval$1("ContainerRenderObjectMixin.0"), t1 = t1._eval$1("ContainerRenderObjectMixin.1"), t3 = !dry, childIndex = 0; child != null;) {
        if (t3) {
          child.layout$2$parentUsesSize(boxConstraints, true);
          t4 = child._size;
          t4.toString;
          t5 = _this.__RenderEditable__placeholderSpans_A;
          t5 === $ && B.throwLateFieldNI(_s17_);
          if (!(childIndex < t5.length))
            return B.ioore(t5, childIndex);
          t5 = t5[childIndex];
          switch (t5.alignment.index) {
            case 0:
              t5 = t5.baseline;
              t5.toString;
              baselineOffset = child.getDistanceToBaseline$1(t5);
              break;
            case 1:
            case 2:
            case 4:
            case 5:
            case 3:
              baselineOffset = null;
              break;
            default:
              baselineOffset = null;
          }
          childSize = t4;
        } else {
          childSize = child.getDryLayout$1(boxConstraints);
          baselineOffset = null;
        }
        t4 = _this.__RenderEditable__placeholderSpans_A;
        t4 === $ && B.throwLateFieldNI(_s17_);
        if (!(childIndex < t4.length))
          return B.ioore(t4, childIndex);
        t4 = t4[childIndex];
        C.JSArray_methods.$indexSet(placeholderDimensions, childIndex, new B.PlaceholderDimensions(childSize, t4.alignment, baselineOffset, t4.baseline));
        t4 = t2._as(child).parentData;
        t4.toString;
        child = t1._as(t4).ContainerParentDataMixin_nextSibling;
        ++childIndex;
      }
      return placeholderDimensions;
    },
    _layoutChildren$1(constraints) {
      return this._layoutChildren$2$dry(constraints, false);
    },
    _setParentData$0() {
      var childIndex, t5, t6,
        child = this.ContainerRenderObjectMixin__firstChild,
        t1 = type$.TextParentData,
        t2 = this._editable$_textPainter,
        t3 = B._instanceType(this),
        t4 = t3._eval$1("ContainerRenderObjectMixin.0");
      t3 = t3._eval$1("ContainerRenderObjectMixin.1");
      childIndex = 0;
      while (true) {
        if (!(child != null && childIndex < t2._inlinePlaceholderBoxes.length))
          break;
        t5 = child.parentData;
        t5.toString;
        t1._as(t5);
        t6 = t2._inlinePlaceholderBoxes;
        if (!(childIndex < t6.length))
          return B.ioore(t6, childIndex);
        t6 = t6[childIndex];
        t5.offset = new B.Offset(t6.left, t6.top);
        t6 = t2._inlinePlaceholderScales;
        if (!(childIndex < t6.length))
          return B.ioore(t6, childIndex);
        t5.scale = t6[childIndex];
        t4._as(child);
        child = t3._as(t5).ContainerParentDataMixin_nextSibling;
        ++childIndex;
      }
    },
    _editable$_layoutText$2$maxWidth$minWidth(maxWidth, minWidth) {
      var _this = this,
        availableMaxWidth = Math.max(0, maxWidth - (1 + _this._cursorWidth)),
        availableMinWidth = Math.min(minWidth, availableMaxWidth),
        textMaxWidth = _this._editable$_maxLines !== 1 ? availableMaxWidth : 1 / 0,
        textMinWidth = _this._forceLine ? availableMaxWidth : availableMinWidth;
      _this._editable$_textPainter.layout$2$maxWidth$minWidth(textMaxWidth, textMinWidth);
      _this._textLayoutLastMinWidth = minWidth;
      _this._textLayoutLastMaxWidth = maxWidth;
    },
    _editable$_layoutText$1$maxWidth(maxWidth) {
      return this._editable$_layoutText$2$maxWidth$minWidth(maxWidth, 0);
    },
    _computeTextMetricsIfNeeded$0() {
      var t1 = type$.BoxConstraints,
        t2 = t1._as(B.RenderObject.prototype.get$constraints.call(this));
      this._editable$_layoutText$2$maxWidth$minWidth(t1._as(B.RenderObject.prototype.get$constraints.call(this)).maxWidth, t2.minWidth);
    },
    _snapToPhysicalPixel$1(sourceOffset) {
      var t2,
        globalOffset = B.MatrixUtils_transformPoint(this.getTransformTo$1(0, null), sourceOffset),
        pixelMultiple = 1 / this._editable$_devicePixelRatio,
        t1 = globalOffset._dx;
      t1 = isFinite(t1) ? C.JSNumber_methods.round$0(t1 / pixelMultiple) * pixelMultiple - t1 : 0;
      t2 = globalOffset._dy;
      return new B.Offset(t1, isFinite(t2) ? C.JSNumber_methods.round$0(t2 / pixelMultiple) * pixelMultiple - t2 : 0);
    },
    _canComputeDryLayout$0() {
      var t2, _i,
        t1 = this.__RenderEditable__placeholderSpans_A;
      t1 === $ && B.throwLateFieldNI("_placeholderSpans");
      t2 = t1.length;
      _i = 0;
      for (; _i < t2; ++_i)
        switch (t1[_i].alignment.index) {
          case 0:
          case 1:
          case 2:
            return false;
          case 3:
          case 5:
          case 4:
            continue;
        }
      return true;
    },
    computeDryLayout$1(constraints) {
      var t1, t2, width, width0, t3, _this = this;
      if (!_this._canComputeDryLayout$0())
        return C.Size_0_0;
      t1 = _this._editable$_textPainter;
      t1.setPlaceholderDimensions$1(_this._layoutChildren$2$dry(constraints, true));
      t2 = constraints.minWidth;
      width = constraints.maxWidth;
      _this._editable$_layoutText$2$maxWidth$minWidth(width, t2);
      if (_this._forceLine)
        width0 = width;
      else {
        t3 = t1.get$width(t1);
        t1 = t1._paragraph;
        Math.ceil(t1.get$height(t1));
        width0 = B.clampDouble(t3 + (1 + _this._cursorWidth), t2, width);
      }
      return new B.Size(width0, B.clampDouble(_this._preferredHeight$1(width), constraints.minHeight, constraints.maxHeight));
    },
    performLayout$0() {
      var t1, t2, t3, width, width0, t4, contentSize, painterConstraints, _this = this,
        constraints = type$.BoxConstraints._as(B.RenderObject.prototype.get$constraints.call(_this));
      _this.set$_editable$_placeholderDimensions(_this._layoutChildren$1(constraints));
      t1 = _this._editable$_textPainter;
      t1.setPlaceholderDimensions$1(_this._editable$_placeholderDimensions);
      _this._computeTextMetricsIfNeeded$0();
      _this._setParentData$0();
      switch (B.defaultTargetPlatform().index) {
        case 2:
        case 4:
          t2 = _this._cursorWidth;
          t3 = t1.get$preferredLineHeight();
          _this.__RenderEditable__caretPrototype_A = new B.Rect(0, 0, t2, 0 + (t3 + 2));
          break;
        case 0:
        case 1:
        case 3:
        case 5:
          t2 = _this._cursorWidth;
          t3 = t1.get$preferredLineHeight();
          _this.__RenderEditable__caretPrototype_A = new B.Rect(0, 2, t2, 2 + (t3 - 4));
          break;
      }
      t2 = t1.get$width(t1);
      t3 = t1._paragraph;
      t3 = Math.ceil(t3.get$height(t3));
      width = constraints.maxWidth;
      if (_this._forceLine)
        width0 = width;
      else {
        t4 = t1.get$width(t1);
        t1 = t1._paragraph;
        Math.ceil(t1.get$height(t1));
        width0 = B.clampDouble(t4 + (1 + _this._cursorWidth), constraints.minWidth, width);
      }
      _this._size = new B.Size(width0, B.clampDouble(_this._preferredHeight$1(width), constraints.minHeight, constraints.maxHeight));
      contentSize = new B.Size(t2 + (1 + _this._cursorWidth), t3);
      painterConstraints = B.BoxConstraints$tight(contentSize);
      t1 = _this._foregroundRenderObject;
      if (t1 != null)
        t1.layout$1(painterConstraints);
      t1 = _this._backgroundRenderObject;
      if (t1 != null)
        t1.layout$1(painterConstraints);
      _this.set$_editable$_maxScrollExtent(_this._getMaxScrollExtent$1(contentSize));
      _this._editable$_offset.applyViewportDimension$1(_this.get$_viewportExtent());
      _this._editable$_offset.applyContentDimensions$2(0, _this._editable$_maxScrollExtent);
    },
    setFloatingCursor$4$resetLerpValue(state, boundedOffset, lastTextPosition, resetLerpValue) {
      var t1, sizeAdjustment, t2, _this = this;
      if (state === C.FloatingCursorDragState_0) {
        _this._relativeOrigin = C.Offset_0_0;
        _this._previousOffset = null;
        _this._resetOriginOnRight = _this._resetOriginOnTop = _this._resetOriginOnBottom = false;
      }
      t1 = state !== C.FloatingCursorDragState_2;
      _this._floatingCursorOn = t1;
      _this._resetFloatingCursorAnimationValue = resetLerpValue;
      if (t1) {
        _this.__RenderEditable__floatingCursorTextPosition_A = lastTextPosition;
        if (resetLerpValue != null) {
          t1 = B.EdgeInsets_lerp(D.EdgeInsets_Otk, C.EdgeInsets_0_0_0_0, resetLerpValue);
          t1.toString;
          sizeAdjustment = t1;
        } else
          sizeAdjustment = D.EdgeInsets_Otk;
        t1 = _this.get$_caretPainter();
        t2 = _this.__RenderEditable__caretPrototype_A;
        t2 === $ && B.throwLateFieldNI("_caretPrototype");
        t1.set$floatingCursorRect(sizeAdjustment.inflateRect$1(t2).shift$1(boundedOffset));
      } else
        _this.get$_caretPainter().set$floatingCursorRect(null);
      _this.get$_caretPainter().showRegularCaret = _this._resetFloatingCursorAnimationValue == null;
    },
    setFloatingCursor$3(state, boundedOffset, lastTextPosition) {
      return this.setFloatingCursor$4$resetLerpValue(state, boundedOffset, lastTextPosition, null);
    },
    _lineNumberFor$2(startPosition, metrics) {
      var t1, offset, t2, _i, t3, lineMetrics;
      type$.List_LineMetrics._as(metrics);
      t1 = this._editable$_textPainter;
      t1._computeCaretMetrics$2(startPosition, C.Rect_0_0_0_0);
      t1 = t1.__TextPainter__caretMetrics_A;
      t1 === $ && B.throwLateFieldNI("_caretMetrics");
      offset = t1.offset;
      for (t1 = metrics.length, t2 = offset._dy, _i = 0; t3 = metrics.length, _i < t3; metrics.length === t1 || (0, B.throwConcurrentModificationError)(metrics), ++_i) {
        lineMetrics = metrics[_i];
        if (lineMetrics.get$baseline() > t2)
          return new B.MapEntry(J.get$lineNumber$z(lineMetrics), new B.Offset(offset._dx, lineMetrics.get$baseline()), type$.MapEntry_int_Offset);
      }
      t1 = Math.max(0, t3 - 1);
      t2 = t3 !== 0 ? C.JSArray_methods.get$last(metrics).get$baseline() + C.JSArray_methods.get$last(metrics).get$descent() : 0;
      return new B.MapEntry(t1, new B.Offset(offset._dx, t2), type$.MapEntry_int_Offset);
    },
    _editable$_paintContents$2(context, offset) {
      var visibleRegion, t2, t3, foregroundChild, backgroundChild, t4, t5, t6, t7, t8, childIndex, t9, t10, child, _this = this, _box_0 = {},
        effectiveOffset = offset.$add(0, _this.get$_editable$_paintOffset()),
        t1 = _this._floatingCursorOn;
      if (!t1) {
        t1 = _this._size;
        visibleRegion = new B.Rect(0, 0, 0 + t1._dx, 0 + t1._dy);
        t1 = _this._editable$_textPainter;
        t2 = _this._selection;
        t3 = _this.__RenderEditable__caretPrototype_A;
        t3 === $ && B.throwLateFieldNI("_caretPrototype");
        t1._computeCaretMetrics$2(new B.TextPosition(t2.start, t2.affinity), t3);
        t3 = t1.__TextPainter__caretMetrics_A;
        t3 === $ && B.throwLateFieldNI("_caretMetrics");
        _this._selectionStartInViewport.set$value(0, visibleRegion.inflate$1(0.5).contains$1(0, t3.offset.$add(0, effectiveOffset)));
        t3 = _this._selection;
        t1._computeCaretMetrics$2(new B.TextPosition(t3.end, t3.affinity), _this.__RenderEditable__caretPrototype_A);
        t1 = t1.__TextPainter__caretMetrics_A;
        _this._selectionEndInViewport.set$value(0, visibleRegion.inflate$1(0.5).contains$1(0, t1.offset.$add(0, effectiveOffset)));
      }
      foregroundChild = _this._foregroundRenderObject;
      backgroundChild = _this._backgroundRenderObject;
      if (backgroundChild != null)
        context.paintChild$2(backgroundChild, offset);
      t1 = _this._editable$_textPainter;
      t1.paint$2(context.get$canvas(context), effectiveOffset);
      t2 = _box_0.child = _this.ContainerRenderObjectMixin__firstChild;
      t3 = type$.TextParentData;
      t4 = type$.Offset;
      t5 = effectiveOffset._dx;
      t6 = effectiveOffset._dy;
      t7 = B._instanceType(_this);
      t8 = t7._eval$1("ContainerRenderObjectMixin.0");
      t7 = t7._eval$1("ContainerRenderObjectMixin.1");
      childIndex = 0;
      while (true) {
        if (!(t2 != null && childIndex < t1._inlinePlaceholderBoxes.length))
          break;
        t2 = t2.parentData;
        t2.toString;
        t3._as(t2);
        t9 = t2.scale;
        t9.toString;
        t10 = _this.__RenderObject__needsCompositing_A;
        t10 === $ && B.throwLateFieldNI("_needsCompositing");
        t2 = t4._as(t2.offset);
        context.pushTransform$4(t10, new B.Offset(t5 + t2._dx, t6 + t2._dy), B.Matrix4_Matrix4$diagonal3Values(t9, t9, t9), new A.RenderEditable__paintContents_closure(_box_0));
        t9 = t8._as(_box_0.child).parentData;
        t9.toString;
        child = t7._as(t9).ContainerParentDataMixin_nextSibling;
        _box_0.child = child;
        ++childIndex;
        t2 = child;
      }
      if (foregroundChild != null)
        context.paintChild$2(foregroundChild, offset);
    },
    paint$2(context, offset) {
      var t1, t2, t3, selection, startPoint, endPoint, _this = this;
      _this._computeTextMetricsIfNeeded$0();
      t1 = _this._editable$_maxScrollExtent;
      if (typeof t1 !== "number")
        return t1.$gt();
      t1 = (t1 > 0 || !J.$eq$(_this.get$_editable$_paintOffset(), C.Offset_0_0)) && _this._editable$_clipBehavior !== C.Clip_0;
      t2 = _this._editable$_clipRectLayer;
      if (t1) {
        t1 = _this.__RenderObject__needsCompositing_A;
        t1 === $ && B.throwLateFieldNI("_needsCompositing");
        t3 = _this._size;
        t2.set$layer(0, context.pushClipRect$6$clipBehavior$oldLayer(t1, offset, new B.Rect(0, 0, 0 + t3._dx, 0 + t3._dy), _this.get$_editable$_paintContents(), _this._editable$_clipBehavior, t2._layer));
      } else {
        t2.set$layer(0, null);
        _this._editable$_paintContents$2(context, offset);
      }
      selection = _this._selection;
      t1 = selection.get$isValid();
      if (t1) {
        t1 = type$.List_TextSelectionPoint._as(_this.getEndpointsForSelection$1(selection));
        if (0 >= t1.length)
          return B.ioore(t1, 0);
        startPoint = t1[0].point;
        t2 = _this._size;
        t3 = B.clampDouble(startPoint._dx, 0, t2._dx);
        t2 = B.clampDouble(startPoint._dy, 0, t2._dy);
        context.pushLayer$3(B.LeaderLayer$(_this._editable$_startHandleLayerLink, new B.Offset(t3, t2).$add(0, offset)), B.RenderObject.prototype.get$paint.call(_this), C.Offset_0_0);
        t2 = t1.length;
        if (t2 === 2) {
          if (1 >= t2)
            return B.ioore(t1, 1);
          endPoint = t1[1].point;
          t1 = _this._size;
          t2 = B.clampDouble(endPoint._dx, 0, t1._dx);
          t1 = B.clampDouble(endPoint._dy, 0, t1._dy);
          context.pushLayer$3(B.LeaderLayer$(_this._editable$_endHandleLayerLink, new B.Offset(t2, t1).$add(0, offset)), B.RenderObject.prototype.get$paint.call(_this), C.Offset_0_0);
        }
      }
    },
    describeApproximatePaintClip$1(child) {
      var t1, _this = this;
      switch (_this._editable$_clipBehavior.index) {
        case 0:
          return null;
        case 1:
        case 2:
        case 3:
          t1 = _this._editable$_maxScrollExtent;
          if (typeof t1 !== "number")
            return t1.$gt();
          if (t1 > 0 || !J.$eq$(_this.get$_editable$_paintOffset(), C.Offset_0_0)) {
            t1 = _this._size;
            t1 = new B.Rect(0, 0, 0 + t1._dx, 0 + t1._dy);
          } else
            t1 = null;
          return t1;
      }
    },
    set$__RenderEditable__placeholderSpans_A(__RenderEditable__placeholderSpans_A) {
      this.__RenderEditable__placeholderSpans_A = type$.List_PlaceholderSpan._as(__RenderEditable__placeholderSpans_A);
    },
    set$onCaretChanged(onCaretChanged) {
      this.onCaretChanged = type$.nullable_void_Function_Rect._as(onCaretChanged);
    },
    set$_editable$_cachedCombinedSemanticsInfos(_cachedCombinedSemanticsInfos) {
      this._editable$_cachedCombinedSemanticsInfos = type$.nullable_List_InlineSpanSemanticsInformation._as(_cachedCombinedSemanticsInfos);
    },
    set$_showCursor(_showCursor) {
      this._showCursor = type$.ValueNotifier_bool._as(_showCursor);
    },
    set$_editable$_maxScrollExtent(_maxScrollExtent) {
      this._editable$_maxScrollExtent = B._asDouble(_maxScrollExtent);
    },
    set$_editable$_semanticsInfo(_semanticsInfo) {
      this._editable$_semanticsInfo = type$.nullable_List_InlineSpanSemanticsInformation._as(_semanticsInfo);
    },
    set$_editable$_cachedChildNodes(_cachedChildNodes) {
      this._editable$_cachedChildNodes = type$.nullable_LinkedHashMap_Key_SemanticsNode._as(_cachedChildNodes);
    },
    set$_editable$_placeholderDimensions(_placeholderDimensions) {
      this._editable$_placeholderDimensions = type$.nullable_List_PlaceholderDimensions._as(_placeholderDimensions);
    },
    $isTextLayoutMetrics: 1
  };
  A._RenderEditableCustomPaint.prototype = {
    get$parent(_) {
      return type$.nullable_RenderEditable._as(B.AbstractNode.prototype.get$parent.call(this, this));
    },
    get$isRepaintBoundary() {
      return true;
    },
    get$sizedByParent() {
      return true;
    },
    set$painter(newValue) {
      var t2, _this = this,
        t1 = _this._editable$_painter;
      if (newValue === t1)
        return;
      _this._editable$_painter = newValue;
      t2 = newValue.shouldRepaint$1(t1);
      if (t2)
        _this.markNeedsPaint$0();
      if (_this._node$_owner != null) {
        t2 = _this.get$markNeedsPaint();
        t1.removeListener$1(0, t2);
        newValue.addListener$1(0, t2);
      }
    },
    paint$2(context, offset) {
      var t1, t2, _this = this,
        $parent = type$.nullable_RenderEditable._as(B.AbstractNode.prototype.get$parent.call(_this, _this)),
        painter = _this._editable$_painter;
      if ($parent != null) {
        $parent._computeTextMetricsIfNeeded$0();
        t1 = context.get$canvas(context);
        t2 = _this._size;
        t2.toString;
        painter.paint$3(t1, t2, $parent);
      }
    },
    attach$1(owner) {
      this.super$RenderObject$attach(type$.PipelineOwner._as(owner));
      this._editable$_painter.addListener$1(0, this.get$markNeedsPaint());
    },
    detach$0(_) {
      this._editable$_painter.removeListener$1(0, this.get$markNeedsPaint());
      this.super$AbstractNode$detach(0);
    },
    computeDryLayout$1(constraints) {
      return new B.Size(B.clampDouble(1 / 0, constraints.minWidth, constraints.maxWidth), B.clampDouble(1 / 0, constraints.minHeight, constraints.maxHeight));
    }
  };
  A.RenderEditablePainter.prototype = {};
  A._TextHighlightPainter.prototype = {
    set$highlightColor(newValue) {
      if (J.$eq$(newValue, this._editable$_highlightColor))
        return;
      this._editable$_highlightColor = newValue;
      this.notifyListeners$0();
    },
    set$highlightedRange(newValue) {
      if (J.$eq$(newValue, this._highlightedRange))
        return;
      this._highlightedRange = newValue;
      this.notifyListeners$0();
    },
    set$selectionHeightStyle(value) {
      if (this._selectionHeightStyle === value)
        return;
      this._selectionHeightStyle = value;
      this.notifyListeners$0();
    },
    set$selectionWidthStyle(value) {
      if (this._selectionWidthStyle === value)
        return;
      this._selectionWidthStyle = value;
      this.notifyListeners$0();
    },
    paint$3(canvas, size, renderEditable) {
      var t1, textPainter, boxes, t2, _i, box, t3, t4, t5, _this = this,
        range = _this._highlightedRange,
        color = _this._editable$_highlightColor;
      if (range == null || color == null || range.start === range.end)
        return;
      t1 = _this.highlightPaint;
      t1.set$color(0, color);
      textPainter = renderEditable._editable$_textPainter;
      boxes = textPainter.getBoxesForSelection$3$boxHeightStyle$boxWidthStyle(B.TextSelection$(C.TextAffinity_1, range.start, range.end, false), _this._selectionHeightStyle, _this._selectionWidthStyle);
      for (t2 = boxes.length, _i = 0; _i < boxes.length; boxes.length === t2 || (0, B.throwConcurrentModificationError)(boxes), ++_i) {
        box = boxes[_i];
        t3 = new B.Rect(box.left, box.top, box.right, box.bottom).shift$1(renderEditable.get$_editable$_paintOffset());
        t4 = textPainter._textWidthBasis;
        t5 = textPainter._paragraph;
        t4 = t4 === C.TextWidthBasis_1 ? t5.get$longestLine() : t5.get$width(t5);
        t4 = Math.ceil(t4);
        t5 = textPainter._paragraph;
        canvas.drawRect$2(t3.intersect$1(new B.Rect(0, 0, 0 + t4, 0 + Math.ceil(t5.get$height(t5)))), t1);
      }
    },
    shouldRepaint$1(oldDelegate) {
      var _this = this;
      if (oldDelegate === _this)
        return false;
      return !(oldDelegate instanceof A._TextHighlightPainter) || !J.$eq$(oldDelegate._editable$_highlightColor, _this._editable$_highlightColor) || !J.$eq$(oldDelegate._highlightedRange, _this._highlightedRange) || oldDelegate._selectionHeightStyle !== _this._selectionHeightStyle || oldDelegate._selectionWidthStyle !== _this._selectionWidthStyle;
    }
  };
  A._FloatingCursorPainter.prototype = {
    set$shouldPaint(value) {
      if (this._shouldPaint === value)
        return;
      this._shouldPaint = value;
      this.notifyListeners$0();
    },
    set$caretColor(value) {
      var t1 = this._caretColor;
      t1 = t1 == null ? null : t1.value;
      if (t1 === value.value)
        return;
      this._caretColor = value;
      this.notifyListeners$0();
    },
    set$cursorRadius(value) {
      if (J.$eq$(this._cursorRadius, value))
        return;
      this._cursorRadius = value;
      this.notifyListeners$0();
    },
    set$cursorOffset(value) {
      if (this._cursorOffset.$eq(0, value))
        return;
      this._cursorOffset = value;
      this.notifyListeners$0();
    },
    set$backgroundCursorColor(value) {
      var _this = this,
        t1 = _this._backgroundCursorColor;
      t1 = t1 == null ? null : t1._effectiveColor.value;
      if (t1 === value._effectiveColor.value)
        return;
      _this._backgroundCursorColor = value;
      if (_this.showRegularCaret)
        _this.notifyListeners$0();
    },
    set$floatingCursorRect(value) {
      if (J.$eq$(this._floatingCursorRect, value))
        return;
      this._floatingCursorRect = value;
      this.notifyListeners$0();
    },
    paint$3(canvas, size, renderEditable) {
      var floatingCursorRect, t1, caretColor, caretTextPosition, t2, t3, t4, caretRect, caretHeight, integralRect, radius, floatingCursorColor, value, result, _this = this,
        selection = renderEditable._selection;
      if (selection.start !== selection.end)
        return;
      floatingCursorRect = _this._floatingCursorRect;
      t1 = floatingCursorRect == null;
      if (t1)
        caretColor = _this._caretColor;
      else
        caretColor = _this.showRegularCaret ? _this._backgroundCursorColor : null;
      if (t1)
        caretTextPosition = selection.get$extent();
      else {
        t2 = renderEditable.__RenderEditable__floatingCursorTextPosition_A;
        t2 === $ && B.throwLateFieldNI("_floatingCursorTextPosition");
        caretTextPosition = t2;
      }
      if (caretColor != null) {
        t2 = renderEditable.__RenderEditable__caretPrototype_A;
        t2 === $ && B.throwLateFieldNI("_caretPrototype");
        t3 = renderEditable._editable$_textPainter;
        t3._computeCaretMetrics$2(caretTextPosition, t2);
        t4 = t3.__TextPainter__caretMetrics_A;
        t4 === $ && B.throwLateFieldNI("_caretMetrics");
        caretRect = t2.shift$1(t4.offset.$add(0, _this._cursorOffset));
        t3._computeCaretMetrics$2(caretTextPosition, t2);
        caretHeight = t3.__TextPainter__caretMetrics_A.fullHeight;
        if (caretHeight != null)
          switch (B.defaultTargetPlatform().index) {
            case 2:
            case 4:
              t2 = caretRect.top;
              t3 = caretRect.bottom - t2;
              t4 = caretRect.left;
              t2 += (caretHeight - t3) / 2;
              caretRect = new B.Rect(t4, t2, t4 + (caretRect.right - t4), t2 + t3);
              break;
            case 0:
            case 1:
            case 3:
            case 5:
              t2 = caretRect.left;
              t3 = caretRect.top - 2;
              caretRect = new B.Rect(t2, t3, t2 + (caretRect.right - t2), t3 + caretHeight);
              break;
          }
        caretRect = caretRect.shift$1(renderEditable.get$_editable$_paintOffset());
        integralRect = caretRect.shift$1(renderEditable._snapToPhysicalPixel$1(new B.Offset(caretRect.left, caretRect.top)));
        if (_this._shouldPaint) {
          radius = _this._cursorRadius;
          t2 = _this.caretPaint;
          t2.set$color(0, caretColor);
          if (radius == null)
            canvas.drawRect$2(integralRect, t2);
          else
            canvas.drawRRect$2(B.RRect$fromRectAndRadius(integralRect, radius), t2);
        }
        _this.caretPaintCallback.call$1(integralRect);
      }
      t2 = _this._caretColor;
      if (t2 == null)
        floatingCursorColor = null;
      else {
        t2 = t2.value;
        floatingCursorColor = B.Color$fromARGB(191, t2 >>> 16 & 255, t2 >>> 8 & 255, t2 & 255);
      }
      if (t1 || floatingCursorColor == null || !_this._shouldPaint)
        return;
      t1 = B.RRect$fromRectAndRadius(floatingCursorRect.shift$1(renderEditable.get$_editable$_paintOffset()), D.Radius_1_1);
      value = _this.___FloatingCursorPainter_floatingCursorPaint_FI;
      if (value === $) {
        result = $.$get$_renderer().createPaint$0();
        _this.___FloatingCursorPainter_floatingCursorPaint_FI !== $ && B.throwLateFieldADI("floatingCursorPaint");
        _this.___FloatingCursorPainter_floatingCursorPaint_FI = result;
        value = result;
      }
      value.set$color(0, floatingCursorColor);
      canvas.drawRRect$2(t1, value);
    },
    shouldRepaint$1(oldDelegate) {
      var _this = this;
      if (_this === oldDelegate)
        return false;
      return !(oldDelegate instanceof A._FloatingCursorPainter) || oldDelegate._shouldPaint !== _this._shouldPaint || oldDelegate.showRegularCaret !== _this.showRegularCaret || !J.$eq$(oldDelegate._caretColor, _this._caretColor) || !J.$eq$(oldDelegate._cursorRadius, _this._cursorRadius) || !oldDelegate._cursorOffset.$eq(0, _this._cursorOffset) || !J.$eq$(oldDelegate._backgroundCursorColor, _this._backgroundCursorColor) || !J.$eq$(oldDelegate._floatingCursorRect, _this._floatingCursorRect);
    }
  };
  A._CompositeRenderEditablePainter.prototype = {
    addListener$1(_, listener) {
      var t1, t2, _i;
      type$.void_Function._as(listener);
      for (t1 = this.painters, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, B.throwConcurrentModificationError)(t1), ++_i)
        t1[_i].addListener$1(0, listener);
    },
    removeListener$1(_, listener) {
      var t1, t2, _i;
      type$.void_Function._as(listener);
      for (t1 = this.painters, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, B.throwConcurrentModificationError)(t1), ++_i)
        t1[_i].removeListener$1(0, listener);
    },
    paint$3(canvas, size, renderEditable) {
      var t1, t2, _i;
      for (t1 = this.painters, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, B.throwConcurrentModificationError)(t1), ++_i)
        t1[_i].paint$3(canvas, size, renderEditable);
    },
    shouldRepaint$1(oldDelegate) {
      var t1, t2, oldPainters, t3, newPainters, t4;
      if (oldDelegate === this)
        return false;
      if (!(oldDelegate instanceof A._CompositeRenderEditablePainter) || oldDelegate.painters.length !== this.painters.length)
        return true;
      t1 = oldDelegate.painters;
      t2 = B._arrayInstanceType(t1);
      oldPainters = new J.ArrayIterator(t1, t1.length, t2._eval$1("ArrayIterator<1>"));
      t1 = this.painters;
      t3 = B._arrayInstanceType(t1);
      newPainters = new J.ArrayIterator(t1, t1.length, t3._eval$1("ArrayIterator<1>"));
      t1 = t3._precomputed1;
      t2 = t2._precomputed1;
      while (true) {
        if (!(oldPainters.moveNext$0() && newPainters.moveNext$0()))
          break;
        t3 = newPainters.__interceptors$_current;
        if (t3 == null)
          t3 = t1._as(t3);
        t4 = oldPainters.__interceptors$_current;
        if (t3.shouldRepaint$1(t4 == null ? t2._as(t4) : t4))
          return true;
      }
      return false;
    }
  };
  A._RenderEditable_RenderBox_RelayoutWhenSystemFontsChangeMixin.prototype = {
    attach$1(owner) {
      this.super$RenderObject$attach(type$.PipelineOwner._as(owner));
      $.PaintingBinding__instance.PaintingBinding__systemFonts._systemFontsCallbacks.add$1(0, type$.void_Function._as(this.get$systemFontsDidChange()));
    },
    detach$0(_) {
      $.PaintingBinding__instance.PaintingBinding__systemFonts._systemFontsCallbacks.remove$1(0, type$.void_Function._as(this.get$systemFontsDidChange()));
      this.super$AbstractNode$detach(0);
    }
  };
  A._RenderEditable_RenderBox_RelayoutWhenSystemFontsChangeMixin_ContainerRenderObjectMixin.prototype = {
    attach$1(owner) {
      var child, t1, t2;
      type$.PipelineOwner._as(owner);
      this.super$_RenderEditable_RenderBox_RelayoutWhenSystemFontsChangeMixin$attach(owner);
      child = this.ContainerRenderObjectMixin__firstChild;
      for (t1 = type$.TextParentData; child != null;) {
        child.attach$1(owner);
        t2 = child.parentData;
        t2.toString;
        child = t1._as(t2).ContainerParentDataMixin_nextSibling;
      }
    },
    detach$0(_) {
      var child, t1, t2;
      this.super$_RenderEditable_RenderBox_RelayoutWhenSystemFontsChangeMixin$detach(0);
      child = this.ContainerRenderObjectMixin__firstChild;
      for (t1 = type$.TextParentData; child != null;) {
        child.detach$0(0);
        t2 = child.parentData;
        t2.toString;
        child = t1._as(t2).ContainerParentDataMixin_nextSibling;
      }
    }
  };
  A._RenderEditable_RenderBox_RelayoutWhenSystemFontsChangeMixin_ContainerRenderObjectMixin_RenderBoxContainerDefaultsMixin.prototype = {};
  A.LayerLink.prototype = {
    _registerLeader$1(leader) {
      this._leader = leader;
    },
    _unregisterLeader$1(leader) {
      if (this._leader === leader)
        this._leader = null;
    },
    toString$0(_) {
      var t1 = B.shortHash(this),
        t2 = this._leader != null ? "<linked>" : "<dangling>";
      return "<optimized out>#" + t1 + "(" + t2 + ")";
    }
  };
  A.FollowerLayer.prototype = {
    _transformOffset$1(localPosition) {
      var t1, vector, t2, t3, _this = this;
      if (_this._inverseDirty) {
        t1 = _this.getLastTransform$0();
        t1.toString;
        _this._invertedTransform = B.Matrix4_tryInvert(t1);
        _this._inverseDirty = false;
      }
      if (_this._invertedTransform == null)
        return null;
      vector = new B.Vector4(new Float64Array(4));
      vector.setValues$4(localPosition._dx, localPosition._dy, 0, 1);
      t1 = _this._invertedTransform.transform$1(0, vector)._v4storage;
      t2 = t1[0];
      t3 = _this.linkedOffset;
      return new B.Offset(t2 - t3._dx, t1[1] - t3._dy);
    },
    findAnnotations$1$3$onlyFirst(result, localPosition, onlyFirst, $S) {
      var transformedOffset;
      B.checkTypeBound($S, type$.Object, "S", "findAnnotations");
      $S._eval$1("AnnotationResult<0>")._as(result);
      if (this._layer$_link._leader == null)
        return false;
      transformedOffset = this._transformOffset$1(localPosition);
      if (transformedOffset == null)
        return false;
      return this.super$ContainerLayer$findAnnotations(result, transformedOffset, true, $S);
    },
    getLastTransform$0() {
      var t1, result;
      if (this._layer$_lastTransform == null)
        return null;
      t1 = this._lastOffset;
      result = B.Matrix4_Matrix4$translationValues(-t1._dx, -t1._dy, 0);
      t1 = this._layer$_lastTransform;
      t1.toString;
      result.multiply$1(0, t1);
      return result;
    },
    _establishTransform$0() {
      var leader, t1, forwardLayers, inverseLayers, forwardTransform, inverseTransform, _this = this;
      _this._layer$_lastTransform = null;
      leader = _this._layer$_link._leader;
      if (leader == null)
        return;
      t1 = type$.JSArray_ContainerLayer;
      forwardLayers = B._setArrayType([leader], t1);
      inverseLayers = B._setArrayType([_this], t1);
      A.FollowerLayer__pathsToCommonAncestor(leader, _this, forwardLayers, inverseLayers);
      forwardTransform = A.FollowerLayer__collectTransformForLayerChain(forwardLayers);
      leader.applyTransform$2(null, forwardTransform);
      t1 = _this.linkedOffset;
      forwardTransform.translate$2(0, t1._dx, t1._dy);
      inverseTransform = A.FollowerLayer__collectTransformForLayerChain(inverseLayers);
      if (inverseTransform.copyInverse$1(inverseTransform) === 0)
        return;
      inverseTransform.multiply$1(0, forwardTransform);
      _this._layer$_lastTransform = inverseTransform;
      _this._inverseDirty = true;
    },
    get$alwaysNeedsAddToScene() {
      return true;
    },
    addToScene$1(builder) {
      var t1, t2, _this = this;
      if (_this._layer$_link._leader == null && true) {
        _this._lastOffset = _this._layer$_lastTransform = null;
        _this._inverseDirty = true;
        _this.set$engineLayer(null);
        return;
      }
      _this._establishTransform$0();
      t1 = _this._layer$_lastTransform;
      t2 = type$.nullable_TransformEngineLayer;
      if (t1 != null) {
        _this._lastOffset = _this.unlinkedOffset;
        _this.set$engineLayer(builder.pushTransform$2$oldLayer(t1._m4storage, t2._as(_this._engineLayer)));
        _this.addChildrenToScene$1(builder);
        builder.pop$0();
      } else {
        _this._lastOffset = null;
        t1 = _this.unlinkedOffset;
        _this.set$engineLayer(builder.pushTransform$2$oldLayer(B.Matrix4_Matrix4$translationValues(t1._dx, t1._dy, 0)._m4storage, t2._as(_this._engineLayer)));
        _this.addChildrenToScene$1(builder);
        builder.pop$0();
      }
      _this._inverseDirty = true;
    },
    applyTransform$2(child, transform) {
      var t1 = this._layer$_lastTransform;
      if (t1 != null)
        transform.multiply$1(0, t1);
      else {
        t1 = this.unlinkedOffset;
        transform.multiply$1(0, B.Matrix4_Matrix4$translationValues(t1._dx, t1._dy, 0));
      }
    }
  };
  A.RenderLeaderLayer.prototype = {
    set$link(value) {
      var _this = this,
        t1 = _this._proxy_box$_link;
      if (t1 === value)
        return;
      t1.leaderSize = null;
      _this._proxy_box$_link = value;
      t1 = _this._previousLayoutSize;
      if (t1 != null)
        value.leaderSize = t1;
      _this.markNeedsPaint$0();
    },
    get$alwaysNeedsCompositing() {
      return true;
    },
    performLayout$0() {
      var t1, _this = this;
      _this.super$RenderProxyBoxMixin$performLayout();
      t1 = _this._size;
      t1.toString;
      _this._previousLayoutSize = t1;
      _this._proxy_box$_link.leaderSize = t1;
    },
    paint$2(context, offset) {
      var t1 = this._layerHandle,
        t2 = t1._layer,
        t3 = this._proxy_box$_link;
      if (t2 == null)
        t1.set$layer(0, B.LeaderLayer$(t3, offset));
      else {
        type$.LeaderLayer._as(t2);
        t2.set$link(t3);
        t2.set$offset(0, offset);
      }
      t1 = t1._layer;
      t1.toString;
      context.pushLayer$3(t1, B.RenderProxyBoxMixin.prototype.get$paint.call(this), C.Offset_0_0);
    }
  };
  A.RenderFollowerLayer.prototype = {
    set$link(value) {
      if (this._proxy_box$_link === value)
        return;
      this._proxy_box$_link = value;
      this.markNeedsPaint$0();
    },
    set$showWhenUnlinked(value) {
      return;
    },
    set$offset(_, value) {
      if (this._proxy_box$_offset.$eq(0, value))
        return;
      this._proxy_box$_offset = value;
      this.markNeedsPaint$0();
    },
    set$leaderAnchor(value) {
      if (this._leaderAnchor.$eq(0, value))
        return;
      this._leaderAnchor = value;
      this.markNeedsPaint$0();
    },
    set$followerAnchor(value) {
      if (this._followerAnchor.$eq(0, value))
        return;
      this._followerAnchor = value;
      this.markNeedsPaint$0();
    },
    detach$0(_) {
      this._layerHandle.set$layer(0, null);
      this.super$_RenderProxyBox_RenderBox_RenderObjectWithChildMixin$detach(0);
    },
    get$alwaysNeedsCompositing() {
      return true;
    },
    getCurrentTransform$0() {
      var t1 = type$.nullable_FollowerLayer._as(B.RenderObject.prototype.get$layer.call(this, this));
      t1 = t1 == null ? null : t1.getLastTransform$0();
      if (t1 == null) {
        t1 = new B.Matrix4(new Float64Array(16));
        t1.setIdentity$0();
      }
      return t1;
    },
    hitTest$2$position(result, position) {
      if (this._proxy_box$_link._leader == null && true)
        return false;
      return this.hitTestChildren$2$position(result, position);
    },
    hitTestChildren$2$position(result, position) {
      return result.addWithPaintTransform$3$hitTest$position$transform(new A.RenderFollowerLayer_hitTestChildren_closure(this), position, this.getCurrentTransform$0());
    },
    paint$2(context, offset) {
      var effectiveLinkedOffset, t1, t2, t3, _this = this,
        leaderSize = _this._proxy_box$_link.leaderSize;
      if (leaderSize == null)
        effectiveLinkedOffset = _this._proxy_box$_offset;
      else {
        t1 = _this._leaderAnchor.alongSize$1(leaderSize);
        t2 = _this._followerAnchor;
        t3 = _this._size;
        t3.toString;
        effectiveLinkedOffset = t1.$sub(0, t2.alongSize$1(t3)).$add(0, _this._proxy_box$_offset);
      }
      t1 = type$.nullable_FollowerLayer;
      if (t1._as(B.RenderObject.prototype.get$layer.call(_this, _this)) == null) {
        t2 = new A.FollowerLayer(_this._proxy_box$_link, false, offset, effectiveLinkedOffset, B.LinkedHashMap_LinkedHashMap$_empty(type$.int, type$.void_Function), B.LayerHandle$(type$.Layer));
        t2.Layer$0();
        _this._layerHandle.set$layer(0, t2);
      } else {
        t2 = t1._as(B.RenderObject.prototype.get$layer.call(_this, _this));
        if (t2 != null) {
          t2._layer$_link = _this._proxy_box$_link;
          t2.showWhenUnlinked = false;
          t2.linkedOffset = effectiveLinkedOffset;
          t2.unlinkedOffset = offset;
        }
      }
      t1 = t1._as(B.RenderObject.prototype.get$layer.call(_this, _this));
      t1.toString;
      context.pushLayer$4$childPaintBounds(t1, B.RenderProxyBoxMixin.prototype.get$paint.call(_this), C.Offset_0_0, D.Rect_Vy7);
    },
    applyPaintTransform$2(child, transform) {
      type$.RenderBox._as(child);
      transform.multiply$1(0, this.getCurrentTransform$0());
    }
  };
  A.AutofillConfiguration.prototype = {
    toJson$0() {
      var t1, _this = this;
      if (_this.enabled) {
        t1 = B.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic);
        t1.$indexSet(0, "uniqueIdentifier", _this.uniqueIdentifier);
        t1.$indexSet(0, "hints", _this.autofillHints);
        t1.$indexSet(0, "editingValue", _this.currentEditingValue.toJSON$0());
      } else
        t1 = null;
      return t1;
    }
  };
  A.ClipboardData.prototype = {};
  A.SuggestionSpan.prototype = {
    $eq(_, other) {
      var t1, t2;
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (other instanceof A.SuggestionSpan) {
        t1 = other.range;
        t2 = this.range;
        t1 = t1.start === t2.start && t1.end === t2.end && B.listEquals(other.suggestions, this.suggestions, type$.String);
      } else
        t1 = false;
      return t1;
    },
    get$hashCode(_) {
      var t1 = this.range;
      return B.Object_hash(t1.start, t1.end, B.Object_hashAll(this.suggestions), C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue);
    }
  };
  A.SpellCheckResults.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      return other instanceof A.SpellCheckResults && other.spellCheckedText === this.spellCheckedText && B.listEquals(other.suggestionSpans, this.suggestionSpans, type$.SuggestionSpan);
    },
    get$hashCode(_) {
      return B.Object_hash(this.spellCheckedText, B.Object_hashAll(this.suggestionSpans), C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue);
    }
  };
  A.DefaultSpellCheckService.prototype = {
    fetchSpellCheckSuggestions$2(locale, text) {
      return this.fetchSpellCheckSuggestions$body$DefaultSpellCheckService(locale, text);
    },
    fetchSpellCheckSuggestions$body$DefaultSpellCheckService(locale, text) {
      var $async$goto = 0,
        $async$completer = B._makeAsyncAwaitCompleter(type$.nullable_List_SuggestionSpan),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, t1, exception, suggestionSpans, t2, t3, t4, t5, resultMap, spansHaveChanged, rawResults, languageTag, $async$exception, $async$temp1;
      var $async$fetchSpellCheckSuggestions$2 = B._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              rawResults = null;
              languageTag = locale._rawToString$1("-");
              $async$handler = 4;
              t1 = $async$self.__DefaultSpellCheckService_spellCheckChannel_A;
              t1 === $ && B.throwLateFieldNI("spellCheckChannel");
              $async$temp1 = type$.List_dynamic;
              $async$goto = 7;
              return B._asyncAwait(t1.invokeMethod$1$2("SpellCheck.initiateSpellCheck", B._setArrayType([languageTag, text], type$.JSArray_String), type$.dynamic), $async$fetchSpellCheckSuggestions$2);
            case 7:
              // returning from await.
              rawResults = $async$temp1._as($async$result);
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
              suggestionSpans = B._setArrayType([], type$.JSArray_SuggestionSpan);
              for (t1 = J.get$iterator$ax(rawResults), t2 = type$.Map_dynamic_dynamic, t3 = type$.String, t4 = type$.dynamic, t5 = type$.List_dynamic; t1.moveNext$0();) {
                resultMap = B.LinkedHashMap_LinkedHashMap$from(t2._as(t1.get$current(t1)), t3, t4);
                C.JSArray_methods.add$1(suggestionSpans, new A.SuggestionSpan(new B.TextRange(B._asInt(resultMap.$index(0, "startIndex")), B._asInt(resultMap.$index(0, "endIndex"))), J.cast$1$0$ax(t5._as(resultMap.$index(0, "suggestions")), t3)));
              }
              t1 = $async$self.lastSavedResults;
              if (t1 != null) {
                t2 = t1.spellCheckedText;
                spansHaveChanged = B.listEquals(t1.suggestionSpans, suggestionSpans, type$.SuggestionSpan);
                if (t2 === text && spansHaveChanged)
                  suggestionSpans = A.DefaultSpellCheckService_mergeResults($async$self.lastSavedResults.suggestionSpans, suggestionSpans);
              }
              $async$self.lastSavedResults = new A.SpellCheckResults(text, suggestionSpans);
              $async$returnValue = suggestionSpans;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return B._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return B._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return B._asyncStartSync($async$fetchSpellCheckSuggestions$2, $async$completer);
    },
    $isSpellCheckService: 1
  };
  A.MaxLengthEnforcement.prototype = {
    _enumToString$0() {
      return "MaxLengthEnforcement." + this._core$_name;
    }
  };
  A.TextInputFormatter.prototype = {};
  A._MutableTextRange.prototype = {
    set$base(base) {
      this.base = B._asInt(base);
    },
    set$extent(extent) {
      this.extent = B._asInt(extent);
    }
  };
  A._TextEditingValueAccumulator.prototype = {};
  A.FilteringTextInputFormatter.prototype = {
    formatEditUpdate$2(oldValue, newValue) {
      var t2, formatState, matches, previousMatch, t3, t4, t5, selection, composingRegion, _this = this, _null = null,
        t1 = newValue.selection;
      t1 = t1.get$isValid() ? new A._MutableTextRange(t1.baseOffset, t1.extentOffset) : _null;
      t2 = newValue.composing;
      t2 = t2.get$isValid() && t2.start !== t2.end ? new A._MutableTextRange(t2.start, t2.end) : _null;
      formatState = new A._TextEditingValueAccumulator(newValue, new B.StringBuffer(""), t1, t2);
      t2 = newValue.text;
      matches = C.JSString_methods.allMatches$1(_this.filterPattern, t2);
      for (t1 = new B._StringAllMatchesIterator(matches._input, matches._pattern, matches.__js_helper$_index), previousMatch = _null; t1.moveNext$0(); previousMatch = t3) {
        t3 = t1.__js_helper$_current;
        t3.toString;
        t4 = previousMatch == null ? _null : previousMatch.start + previousMatch.pattern.length;
        if (t4 == null)
          t4 = 0;
        t5 = t3.start;
        _this._processRegion$4(false, t4, t5, formatState);
        _this._processRegion$4(true, t5, t5 + t3.pattern.length, formatState);
      }
      t1 = previousMatch == null ? _null : previousMatch.start + previousMatch.pattern.length;
      if (t1 == null)
        t1 = 0;
      _this._processRegion$4(false, t1, t2.length, formatState);
      t2 = formatState.debugFinalized = true;
      selection = formatState.selection;
      composingRegion = formatState.composingRegion;
      t1 = formatState.stringBuffer._contents;
      t2 = (composingRegion != null ? composingRegion.base === composingRegion.extent : t2) ? C.TextRange_m1_m1 : new B.TextRange(composingRegion.base, composingRegion.extent);
      if (selection == null)
        t3 = C.TextSelection_ke5;
      else {
        t3 = formatState.inputValue.selection;
        t3 = B.TextSelection$(t3.affinity, selection.base, selection.extent, t3.isDirectional);
      }
      return new B.TextEditingValue(t1.charCodeAt(0) == 0 ? t1 : t1, t3, t2);
    },
    _processRegion$4(isBannedRegion, regionStart, regionEnd, state) {
      var replacementString, t1, t2, t3, t4, t5;
      if (isBannedRegion)
        replacementString = regionStart === regionEnd ? "" : this.replacementString;
      else
        replacementString = C.JSString_methods.substring$2(state.inputValue.text, regionStart, regionEnd);
      state.stringBuffer._contents += replacementString;
      if (replacementString.length === regionEnd - regionStart)
        return;
      t1 = new A.FilteringTextInputFormatter__processRegion_adjustIndex(regionStart, regionEnd, replacementString);
      t2 = state.selection;
      t3 = t2 == null;
      if (!t3) {
        t4 = t2.base;
        t5 = t1.call$1(state.inputValue.selection.baseOffset);
        if (typeof t5 !== "number")
          return B.iae(t5);
        t2.set$base(t4 + t5);
      }
      if (!t3) {
        t3 = t2.extent;
        t4 = t1.call$1(state.inputValue.selection.extentOffset);
        if (typeof t4 !== "number")
          return B.iae(t4);
        t2.set$extent(t3 + t4);
      }
      t2 = state.composingRegion;
      t3 = t2 == null;
      if (!t3) {
        t4 = t2.base;
        t5 = t1.call$1(state.inputValue.composing.start);
        if (typeof t5 !== "number")
          return B.iae(t5);
        t2.set$base(t4 + t5);
      }
      if (!t3) {
        t3 = t2.extent;
        t1 = t1.call$1(state.inputValue.composing.end);
        if (typeof t1 !== "number")
          return B.iae(t1);
        t2.set$extent(t3 + t1);
      }
    }
  };
  A.SmartDashesType.prototype = {
    _enumToString$0() {
      return "SmartDashesType." + this._core$_name;
    }
  };
  A.SmartQuotesType.prototype = {
    _enumToString$0() {
      return "SmartQuotesType." + this._core$_name;
    }
  };
  A.TextCapitalization0.prototype = {
    _enumToString$0() {
      return "TextCapitalization." + this._core$_name;
    }
  };
  A.TextInputConfiguration.prototype = {
    toJson$0() {
      var _this = this,
        autofill = _this.autofillConfiguration.toJson$0(),
        t1 = B.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic);
      t1.$indexSet(0, "inputType", _this.inputType.toJson$0());
      t1.$indexSet(0, "readOnly", _this.readOnly);
      t1.$indexSet(0, "obscureText", false);
      t1.$indexSet(0, "autocorrect", true);
      t1.$indexSet(0, "smartDashesType", C.JSInt_methods.toString$0(_this.smartDashesType.index));
      t1.$indexSet(0, "smartQuotesType", C.JSInt_methods.toString$0(_this.smartQuotesType.index));
      t1.$indexSet(0, "enableSuggestions", true);
      t1.$indexSet(0, "enableInteractiveSelection", _this.enableInteractiveSelection);
      t1.$indexSet(0, "actionLabel", null);
      t1.$indexSet(0, "inputAction", _this.inputAction._enumToString$0());
      t1.$indexSet(0, "textCapitalization", _this.textCapitalization._enumToString$0());
      t1.$indexSet(0, "keyboardAppearance", _this.keyboardAppearance._enumToString$0());
      t1.$indexSet(0, "enableIMEPersonalizedLearning", true);
      if (autofill != null)
        t1.$indexSet(0, "autofill", autofill);
      t1.$indexSet(0, "enableDeltaModel", false);
      return t1;
    }
  };
  A.TextSelectionDelegate.prototype = {
    get$copyEnabled() {
      return true;
    },
    get$selectAllEnabled() {
      return true;
    }
  };
  A.TextInputClient.prototype = {};
  A.SelectionRect.prototype = {
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (B.getRuntimeType(_this) !== J.get$runtimeType$(other))
        return false;
      return other instanceof A.SelectionRect && other.position === _this.position && other.bounds.$eq(0, _this.bounds);
    },
    get$hashCode(_) {
      return B.Object_hash(this.position, this.bounds, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue);
    },
    toString$0(_) {
      return "SelectionRect(" + this.position + ", " + this.bounds.toString$0(0) + ")";
    }
  };
  A.TextInputConnection.prototype = {
    setComposingRect$1(rect) {
      var validRect;
      if (rect.$eq(0, this._text_input$_cachedRect))
        return;
      this._text_input$_cachedRect = rect;
      validRect = rect.get$isFinite(rect) ? rect : new B.Rect(0, 0, -1, -1);
      $.$get$TextInput__instance()._setComposingTextRect$1(validRect);
    },
    setCaretRect$1(rect) {
      var validRect;
      if (rect.$eq(0, this._cachedCaretRect))
        return;
      this._cachedCaretRect = rect;
      validRect = rect.get$isFinite(rect) ? rect : new B.Rect(0, 0, -1, -1);
      $.$get$TextInput__instance()._setCaretRect$1(validRect);
    },
    setStyle$5$fontFamily$fontSize$fontWeight$textAlign$textDirection(fontFamily, fontSize, fontWeight, textAlign, textDirection) {
      $.$get$TextInput__instance()._setStyle$5$fontFamily$fontSize$fontWeight$textAlign$textDirection(fontFamily, fontSize, fontWeight, textAlign, textDirection);
    },
    set$_cachedSelectionRects(_cachedSelectionRects) {
      this._cachedSelectionRects = type$.List_SelectionRect._as(_cachedSelectionRects);
    }
  };
  A.AnimatedSize.prototype = {
    createState$0() {
      return new A._AnimatedSizeState(null, null, C._StateLifecycle_0);
    }
  };
  A._AnimatedSizeState.prototype = {
    build$1(context) {
      var t1 = this._widget;
      return new A._AnimatedSize(C.Alignment_0_0, C.C__Linear, t1.duration, null, this, C.Clip_1, t1.child, null);
    },
    $isTickerProvider: 1
  };
  A._AnimatedSize.prototype = {
    createRenderObject$1(context) {
      var _this = this;
      return A.RenderAnimatedSize$(_this.alignment, _this.clipBehavior, _this.curve, _this.duration, _this.reverseDuration, B.Directionality_maybeOf(context), _this.vsync);
    },
    updateRenderObject$2(context, renderObject) {
      var t1, _this = this;
      type$.RenderAnimatedSize._as(renderObject);
      renderObject.set$alignment(_this.alignment);
      renderObject.set$duration(0, _this.duration);
      renderObject.set$reverseDuration(_this.reverseDuration);
      renderObject.set$curve(0, _this.curve);
      renderObject.set$vsync(_this.vsync);
      renderObject.set$textDirection(B.Directionality_maybeOf(context));
      t1 = _this.clipBehavior;
      if (t1 !== renderObject._animated_size$_clipBehavior) {
        renderObject._animated_size$_clipBehavior = t1;
        renderObject.markNeedsPaint$0();
        renderObject.markNeedsSemanticsUpdate$0();
      }
    }
  };
  A.__AnimatedSizeState_State_SingleTickerProviderStateMixin.prototype = {
    dispose$0() {
      var _this = this,
        t1 = _this.SingleTickerProviderStateMixin__tickerModeNotifier;
      if (t1 != null)
        t1.removeListener$1(0, _this.get$_updateTicker());
      _this.set$_tickerModeNotifier(null);
      _this.super$State$dispose();
    },
    activate$0() {
      this.super$State$activate();
      this._updateTickerModeNotifier$0();
      this._updateTicker$0();
    }
  };
  A.CompositedTransformTarget.prototype = {
    createRenderObject$1(context) {
      var t1 = new A.RenderLeaderLayer(this.link, null, B.LayerHandle$(type$.ContainerLayer));
      t1.RenderObject$0();
      t1.set$child(null);
      return t1;
    },
    updateRenderObject$2(context, renderObject) {
      type$.RenderLeaderLayer._as(renderObject).set$link(this.link);
    }
  };
  A.CompositedTransformFollower.prototype = {
    createRenderObject$1(context) {
      var t1 = new A.RenderFollowerLayer(this.link, false, this.offset, C.Alignment_m1_m1, C.Alignment_m1_m1, null, B.LayerHandle$(type$.ContainerLayer));
      t1.RenderObject$0();
      t1.set$child(null);
      return t1;
    },
    updateRenderObject$2(context, renderObject) {
      type$.RenderFollowerLayer._as(renderObject);
      renderObject.set$link(this.link);
      renderObject.set$showWhenUnlinked(false);
      renderObject.set$offset(0, this.offset);
      renderObject.set$leaderAnchor(C.Alignment_m1_m1);
      renderObject.set$followerAnchor(C.Alignment_m1_m1);
    }
  };
  A.ContextMenuButtonType.prototype = {
    _enumToString$0() {
      return "ContextMenuButtonType." + this._core$_name;
    }
  };
  A.ContextMenuButtonItem.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (J.get$runtimeType$(other) !== B.getRuntimeType(this))
        return false;
      return other instanceof A.ContextMenuButtonItem && J.$eq$(other.onPressed, this.onPressed) && other.type === this.type;
    },
    get$hashCode(_) {
      return B.Object_hash(null, this.onPressed, this.type, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue);
    },
    toString$0(_) {
      return "ContextMenuButtonItem " + this.type.toString$0(0) + ", null";
    }
  };
  A.ContextMenuController.prototype = {
    show$2$context$contextMenuBuilder(_, context, contextMenuBuilder) {
      var t1, t2;
      type$.Widget_Function_BuildContext._as(contextMenuBuilder);
      A.ContextMenuController_removeAny();
      t1 = context.findRootAncestorStateOfType$1$0(type$.OverlayState);
      t1.toString;
      t2 = A.Navigator_maybeOf(context);
      if (t2 == null)
        t2 = null;
      else {
        t2 = t2._framework$_element;
        t2.toString;
      }
      t2 = B.OverlayEntry$(new A.ContextMenuController_show_closure(B.InheritedTheme_capture(context, t2), contextMenuBuilder), false);
      $.ContextMenuController__menuOverlayEntry = t2;
      t1.insert$1(0, t2);
      $.ContextMenuController__shownInstance = this;
    },
    remove$0(_) {
      if ($.ContextMenuController__shownInstance !== this)
        return;
      A.ContextMenuController_removeAny();
    }
  };
  A.DesktopTextSelectionToolbarLayoutDelegate.prototype = {
    getConstraintsForChild$1(constraints) {
      return new B.BoxConstraints(0, constraints.maxWidth, 0, constraints.maxHeight);
    },
    getPositionForChild$2(size, childSize) {
      var t4,
        t1 = this.anchor,
        t2 = t1._dx,
        t3 = t2 + childSize._dx - size._dx;
      t1 = t1._dy;
      t4 = t1 + childSize._dy - size._dy;
      if (t3 > 0)
        t2 -= t3;
      return new B.Offset(t2, t4 > 0 ? t1 - t4 : t1);
    },
    shouldRelayout$1(oldDelegate) {
      return !this.anchor.$eq(0, type$.DesktopTextSelectionToolbarLayoutDelegate._as(oldDelegate).anchor);
    }
  };
  A.TextEditingController.prototype = {
    buildTextSpan$3$context$style$withComposing(context, style, withComposing) {
      var composingStyle, t1, t2, t3, _null = null;
      if (!this._change_notifier$_value.get$isComposingRangeValid() || !withComposing)
        return B.TextSpan$(_null, style, this._change_notifier$_value.text);
      composingStyle = style.merge$1(D.TextStyle_9Zz);
      t1 = this._change_notifier$_value;
      t2 = t1.composing;
      t1 = t1.text;
      t3 = t2.start;
      t2 = t2.end;
      return B.TextSpan$(B._setArrayType([B.TextSpan$(_null, _null, C.JSString_methods.substring$2(t1, 0, t3)), B.TextSpan$(_null, composingStyle, C.JSString_methods.substring$2(t1, t3, t2)), B.TextSpan$(_null, _null, C.JSString_methods.substring$1(t1, t2))], type$.JSArray_TextSpan), style, _null);
    },
    set$selection(newSelection) {
      var t1, t2, t3, newComposing, _this = this;
      if (!_this.isSelectionWithinTextBounds$1(newSelection))
        throw B.wrapException(B.FlutterError_FlutterError("invalid text selection: " + newSelection.toString$0(0)));
      t1 = newSelection.start;
      t2 = newSelection.end;
      if (t1 === t2) {
        t3 = _this._change_notifier$_value.composing;
        t1 = t1 >= t3.start && t2 <= t3.end;
      } else
        t1 = false;
      newComposing = t1 ? _this._change_notifier$_value.composing : C.TextRange_m1_m1;
      _this.super$ValueNotifier$value(0, _this._change_notifier$_value.copyWith$2$composing$selection(newComposing, newSelection));
    },
    isSelectionWithinTextBounds$1(selection) {
      var t1 = this._change_notifier$_value.text.length;
      return selection.start <= t1 && selection.end <= t1;
    }
  };
  A.ToolbarOptions.prototype = {};
  A._KeyFrame.prototype = {};
  A._DiscreteKeyFrameSimulation.prototype = {
    dx$1(_, time) {
      return 0;
    },
    isDone$1(time) {
      return time >= this.maxDuration;
    },
    x$1(_, time) {
      var endIndex, searchIndex, searchIndex0,
        t1 = this._keyFrames,
        t2 = this._lastKeyFrameIndex;
      if (!(t2 < 11))
        return B.ioore(t1, t2);
      if (t1[t2].time > time) {
        endIndex = t2;
        searchIndex = 0;
      } else {
        searchIndex = t2;
        endIndex = 11;
      }
      for (t2 = endIndex - 1; searchIndex < t2; searchIndex = searchIndex0) {
        searchIndex0 = searchIndex + 1;
        if (time < t1[searchIndex0].time)
          break;
      }
      this._lastKeyFrameIndex = searchIndex;
      if (!(searchIndex < 11))
        return B.ioore(t1, searchIndex);
      return t1[searchIndex].value;
    }
  };
  A.EditableText.prototype = {
    get$strutStyle() {
      var t1 = this.style,
        t2 = t1.get$fontFamilyFallback();
      return new A.StrutStyle(t1.fontFamily, t2, t1.fontSize, t1.height, t1.fontWeight, t1.fontStyle, null, true, t1.debugLabel);
    },
    createState$0() {
      var _null = null,
        t1 = type$.LabeledGlobalKey_State_StatefulWidget;
      return new A.EditableTextState(B.ValueNotifier$(true, type$.bool), new B.LabeledGlobalKey(_null, t1), new B.LabeledGlobalKey(_null, t1), new A.LayerLink(), new A.LayerLink(), new A.LayerLink(), _null, _null, _null, C._StateLifecycle_0);
    }
  };
  A.EditableTextState.prototype = {
    get$_cursorBlinkOpacityController() {
      var t2, t3, _this = this, _null = null,
        t1 = _this._backingCursorBlinkOpacityController;
      if (t1 == null) {
        t1 = B.AnimationController$(_null, _null, _null, _null, _this);
        t2 = type$.void_Function._as(_this.get$_onCursorColorTick());
        t1.didRegisterListener$0();
        t3 = t1.AnimationLocalListenersMixin__listeners;
        t3.$ti._precomputed1._as(t2);
        t3._isDirty = true;
        C.JSArray_methods.add$1(t3._list, t2);
        _this._backingCursorBlinkOpacityController = t1;
      }
      return t1;
    },
    get$_iosBlinkCursorSimulation() {
      var value = this.__EditableTextState__iosBlinkCursorSimulation_FI;
      if (value === $) {
        value !== $ && B.throwLateFieldADI("_iosBlinkCursorSimulation");
        value = this.__EditableTextState__iosBlinkCursorSimulation_FI = new A._DiscreteKeyFrameSimulation(1, D.List_WUp, C.Tolerance_Gdw);
      }
      return value;
    },
    get$_hasInputConnection() {
      var t1 = this._textInputConnection;
      t1 = t1 == null ? null : $.$get$TextInput__instance()._currentConnection === t1;
      return t1 === true;
    },
    get$_scrollController() {
      var t1 = this._widget.scrollController,
        t2 = this._internalScrollController;
      if (t2 == null) {
        t1 = B.ScrollController$(0);
        this._internalScrollController = t1;
      } else
        t1 = t2;
      return t1;
    },
    get$currentAutofillScope() {
      return this._currentAutofillScope;
    },
    get$wantKeepAlive() {
      return this._widget.focusNode.get$hasFocus();
    },
    get$cutEnabled() {
      var t1 = this._widget;
      if (!type$.TextSelectionHandleControls._is(t1.selectionControls))
        return t1.toolbarOptions.cut && !t1.readOnly && true;
      if (!t1.readOnly) {
        t1 = t1.controller._change_notifier$_value;
        t1 = t1.selection;
        t1 = t1.start !== t1.end;
      } else
        t1 = false;
      return t1;
    },
    get$copyEnabled() {
      var t1 = this._widget;
      if (!type$.TextSelectionHandleControls._is(t1.selectionControls))
        return t1.toolbarOptions.copy && true;
      t1 = t1.controller._change_notifier$_value;
      t1 = t1.selection;
      t1 = t1.start !== t1.end;
      return t1;
    },
    get$pasteEnabled() {
      var t1 = this._widget;
      if (!type$.TextSelectionHandleControls._is(t1.selectionControls))
        return t1.toolbarOptions.paste && !t1.readOnly;
      if (!t1.readOnly)
        t1 = true;
      else
        t1 = false;
      return t1;
    },
    get$selectAllEnabled() {
      var t2,
        t1 = this._widget;
      if (!type$.TextSelectionHandleControls._is(t1.selectionControls)) {
        if (t1.toolbarOptions.selectAll)
          t1 = t1.enableInteractiveSelection;
        else
          t1 = false;
        return t1;
      }
      if (t1.enableInteractiveSelection)
        t2 = false;
      else
        t2 = true;
      if (t2)
        return false;
      switch (B.defaultTargetPlatform().index) {
        case 4:
          return false;
        case 2:
          t1 = t1.controller._change_notifier$_value;
          if (t1.text.length !== 0) {
            t1 = t1.selection;
            t1 = t1.start === t1.end;
          } else
            t1 = false;
          return t1;
        case 0:
        case 1:
        case 3:
        case 5:
          t1 = t1.controller._change_notifier$_value;
          t2 = t1.text.length;
          if (t2 !== 0) {
            t1 = t1.selection;
            t1 = !(t1.start === 0 && t1.end === t2);
          } else
            t1 = false;
          return t1;
      }
    },
    get$_textEditingValueforTextLayoutMetrics() {
      var t1 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, this._editableKey),
        editableWidget = t1 == null ? null : t1.get$widget();
      if (!(editableWidget instanceof A._Editable))
        throw B.wrapException(B.StateError$("_Editable must be mounted."));
      return editableWidget.value;
    },
    copySelection$1(cause) {
      var _this = this,
        t1 = _this._widget.controller._change_notifier$_value,
        selection = t1.selection,
        t2 = selection.start,
        t3 = selection.end;
      if (t2 === t3 || false)
        return;
      A.Clipboard_setData(new A.ClipboardData(C.JSString_methods.substring$2(t1.text, t2, t3)));
      if (cause === D.SelectionChangedCause_5) {
        _this.bringIntoView$1(_this._widget.controller._change_notifier$_value.selection.get$extent());
        _this.hideToolbar$1(false);
        switch (B.defaultTargetPlatform().index) {
          case 2:
          case 4:
          case 3:
          case 5:
            break;
          case 0:
          case 1:
            t1 = _this._widget.controller._change_notifier$_value;
            _this.userUpdateTextEditingValue$2(new B.TextEditingValue(t1.text, A.TextSelection$collapsed(C.TextAffinity_1, t1.selection.end), C.TextRange_m1_m1), D.SelectionChangedCause_5);
            break;
        }
      }
    },
    cutSelection$1(cause) {
      var selection, text, t2, _this = this,
        t1 = _this._widget;
      if (t1.readOnly || false)
        return;
      t1 = t1.controller._change_notifier$_value;
      selection = t1.selection;
      text = t1.text;
      t1 = selection.start;
      t2 = selection.end;
      if (t1 === t2)
        return;
      A.Clipboard_setData(new A.ClipboardData(C.JSString_methods.substring$2(text, t1, t2)));
      _this._replaceText$1(new A.ReplaceTextIntent(_this._widget.controller._change_notifier$_value, "", selection, cause));
      if (cause === D.SelectionChangedCause_5) {
        t1 = $.SchedulerBinding__instance;
        t1.toString;
        C.JSArray_methods.add$1(t1.SchedulerBinding__postFrameCallbacks, type$.void_Function_Duration._as(new A.EditableTextState_cutSelection_closure(_this)));
        _this.hideToolbar$0();
      }
    },
    pasteText$1(cause) {
      var $async$goto = 0,
        $async$completer = B._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$self = this, selection, data, lastSelectionIndex, collapsedTextEditingValue, t1;
      var $async$pasteText$1 = B._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return B._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._widget;
              if (t1.readOnly) {
                // goto return
                $async$goto = 1;
                break;
              }
              selection = t1.controller._change_notifier$_value.selection;
              if (!selection.get$isValid()) {
                // goto return
                $async$goto = 1;
                break;
              }
              $async$goto = 3;
              return B._asyncAwait(A.Clipboard_getData("text/plain"), $async$pasteText$1);
            case 3:
              // returning from await.
              data = $async$result;
              if (data == null) {
                // goto return
                $async$goto = 1;
                break;
              }
              lastSelectionIndex = Math.max(selection.baseOffset, selection.extentOffset);
              collapsedTextEditingValue = $async$self._widget.controller._change_notifier$_value.copyWith$1$selection(A.TextSelection$collapsed(C.TextAffinity_1, lastSelectionIndex));
              t1 = data.text;
              t1.toString;
              $async$self.userUpdateTextEditingValue$2(collapsedTextEditingValue.replaced$2(selection, t1), cause);
              if (cause === D.SelectionChangedCause_5) {
                t1 = $.SchedulerBinding__instance;
                t1.toString;
                C.JSArray_methods.add$1(t1.SchedulerBinding__postFrameCallbacks, type$.void_Function_Duration._as(new A.EditableTextState_pasteText_closure($async$self)));
                $async$self.hideToolbar$0();
              }
            case 1:
              // return
              return B._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return B._asyncStartSync($async$pasteText$1, $async$completer);
    },
    selectAll$1(cause) {
      var _this = this,
        t1 = _this._widget;
      t1 = t1.controller._change_notifier$_value;
      _this.userUpdateTextEditingValue$2(t1.copyWith$1$selection(B.TextSelection$(C.TextAffinity_1, 0, t1.text.length, false)), cause);
      if (cause === D.SelectionChangedCause_5) {
        switch (B.defaultTargetPlatform().index) {
          case 0:
          case 2:
          case 1:
            break;
          case 4:
          case 3:
          case 5:
            _this.hideToolbar$0();
            break;
        }
        switch (B.defaultTargetPlatform().index) {
          case 0:
          case 1:
          case 3:
          case 5:
            _this.bringIntoView$1(_this._widget.controller._change_notifier$_value.selection.get$extent());
            break;
          case 4:
          case 2:
            break;
        }
      }
    },
    buttonItemsForToolbarOptions$0() {
      var t1, _this = this,
        toolbarOptions = _this._widget.toolbarOptions;
      if (toolbarOptions === D.ToolbarOptions_false_false_false_false)
        return null;
      t1 = B._setArrayType([], type$.JSArray_ContextMenuButtonItem);
      if (toolbarOptions.cut && _this.get$cutEnabled())
        t1.push(new A.ContextMenuButtonItem(new A.EditableTextState_buttonItemsForToolbarOptions_closure(_this), D.ContextMenuButtonType_3));
      if (toolbarOptions.copy && _this.get$copyEnabled())
        t1.push(new A.ContextMenuButtonItem(new A.EditableTextState_buttonItemsForToolbarOptions_closure0(_this), D.ContextMenuButtonType_1));
      toolbarOptions.paste;
      if (toolbarOptions.selectAll && B.boolConversionCheck(_this.get$selectAllEnabled()))
        t1.push(new A.ContextMenuButtonItem(new A.EditableTextState_buttonItemsForToolbarOptions_closure1(_this), D.ContextMenuButtonType_3));
      return t1;
    },
    _getGlyphHeights$0() {
      var t3, prevText, currText, t4, selectedGraphemes, t5, t6, t7, startCharacterRect, endCharacterRect,
        selection = this._widget.controller._change_notifier$_value.selection,
        t1 = this._editableKey,
        t2 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1).get$renderObject();
      t2.toString;
      t3 = type$.RenderEditable;
      prevText = t3._as(t2)._editable$_textPainter._text_painter$_text.toPlainText$0();
      currText = this._widget.controller._change_notifier$_value.text;
      if (prevText !== currText || !selection.get$isValid() || selection.start === selection.end) {
        t2 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1).get$renderObject();
        t2.toString;
        t2 = t3._as(t2)._editable$_textPainter.get$preferredLineHeight();
        t1 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1).get$renderObject();
        t1.toString;
        return new A._GlyphHeights(t2, t3._as(t1)._editable$_textPainter.get$preferredLineHeight());
      }
      t2 = selection.start;
      t4 = selection.end;
      selectedGraphemes = C.JSString_methods.substring$2(currText, t2, t4);
      t5 = selectedGraphemes.length === 0;
      t6 = t5 ? C.StringCharacters_ehH : new B.StringCharacters(selectedGraphemes);
      t6 = t6.get$first(t6);
      t7 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1).get$renderObject();
      t7.toString;
      startCharacterRect = t3._as(t7).getRectForComposingRange$1(new B.TextRange(t2, t2 + t6.length));
      t2 = t5 ? C.StringCharacters_ehH : new B.StringCharacters(selectedGraphemes);
      t2 = t2.get$last(t2);
      t5 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1).get$renderObject();
      t5.toString;
      endCharacterRect = t3._as(t5).getRectForComposingRange$1(new B.TextRange(t4 - t2.length, t4));
      t2 = startCharacterRect == null ? null : startCharacterRect.bottom - startCharacterRect.top;
      if (t2 == null) {
        t2 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1).get$renderObject();
        t2.toString;
        t2 = t3._as(t2)._editable$_textPainter.get$preferredLineHeight();
      }
      t4 = endCharacterRect == null ? null : endCharacterRect.bottom - endCharacterRect.top;
      if (t4 == null) {
        t1 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1).get$renderObject();
        t1.toString;
        t1 = t3._as(t1)._editable$_textPainter.get$preferredLineHeight();
      } else
        t1 = t4;
      return new A._GlyphHeights(t2, t1);
    },
    get$contextMenuAnchors() {
      var t3, glyphHeights, selection, points,
        t1 = this._editableKey,
        t2 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1).get$renderObject();
      t2.toString;
      t3 = type$.RenderEditable;
      if (t3._as(t2)._lastSecondaryTapDownPosition != null) {
        t1 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1).get$renderObject();
        t1.toString;
        t1 = t3._as(t1)._lastSecondaryTapDownPosition;
        t1.toString;
        return new A.TextSelectionToolbarAnchors(t1, null);
      }
      glyphHeights = this._getGlyphHeights$0();
      selection = this._widget.controller._change_notifier$_value.selection;
      t2 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1).get$renderObject();
      t2.toString;
      points = t3._as(t2).getEndpointsForSelection$1(selection);
      t1 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1).get$renderObject();
      t1.toString;
      return A.TextSelectionToolbarAnchors_TextSelectionToolbarAnchors$fromSelection(glyphHeights.end, t3._as(t1), points, glyphHeights.start);
    },
    get$contextMenuButtonItems() {
      var t2, t3, _this = this, _null = null,
        t1 = _this.buttonItemsForToolbarOptions$0();
      if (t1 == null) {
        t1 = _this.get$copyEnabled() ? new A.EditableTextState_contextMenuButtonItems_closure(_this) : _null;
        t2 = _this.get$cutEnabled() ? new A.EditableTextState_contextMenuButtonItems_closure0(_this) : _null;
        t3 = _this.get$pasteEnabled() ? new A.EditableTextState_contextMenuButtonItems_closure1(_this) : _null;
        t1 = A.EditableText_getEditableButtonItems(_null, t1, t2, t3, B.boolConversionCheck(_this.get$selectAllEnabled()) ? new A.EditableTextState_contextMenuButtonItems_closure2(_this) : _null);
      }
      return t1;
    },
    initState$0() {
      var _this = this;
      _this.super$_EditableTextState_State_AutomaticKeepAliveClientMixin$initState();
      _this._widget.controller.addListener$1(0, _this.get$_didChangeTextEditingValue());
      _this._widget.focusNode.addListener$1(0, _this.get$_editable_text$_handleFocusChanged());
      _this.get$_scrollController().addListener$1(0, _this.get$_onEditableScroll());
      _this._cursorVisibilityNotifier.set$value(0, _this._widget.showCursor);
      _this.__EditableTextState__spellCheckConfiguration_A = A.EditableTextState__inferSpellCheckConfiguration(_this._widget.spellCheckConfiguration);
    },
    didChangeDependencies$0() {
      var t1, newTickerEnabled, orientation, _this = this;
      _this.super$State$didChangeDependencies();
      _this._framework$_element.dependOnInheritedWidgetOfExactType$1$0(type$._AutofillScope);
      if (!_this._didAutoFocus)
        _this._widget.toString;
      t1 = _this._framework$_element;
      t1.toString;
      newTickerEnabled = B.TickerMode_of(t1);
      if (_this._tickersEnabled !== newTickerEnabled) {
        _this._tickersEnabled = newTickerEnabled;
        if (newTickerEnabled && _this._cursorActive)
          _this._startCursorBlink$0();
        else if (!newTickerEnabled && _this._cursorTimer != null) {
          _this._cursorTimer.cancel$0(0);
          _this._cursorTimer = null;
        }
      }
      if (B.defaultTargetPlatform() !== C.TargetPlatform_2 && B.defaultTargetPlatform() !== C.TargetPlatform_0)
        return;
      t1 = _this._framework$_element.dependOnInheritedWidgetOfExactType$1$0(type$.MediaQuery).data;
      orientation = t1.get$orientation(t1);
      t1 = _this._lastOrientation;
      if (t1 == null) {
        _this._lastOrientation = orientation;
        return;
      }
      if (orientation !== t1) {
        _this._lastOrientation = orientation;
        if (B.defaultTargetPlatform() === C.TargetPlatform_2)
          _this.hideToolbar$1(false);
        if (B.defaultTargetPlatform() === C.TargetPlatform_0)
          _this.hideToolbar$0();
      }
    },
    didUpdateWidget$1(oldWidget) {
      var t1, t2, style, _this = this;
      type$.EditableText._as(oldWidget);
      _this.super$State$didUpdateWidget(oldWidget);
      t1 = oldWidget.controller;
      if (_this._widget.controller !== t1) {
        t2 = _this.get$_didChangeTextEditingValue();
        t1.removeListener$1(0, t2);
        _this._widget.controller.addListener$1(0, t2);
        _this._updateRemoteEditingValueIfNeeded$0();
      }
      if (!_this._widget.controller._change_notifier$_value.selection.$eq(0, t1._change_notifier$_value.selection)) {
        t1 = _this._selectionOverlay;
        if (t1 != null)
          t1.update$1(0, _this._widget.controller._change_notifier$_value);
      }
      t1 = _this._selectionOverlay;
      if (t1 != null)
        t1.set$handlesVisible(_this._widget.showSelectionHandles);
      t1 = _this._widget;
      t1.autofillClient !== oldWidget.autofillClient;
      t2 = oldWidget.focusNode;
      if (t1.focusNode !== t2) {
        t1 = _this.get$_editable_text$_handleFocusChanged();
        t2.removeListener$1(0, t1);
        _this._widget.focusNode.addListener$1(0, t1);
        _this.updateKeepAlive$0();
      }
      t1 = _this._widget;
      t1.toString;
      if (oldWidget.readOnly && t1.focusNode.get$hasFocus())
        _this._openInputConnection$0();
      t1 = _this.get$_hasInputConnection();
      if (t1) {
        t1 = _this._widget;
        if (oldWidget.readOnly !== t1.readOnly) {
          _this._textInputConnection.toString;
          t1 = t1.autofillClient;
          t1 = t1.get$textInputConfiguration();
          $.$get$TextInput__instance()._updateConfig$1(t1);
        }
      }
      if (!_this._widget.style.$eq(0, oldWidget.style)) {
        style = _this._widget.style;
        if (_this.get$_hasInputConnection()) {
          t1 = _this._textInputConnection;
          t1.toString;
          t2 = _this.get$_editable_text$_textDirection();
          t1.setStyle$5$fontFamily$fontSize$fontWeight$textAlign$textDirection(style.fontFamily, style.fontSize, style.fontWeight, _this._widget.textAlign, t2);
        }
      }
      if (type$.TextSelectionHandleControls._is(_this._widget.selectionControls))
        _this.get$pasteEnabled();
      if (_this._widget.enableInteractiveSelection)
        _this.get$pasteEnabled();
    },
    dispose$0() {
      var _this = this,
        t1 = _this._internalScrollController;
      if (t1 != null)
        t1.dispose$0();
      _this._widget.controller.removeListener$1(0, _this.get$_didChangeTextEditingValue());
      t1 = _this._floatingCursorResetController;
      if (t1 != null)
        t1.dispose$0();
      _this._floatingCursorResetController = null;
      _this._closeInputConnectionIfNeeded$0();
      t1 = _this._cursorTimer;
      if (t1 != null)
        t1.cancel$0(0);
      _this._cursorTimer = null;
      t1 = _this._backingCursorBlinkOpacityController;
      if (t1 != null)
        t1.dispose$0();
      _this._backingCursorBlinkOpacityController = null;
      t1 = _this._selectionOverlay;
      if (t1 != null)
        t1.dispose$0();
      _this._selectionOverlay = null;
      _this._widget.focusNode.removeListener$1(0, _this.get$_editable_text$_handleFocusChanged());
      C.JSArray_methods.remove$1($.WidgetsBinding__instance.WidgetsBinding__observers, _this);
      _this._cursorVisibilityNotifier.dispose$0();
      _this.super$_EditableTextState_State_AutomaticKeepAliveClientMixin_WidgetsBindingObserver_TickerProviderStateMixin$dispose();
    },
    get$currentTextEditingValue() {
      return this._widget.controller._change_notifier$_value;
    },
    updateEditingValue$1(value) {
      var t2, t3, t4, t5, _this = this,
        t1 = _this._widget.controller._change_notifier$_value;
      if (value.text === t1.text) {
        t2 = value.selection;
        t3 = t2.start;
        t4 = t1.selection;
        t5 = t4.start;
        t2 = t3 === t2.end === (t5 === t4.end) && t3 === t5 && t2.affinity !== t4.affinity;
      } else
        t2 = false;
      if (t2)
        value = value.copyWith$1$selection(value.selection.copyWith$1$affinity(t1.selection.affinity));
      t1 = _this._widget;
      if (t1.readOnly)
        value = t1.controller._change_notifier$_value.copyWith$1$selection(value.selection);
      _this._lastKnownRemoteTextEditingValue = value;
      if (value.$eq(0, _this._widget.controller._change_notifier$_value))
        return;
      t1 = _this._widget.controller._change_notifier$_value;
      if (value.text === t1.text && value.composing.$eq(0, t1.composing)) {
        t1 = _this._textInputConnection == null ? null : $.$get$TextInput__instance()._scribbleInProgress;
        t1 = t1 === true ? D.SelectionChangedCause_7 : C.SelectionChangedCause_4;
        _this._editable_text$_handleSelectionChanged$2(value.selection, t1);
      } else {
        _this.hideToolbar$1(false);
        _this._currentPromptRectRange = null;
        if (_this.get$_hasInputConnection())
          _this._widget.toString;
        _this._obscureShowCharTicksPending = 0;
        _this._obscureLatestCharIndex = null;
        _this._formatAndSetValue$2(value, C.SelectionChangedCause_4);
      }
      _this._scheduleShowCaretOnScreen$1$withAnimation(true);
      if (_this.get$_hasInputConnection()) {
        _this._stopCursorBlink$1$resetCharTicks(false);
        _this._startCursorBlink$0();
      }
    },
    performAction$1(action) {
      var _this = this;
      switch (action.index) {
        case 12:
          if (_this._widget.maxLines === 1)
            _this._finalizeEditing$2$shouldUnfocus(action, true);
          break;
        case 2:
        case 3:
        case 6:
        case 7:
        case 4:
        case 5:
          _this._finalizeEditing$2$shouldUnfocus(action, true);
          break;
        case 8:
        case 11:
        case 9:
        case 0:
        case 10:
        case 1:
          _this._finalizeEditing$2$shouldUnfocus(action, false);
          break;
      }
    },
    performPrivateCommand$2(action, data) {
      type$.Map_String_dynamic._as(data);
      this._widget.toString;
    },
    updateFloatingCursor$1(point) {
      var t2, t3, t4, currentTextPosition, t5, centeredPoint, rawCursorOffset, t6, bottomBound, rightBound, deltaPosition, currentX, currentY, adjustedX, adjustedY, t7, _this = this, _null = null,
        t1 = _this._floatingCursorResetController;
      if (t1 == null) {
        t1 = B.AnimationController$(_null, _null, _null, _null, _this);
        t2 = type$.void_Function._as(_this.get$_onFloatingCursorResetTick());
        t1.didRegisterListener$0();
        t3 = t1.AnimationLocalListenersMixin__listeners;
        t3.$ti._precomputed1._as(t2);
        t3._isDirty = true;
        C.JSArray_methods.add$1(t3._list, t2);
        _this._floatingCursorResetController = t1;
      }
      t2 = point.state;
      switch (t2.index) {
        case 0:
          t3 = t1._ticker;
          if (t3 != null && t3._ticker$_future != null) {
            t1.stop$0(0);
            _this._onFloatingCursorResetTick$0();
          }
          _this._stopCursorBlink$1$resetCharTicks(false);
          _this.get$_cursorBlinkOpacityController().set$value(0, 1);
          _this._pointOffsetOrigin = point.offset;
          t1 = _this._editableKey;
          t3 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1).get$renderObject();
          t3.toString;
          t4 = type$.RenderEditable;
          currentTextPosition = new B.TextPosition(t4._as(t3)._selection.baseOffset, C.TextAffinity_1);
          t3 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1).get$renderObject();
          t3.toString;
          t3 = t4._as(t3).getLocalRectForCaret$1(currentTextPosition);
          _this._startCaretRect = t3;
          t3 = t3.get$center();
          t5 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1).get$renderObject();
          t5.toString;
          _this._lastBoundedOffset = t3.$sub(0, new B.Offset(0, t4._as(t5)._editable$_textPainter.get$preferredLineHeight() / 2));
          _this._lastTextPosition = currentTextPosition;
          t1 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1).get$renderObject();
          t1.toString;
          t4._as(t1);
          t4 = _this._lastBoundedOffset;
          t4.toString;
          t5 = _this._lastTextPosition;
          t5.toString;
          t1.setFloatingCursor$3(t2, t4, t5);
          break;
        case 1:
          t1 = _this._pointOffsetOrigin;
          t1.toString;
          centeredPoint = point.offset.$sub(0, t1);
          t1 = _this._startCaretRect.get$center().$add(0, centeredPoint);
          t3 = _this._editableKey;
          t4 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t3).get$renderObject();
          t4.toString;
          t5 = type$.RenderEditable;
          rawCursorOffset = t1.$sub(0, new B.Offset(0, t5._as(t4)._editable$_textPainter.get$preferredLineHeight() / 2));
          t4 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t3).get$renderObject();
          t4.toString;
          t5._as(t4);
          t1 = t4._editable$_textPainter;
          t6 = t1._paragraph;
          bottomBound = Math.ceil(t6.get$height(t6)) - t1.get$preferredLineHeight() + 5;
          rightBound = t1.get$width(t1) + 4;
          t1 = t4._previousOffset;
          deltaPosition = t1 != null ? rawCursorOffset.$sub(0, t1) : C.Offset_0_0;
          if (t4._resetOriginOnLeft && deltaPosition._dx > 0) {
            t4._relativeOrigin = new B.Offset(rawCursorOffset._dx - -4, t4._relativeOrigin._dy);
            t4._resetOriginOnLeft = false;
          } else if (t4._resetOriginOnRight && deltaPosition._dx < 0) {
            t4._relativeOrigin = new B.Offset(rawCursorOffset._dx - rightBound, t4._relativeOrigin._dy);
            t4._resetOriginOnRight = false;
          }
          if (t4._resetOriginOnTop && deltaPosition._dy > 0) {
            t4._relativeOrigin = new B.Offset(t4._relativeOrigin._dx, rawCursorOffset._dy - -4);
            t4._resetOriginOnTop = false;
          } else if (t4._resetOriginOnBottom && deltaPosition._dy < 0) {
            t4._relativeOrigin = new B.Offset(t4._relativeOrigin._dx, rawCursorOffset._dy - bottomBound);
            t4._resetOriginOnBottom = false;
          }
          t1 = t4._relativeOrigin;
          currentX = rawCursorOffset._dx - t1._dx;
          currentY = rawCursorOffset._dy - t1._dy;
          adjustedX = Math.min(Math.max(currentX, -4), rightBound);
          adjustedY = Math.min(Math.max(currentY, -4), bottomBound);
          if (currentX < -4 && deltaPosition._dx < 0)
            t4._resetOriginOnLeft = true;
          else if (currentX > rightBound && deltaPosition._dx > 0)
            t4._resetOriginOnRight = true;
          if (currentY < -4 && deltaPosition._dy < 0)
            t4._resetOriginOnTop = true;
          else if (currentY > bottomBound && deltaPosition._dy > 0)
            t4._resetOriginOnBottom = true;
          t4._previousOffset = rawCursorOffset;
          _this._lastBoundedOffset = new B.Offset(adjustedX, adjustedY);
          t1 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t3).get$renderObject();
          t1.toString;
          t5._as(t1);
          t4 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t3).get$renderObject();
          t4.toString;
          t5._as(t4);
          t6 = _this._lastBoundedOffset;
          t6.toString;
          t7 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t3).get$renderObject();
          t7.toString;
          t7 = t6.$add(0, new B.Offset(0, t5._as(t7)._editable$_textPainter.get$preferredLineHeight() / 2));
          _this._lastTextPosition = t1.getPositionForPoint$1(B.MatrixUtils_transformPoint(t4.getTransformTo$1(0, _null), t7));
          t3 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t3).get$renderObject();
          t3.toString;
          t5._as(t3);
          t5 = _this._lastBoundedOffset;
          t5.toString;
          t7 = _this._lastTextPosition;
          t7.toString;
          t3.setFloatingCursor$3(t2, t5, t7);
          break;
        case 2:
          _this._startCursorBlink$0();
          if (_this._lastTextPosition != null && _this._lastBoundedOffset != null) {
            _this._floatingCursorResetController.set$value(0, 0);
            t1 = _this._floatingCursorResetController;
            t1._direction = C._AnimationDirection_0;
            t1._animateToInternal$3$curve$duration(1, C.C__DecelerateCurve, D.Duration_125000);
          }
          break;
      }
    },
    _onFloatingCursorResetTick$0() {
      var t3, t4, finalPosition, t5, t6, _this = this,
        t1 = _this._editableKey,
        t2 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1).get$renderObject();
      t2.toString;
      t3 = type$.RenderEditable;
      t3._as(t2);
      t4 = _this._lastTextPosition;
      t4.toString;
      t4 = t2.getLocalRectForCaret$1(t4).get$centerLeft();
      t2 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1).get$renderObject();
      t2.toString;
      finalPosition = t4.$sub(0, new B.Offset(0, t3._as(t2)._editable$_textPainter.get$preferredLineHeight() / 2));
      t2 = _this._floatingCursorResetController;
      t2 = t2.get$status(t2);
      t4 = $.WidgetsBinding__instance;
      if (t2 === C.AnimationStatus_3) {
        t2 = t4.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1).get$renderObject();
        t2.toString;
        t3._as(t2);
        t4 = _this._lastTextPosition;
        t4.toString;
        t2.setFloatingCursor$3(C.FloatingCursorDragState_2, finalPosition, t4);
        t2 = _this._lastTextPosition.offset;
        t1 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1).get$renderObject();
        t1.toString;
        if (t2 !== t3._as(t1)._selection.baseOffset)
          _this._editable_text$_handleSelectionChanged$2(A.TextSelection$collapsed(C.TextAffinity_1, _this._lastTextPosition.offset), D.SelectionChangedCause_3);
        _this._lastBoundedOffset = _this._pointOffsetOrigin = _this._lastTextPosition = _this._startCaretRect = null;
      } else {
        t2 = _this._floatingCursorResetController.__AnimationController__value_A;
        t2 === $ && B.throwLateFieldNI("_value");
        t5 = _this._lastBoundedOffset;
        t6 = B.lerpDouble(t5._dx, finalPosition._dx, t2);
        t6.toString;
        t5 = B.lerpDouble(t5._dy, finalPosition._dy, t2);
        t5.toString;
        t1 = t4.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1).get$renderObject();
        t1.toString;
        t3._as(t1);
        t3 = _this._lastTextPosition;
        t3.toString;
        t1.setFloatingCursor$4$resetLerpValue(C.FloatingCursorDragState_1, new B.Offset(t6, t5), t3, t2);
      }
    },
    _finalizeEditing$2$shouldUnfocus(action, shouldUnfocus) {
      var onSubmitted, exception, stack, exception0, _this = this,
        t1 = _this._widget.controller;
      t1.super$ValueNotifier$value(0, t1._change_notifier$_value.copyWith$1$composing(C.TextRange_m1_m1));
      if (shouldUnfocus) {
        switch (action.index) {
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 8:
          case 9:
          case 10:
          case 11:
          case 12:
            _this._widget.focusNode.unfocus$0();
            break;
          case 6:
            t1 = _this._widget.focusNode;
            t1._context.dependOnInheritedWidgetOfExactType$1$0(type$._FocusTraversalGroupMarker).policy._moveFocus$2$forward(t1, true);
            break;
          case 7:
            t1 = _this._widget.focusNode;
            t1._context.dependOnInheritedWidgetOfExactType$1$0(type$._FocusTraversalGroupMarker).policy._moveFocus$2$forward(t1, false);
            break;
        }
        shouldUnfocus = true;
      }
      t1 = _this._widget;
      onSubmitted = t1.onSubmitted;
      if (onSubmitted == null)
        return;
      try {
        onSubmitted.call$1(t1.controller._change_notifier$_value.text);
      } catch (exception0) {
        exception = B.unwrapException(exception0);
        stack = B.getTraceFromException(exception0);
        t1 = B.ErrorDescription$("while calling onSubmitted for " + action.toString$0(0));
        B.FlutterError_reportError(new B.FlutterErrorDetails(exception, stack, "widgets", t1, null, false));
      }
      if (shouldUnfocus)
        _this._scheduleRestartConnection$0();
    },
    _updateRemoteEditingValueIfNeeded$0() {
      var t1, _this = this;
      if (_this._batchEditDepth > 0 || !_this.get$_hasInputConnection())
        return;
      t1 = _this._widget.controller._change_notifier$_value;
      if (t1.$eq(0, _this._lastKnownRemoteTextEditingValue))
        return;
      _this._textInputConnection.toString;
      $.$get$TextInput__instance()._setEditingState$1(t1);
      _this._lastKnownRemoteTextEditingValue = t1;
    },
    _getOffsetToRevealCaret$1(rect) {
      var t1, t2, t3, additionalOffset, unitOffset, t4, expandedRect, targetOffset, _this = this;
      if (!C.JSArray_methods.get$single(_this.get$_scrollController()._positions).physics.get$allowImplicitScrolling()) {
        t1 = C.JSArray_methods.get$single(_this.get$_scrollController()._positions)._pixels;
        t1.toString;
        return new H.RevealedOffset(t1, rect);
      }
      t1 = _this._editableKey;
      t2 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1).get$renderObject();
      t2.toString;
      t3 = type$.RenderEditable;
      t2 = t3._as(t2)._size;
      t2.toString;
      if (_this._widget.maxLines === 1) {
        t1 = rect.right;
        t3 = rect.left;
        t2 = t2._dx;
        additionalOffset = t1 - t3 >= t2 ? t2 / 2 - rect.get$center()._dx : B.clampDouble(0, t1 - t2, t3);
        unitOffset = C.Offset_1_0;
      } else {
        t4 = rect.get$center();
        t1 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1).get$renderObject();
        t1.toString;
        expandedRect = B.Rect$fromCenter(t4, Math.max(rect.bottom - rect.top, t3._as(t1)._editable$_textPainter.get$preferredLineHeight()), rect.right - rect.left);
        t1 = expandedRect.bottom;
        t3 = expandedRect.top;
        t2 = t2._dy;
        additionalOffset = t1 - t3 >= t2 ? t2 / 2 - expandedRect.get$center()._dy : B.clampDouble(0, t1 - t2, t3);
        unitOffset = C.Offset_0_1;
      }
      t1 = C.JSArray_methods.get$single(_this.get$_scrollController()._positions)._pixels;
      t1.toString;
      t2 = C.JSArray_methods.get$single(_this.get$_scrollController()._positions)._minScrollExtent;
      t2.toString;
      t3 = C.JSArray_methods.get$single(_this.get$_scrollController()._positions)._maxScrollExtent;
      t3.toString;
      targetOffset = B.clampDouble(additionalOffset + t1, t2, t3);
      t3 = C.JSArray_methods.get$single(_this.get$_scrollController()._positions)._pixels;
      t3.toString;
      return new H.RevealedOffset(targetOffset, rect.shift$1(unitOffset.$mul(0, t3 - targetOffset)));
    },
    _openInputConnection$0() {
      var t1, t2, connection, style, t3, _this = this;
      if (!_this.get$_hasInputConnection()) {
        t1 = _this._widget;
        t2 = t1.controller._change_notifier$_value;
        t1 = t1.autofillClient;
        t1.get$textInputConfiguration();
        t1 = _this._widget.autofillClient;
        t1 = t1.get$textInputConfiguration();
        connection = A.TextInputConnection$_(_this);
        $.$get$TextInput__instance()._attach$2(connection, t1);
        t1 = connection;
        _this._textInputConnection = t1;
        _this._updateSizeAndTransform$0();
        _this._updateComposingRectIfNeeded$0();
        _this._updateCaretRectIfNeeded$0();
        style = _this._widget.style;
        t1 = _this._textInputConnection;
        t1.toString;
        t3 = _this.get$_editable_text$_textDirection();
        t1.setStyle$5$fontFamily$fontSize$fontWeight$textAlign$textDirection(style.fontFamily, style.fontSize, style.fontWeight, _this._widget.textAlign, t3);
        t3 = $.$get$TextInput__instance();
        t3._setEditingState$1(t2);
        t3._show$0();
        t1 = _this._widget.autofillClient;
        if (t1.get$textInputConfiguration().autofillConfiguration.enabled) {
          _this._textInputConnection.toString;
          t3._requestAutofill$0();
        }
        _this._lastKnownRemoteTextEditingValue = t2;
      } else {
        _this._textInputConnection.toString;
        $.$get$TextInput__instance()._show$0();
      }
    },
    _closeInputConnectionIfNeeded$0() {
      var t1, t2, _this = this;
      if (_this.get$_hasInputConnection()) {
        t1 = _this._textInputConnection;
        t1.toString;
        t2 = $.$get$TextInput__instance();
        if (t2._currentConnection === t1)
          t2._clearClient$0();
        _this._lastKnownRemoteTextEditingValue = _this._textInputConnection = null;
      }
    },
    _scheduleRestartConnection$0() {
      if (this._restartConnectionScheduled)
        return;
      this._restartConnectionScheduled = true;
      B.scheduleMicrotask(this.get$_restartConnectionIfNeeded());
    },
    _restartConnectionIfNeeded$0() {
      var t1, t2, connection, newConnection, style, _this = this;
      _this._restartConnectionScheduled = false;
      if (_this.get$_hasInputConnection())
        t1 = false;
      else
        t1 = true;
      if (t1)
        return;
      t1 = _this._textInputConnection;
      t1.toString;
      t2 = $.$get$TextInput__instance();
      if (t2._currentConnection === t1)
        t2._clearClient$0();
      _this._lastKnownRemoteTextEditingValue = _this._textInputConnection = null;
      t1 = _this._widget.autofillClient;
      t1.get$textInputConfiguration();
      t1 = _this._widget.autofillClient;
      t1 = t1.get$textInputConfiguration();
      connection = A.TextInputConnection$_(_this);
      t2._attach$2(connection, t1);
      newConnection = connection;
      _this._textInputConnection = newConnection;
      style = _this._widget.style;
      t2._show$0();
      t1 = _this.get$_editable_text$_textDirection();
      newConnection.setStyle$5$fontFamily$fontSize$fontWeight$textAlign$textDirection(style.fontFamily, style.fontSize, style.fontWeight, _this._widget.textAlign, t1);
      t2._setEditingState$1(_this._widget.controller._change_notifier$_value);
      _this._lastKnownRemoteTextEditingValue = _this._widget.controller._change_notifier$_value;
    },
    connectionClosed$0() {
      var _this = this;
      if (_this.get$_hasInputConnection()) {
        _this._textInputConnection.toString;
        _this._lastKnownRemoteTextEditingValue = _this._textInputConnection = $.$get$TextInput__instance()._currentConnection = null;
        _this._finalizeEditing$2$shouldUnfocus(C.TextInputAction_2, true);
      }
    },
    requestKeyboard$0() {
      if (this._widget.focusNode.get$hasFocus())
        this._openInputConnection$0();
      else
        this._widget.focusNode.requestFocus$0();
    },
    _updateOrDisposeSelectionOverlayIfNeeded$0() {
      var t1, t2, _this = this;
      if (_this._selectionOverlay != null) {
        t1 = _this._widget.focusNode.get$hasFocus();
        t2 = _this._selectionOverlay;
        if (t1) {
          t2.toString;
          t2.update$1(0, _this._widget.controller._change_notifier$_value);
        } else {
          t2.dispose$0();
          _this._selectionOverlay = null;
        }
      }
    },
    _onEditableScroll$0() {
      var t1 = this._selectionOverlay;
      if (t1 != null) {
        t1._updateSelectionOverlay$0();
        t1 = t1.__TextSelectionOverlay__selectionOverlay_F;
        t1 === $ && B.throwLateFieldNI("_selectionOverlay");
        t1.markNeedsBuild$0();
      }
      this._scribbleCacheKey = null;
    },
    _createSelectionOverlay$0() {
      var t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, selectionOverlay, _this = this,
        t1 = _this._framework$_element;
      t1.toString;
      t2 = _this._widget;
      t3 = t2.controller._change_notifier$_value;
      t4 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, _this._editableKey).get$renderObject();
      t4.toString;
      type$.RenderEditable._as(t4);
      t5 = _this._widget;
      t6 = t5.selectionControls;
      t7 = t5.dragStartBehavior;
      t8 = t5.onSelectionHandleTapped;
      t5 = t5.magnifierConfiguration;
      t9 = type$.bool;
      t10 = B.ValueNotifier$(false, t9);
      t11 = B.ValueNotifier$(false, t9);
      t9 = B.ValueNotifier$(false, t9);
      selectionOverlay = new A.TextSelectionOverlay(t1, t4, t6, _this, new A.EditableTextState__createSelectionOverlay_closure(_this), t3, t10, t11, t9);
      t3 = selectionOverlay.get$_updateTextSelectionOverlayVisibilities();
      t4._selectionStartInViewport.addListener$1(0, t3);
      t4._selectionEndInViewport.addListener$1(0, t3);
      selectionOverlay._updateTextSelectionOverlayVisibilities$0();
      t3 = selectionOverlay.get$_handleAnyDragEnd();
      t9 = A.SelectionOverlay$(null, t1, t2, t7, _this._editable_text$_endHandleLayerLink, D.TextSelectionHandleType_2, t11, 0, 0, t5, t3, selectionOverlay.get$_handleSelectionEndHandleDragStart(), selectionOverlay.get$_handleSelectionEndHandleDragUpdate(), t8, t3, selectionOverlay.get$_handleSelectionStartHandleDragStart(), selectionOverlay.get$_handleSelectionStartHandleDragUpdate(), t6, _this, D.List_empty10, _this._editable_text$_startHandleLayerLink, D.TextSelectionHandleType_2, t10, _this._toolbarLayerLink, t4._lastSecondaryTapDownPosition, t9);
      selectionOverlay.__TextSelectionOverlay__selectionOverlay_F !== $ && B.throwLateFieldAI("_selectionOverlay");
      selectionOverlay.__TextSelectionOverlay__selectionOverlay_F = t9;
      return selectionOverlay;
    },
    _editable_text$_handleSelectionChanged$2(selection, cause) {
      var exception, stack, t1, t2, exception0, _this = this;
      if (!_this._widget.controller.isSelectionWithinTextBounds$1(selection))
        return;
      _this._widget.controller.set$selection(selection);
      switch (cause) {
        case null:
        case D.SelectionChangedCause_1:
        case D.SelectionChangedCause_6:
        case D.SelectionChangedCause_3:
        case D.SelectionChangedCause_2:
        case D.SelectionChangedCause_7:
        case D.SelectionChangedCause_0:
        case D.SelectionChangedCause_5:
          _this.requestKeyboard$0();
          break;
        case C.SelectionChangedCause_4:
          if (_this._widget.focusNode.get$hasFocus())
            _this.requestKeyboard$0();
          break;
      }
      t1 = _this._widget;
      t1.toString;
      t2 = _this._selectionOverlay;
      if (t2 == null)
        _this._selectionOverlay = _this._createSelectionOverlay$0();
      else
        t2.update$1(0, t1.controller._change_notifier$_value);
      t1 = _this._selectionOverlay;
      t1.toString;
      t1.set$handlesVisible(_this._widget.showSelectionHandles);
      t1 = _this._selectionOverlay;
      t1._updateSelectionOverlay$0();
      t1 = t1.__TextSelectionOverlay__selectionOverlay_F;
      t1 === $ && B.throwLateFieldNI("_selectionOverlay");
      t1.showHandles$0();
      try {
        _this._widget.onSelectionChanged.call$2(selection, cause);
      } catch (exception0) {
        exception = B.unwrapException(exception0);
        stack = B.getTraceFromException(exception0);
        t1 = B.ErrorDescription$("while calling onSelectionChanged for " + B.S(cause));
        B.FlutterError_reportError(new B.FlutterErrorDetails(exception, stack, "widgets", t1, null, false));
      }
      if (_this._cursorTimer != null) {
        _this._stopCursorBlink$1$resetCharTicks(false);
        _this._startCursorBlink$0();
      }
    },
    _handleCaretChanged$1(caretRect) {
      this._currentCaretRect = caretRect;
    },
    _scheduleShowCaretOnScreen$1$withAnimation(withAnimation) {
      var t1;
      if (this._showCaretOnScreenScheduled)
        return;
      this._showCaretOnScreenScheduled = true;
      t1 = $.SchedulerBinding__instance;
      t1.toString;
      C.JSArray_methods.add$1(t1.SchedulerBinding__postFrameCallbacks, type$.void_Function_Duration._as(new A.EditableTextState__scheduleShowCaretOnScreen_closure(this, withAnimation)));
    },
    didChangeMetrics$0() {
      var t2, _this = this,
        t1 = _this.__EditableTextState__lastBottomViewInset_A;
      t1 === $ && B.throwLateFieldNI("_lastBottomViewInset");
      $.WidgetsBinding__instance.toString;
      t2 = $.$get$window();
      if (t1 !== t2._viewInsets.bottom) {
        t1 = $.SchedulerBinding__instance;
        t1.toString;
        C.JSArray_methods.add$1(t1.SchedulerBinding__postFrameCallbacks, type$.void_Function_Duration._as(new A.EditableTextState_didChangeMetrics_closure(_this)));
        t1 = _this.__EditableTextState__lastBottomViewInset_A;
        $.WidgetsBinding__instance.toString;
        if (t1 < t2._viewInsets.bottom)
          _this._scheduleShowCaretOnScreen$1$withAnimation(false);
      }
      $.WidgetsBinding__instance.toString;
      _this.__EditableTextState__lastBottomViewInset_A = t2._viewInsets.bottom;
    },
    _performSpellCheck$1(text) {
      return this._performSpellCheck$body$EditableTextState(text);
    },
    _performSpellCheck$body$EditableTextState(text) {
      var $async$goto = 0,
        $async$completer = B._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, localeForSpellChecking, spellCheckResults, exception, stack, t1, localeForSpellChecking0, t2, exception0, $async$exception0;
      var $async$_performSpellCheck$1 = B._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$handler = 4;
              $async$self._widget.toString;
              t1 = $async$self._framework$_element;
              t1.toString;
              localeForSpellChecking0 = B.Localizations_maybeLocaleOf(t1);
              localeForSpellChecking = localeForSpellChecking0;
              t1 = $async$self.__EditableTextState__spellCheckConfiguration_A;
              t1 === $ && B.throwLateFieldNI("_spellCheckConfiguration");
              t1 = t1.spellCheckService;
              t1.toString;
              t2 = localeForSpellChecking;
              t2.toString;
              $async$goto = 7;
              return B._asyncAwait(t1.fetchSpellCheckSuggestions$2(t2, text), $async$_performSpellCheck$1);
            case 7:
              // returning from await.
              spellCheckResults = $async$result;
              if (spellCheckResults == null) {
                // goto return
                $async$goto = 1;
                break;
              }
              $async$self._spellCheckResults = new A.SpellCheckResults(text, spellCheckResults);
              t1 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, $async$self._editableKey).get$renderObject();
              t1.toString;
              type$.RenderEditable._as(t1).set$text(0, $async$self.buildTextSpan$0());
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception0 = $async$currentError;
              exception = B.unwrapException($async$exception0);
              stack = B.getTraceFromException($async$exception0);
              t1 = B.ErrorDescription$("while performing spell check");
              B.FlutterError_reportError(new B.FlutterErrorDetails(exception, stack, "widgets", t1, null, false));
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
            case 1:
              // return
              return B._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return B._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return B._asyncStartSync($async$_performSpellCheck$1, $async$completer);
    },
    _formatAndSetValue$3$userInteraction(value, cause, userInteraction) {
      var exception, stack, currentText, exception0, stack0, t2, t3, t4, t5, textCommitted, value0, exception1, _this = this,
        t1 = type$.TextEditingValue;
      value = t1._as(value);
      t2 = _this._widget.controller._change_notifier$_value;
      t3 = t2.text;
      t4 = value.text;
      t5 = t2.composing;
      if (t5.start !== t5.end) {
        t5 = value.composing;
        textCommitted = t5.start === t5.end;
      } else
        textCommitted = false;
      t2 = t2.selection.$eq(0, value.selection);
      if (t3 !== t4 || textCommitted)
        try {
          value0 = C.JSArray_methods.fold$1$2(_this._widget.inputFormatters, value, new A.EditableTextState__formatAndSetValue_closure(_this), t1);
          value = value0 == null ? value : value0;
          t4 = _this.__EditableTextState__spellCheckConfiguration_A;
          t4 === $ && B.throwLateFieldNI("_spellCheckConfiguration");
          if (t4._spellCheckEnabled && value.text.length !== 0 && _this._widget.controller._change_notifier$_value.text !== value.text)
            _this._performSpellCheck$1(value.text);
        } catch (exception1) {
          exception = B.unwrapException(exception1);
          stack = B.getTraceFromException(exception1);
          t4 = B.ErrorDescription$("while applying input formatters");
          B.FlutterError_reportError(new B.FlutterErrorDetails(exception, stack, "widgets", t4, null, false));
        }
      ++_this._batchEditDepth;
      t1 = t1._as(value);
      _this._widget.controller.super$ValueNotifier$value(0, t1);
      if (t2)
        if (userInteraction)
          t1 = cause === D.SelectionChangedCause_2 || cause === C.SelectionChangedCause_4;
        else
          t1 = false;
      else
        t1 = true;
      if (t1)
        _this._editable_text$_handleSelectionChanged$2(_this._widget.controller._change_notifier$_value.selection, cause);
      t1 = _this._widget;
      currentText = t1.controller._change_notifier$_value.text;
      if (t3 !== currentText)
        try {
          t1 = t1.onChanged;
          if (t1 != null)
            t1.call$1(currentText);
        } catch (exception) {
          exception0 = B.unwrapException(exception);
          stack0 = B.getTraceFromException(exception);
          t1 = B.ErrorDescription$("while calling onChanged");
          B.FlutterError_reportError(new B.FlutterErrorDetails(exception0, stack0, "widgets", t1, null, false));
        }
      --_this._batchEditDepth;
      _this._updateRemoteEditingValueIfNeeded$0();
    },
    _formatAndSetValue$2(value, cause) {
      return this._formatAndSetValue$3$userInteraction(value, cause, false);
    },
    _onCursorColorTick$0() {
      var t2, t3, _this = this,
        t1 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, _this._editableKey).get$renderObject();
      t1.toString;
      type$.RenderEditable._as(t1);
      t2 = _this._widget.cursorColor;
      t3 = _this.get$_cursorBlinkOpacityController().__AnimationController__value_A;
      t3 === $ && B.throwLateFieldNI("_value");
      t2 = B.Color$fromARGB(C.JSNumber_methods.round$0(255 * t3), t2.get$value(t2) >>> 16 & 255, t2.get$value(t2) >>> 8 & 255, t2.get$value(t2) & 255);
      t1.get$_caretPainter().set$caretColor(t2);
      if (_this._widget.showCursor) {
        t1 = _this.get$_cursorBlinkOpacityController().__AnimationController__value_A;
        t1 === $ && B.throwLateFieldNI("_value");
        t1 = t1 > 0;
      } else
        t1 = false;
      _this._cursorVisibilityNotifier.set$value(0, t1);
    },
    _startCursorBlink$0() {
      var t1, _this = this;
      _this._cursorActive = true;
      if (!_this._tickersEnabled)
        return;
      t1 = _this._cursorTimer;
      if (t1 != null)
        t1.cancel$0(0);
      _this.get$_cursorBlinkOpacityController().set$value(0, 1);
      if (_this._widget.cursorOpacityAnimates)
        _this.get$_cursorBlinkOpacityController().animateWith$1(_this.get$_iosBlinkCursorSimulation())._primaryCompleter.future.whenComplete$1(type$.dynamic_Function._as(_this.get$_onCursorTick()));
      else
        _this._cursorTimer = B.Timer_Timer$periodic(C.Duration_500000, new A.EditableTextState__startCursorBlink_closure(_this));
    },
    _onCursorTick$0() {
      var t2, _this = this,
        t1 = _this._obscureShowCharTicksPending;
      if (t1 > 0) {
        $.WidgetsBinding__instance.toString;
        $.$get$EnginePlatformDispatcher__instance();
        --t1;
        _this._obscureShowCharTicksPending = t1;
        if (t1 === 0)
          _this.setState$1(new A.EditableTextState__onCursorTick_closure());
      }
      if (_this._widget.cursorOpacityAnimates) {
        t1 = _this._cursorTimer;
        if (t1 != null)
          t1.cancel$0(0);
        _this._cursorTimer = B.Timer_Timer(C.Duration_0, new A.EditableTextState__onCursorTick_closure0(_this));
      } else {
        t1 = _this._cursorTimer;
        t1 = t1 == null ? null : t1._handle != null;
        if (t1 !== true && _this._tickersEnabled)
          _this._cursorTimer = B.Timer_Timer$periodic(C.Duration_500000, new A.EditableTextState__onCursorTick_closure1(_this));
        t1 = _this.get$_cursorBlinkOpacityController();
        t2 = _this.get$_cursorBlinkOpacityController().__AnimationController__value_A;
        t2 === $ && B.throwLateFieldNI("_value");
        t1.set$value(0, t2 === 0 ? 1 : 0);
      }
    },
    _stopCursorBlink$1$resetCharTicks(resetCharTicks) {
      var t1, _this = this;
      _this._cursorActive = false;
      _this.get$_cursorBlinkOpacityController().set$value(0, 0);
      t1 = _this._cursorTimer;
      if (t1 != null)
        t1.cancel$0(0);
      _this._cursorTimer = null;
      if (resetCharTicks)
        _this._obscureShowCharTicksPending = 0;
    },
    _stopCursorBlink$0() {
      return this._stopCursorBlink$1$resetCharTicks(true);
    },
    _startOrStopCursorTimerIfNeeded$0() {
      var t1, _this = this;
      if (_this._cursorTimer == null)
        if (_this._widget.focusNode.get$hasFocus()) {
          t1 = _this._widget.controller._change_notifier$_value.selection;
          t1 = t1.start === t1.end;
        } else
          t1 = false;
      else
        t1 = false;
      if (t1)
        _this._startCursorBlink$0();
      else {
        if (_this._cursorActive)
          if (_this._widget.focusNode.get$hasFocus()) {
            t1 = _this._widget.controller._change_notifier$_value.selection;
            t1 = t1.start !== t1.end;
          } else
            t1 = true;
        else
          t1 = false;
        if (t1)
          _this._stopCursorBlink$0();
      }
    },
    _didChangeTextEditingValue$0() {
      var _this = this;
      _this._updateRemoteEditingValueIfNeeded$0();
      _this._startOrStopCursorTimerIfNeeded$0();
      _this._updateOrDisposeSelectionOverlayIfNeeded$0();
      _this.setState$1(new A.EditableTextState__didChangeTextEditingValue_closure());
      _this.get$_verticalSelectionUpdateAction().stopCurrentVerticalRunIfSelectionChanges$0();
    },
    _editable_text$_handleFocusChanged$0() {
      var t1, t2, _this = this;
      if (_this._widget.focusNode.get$hasFocus() && _this._widget.focusNode.consumeKeyboardToken$0())
        _this._openInputConnection$0();
      else if (!_this._widget.focusNode.get$hasFocus()) {
        _this._closeInputConnectionIfNeeded$0();
        t1 = _this._widget.controller;
        t1.super$ValueNotifier$value(0, t1._change_notifier$_value.copyWith$1$composing(C.TextRange_m1_m1));
      }
      _this._startOrStopCursorTimerIfNeeded$0();
      _this._updateOrDisposeSelectionOverlayIfNeeded$0();
      t1 = _this._widget.focusNode.get$hasFocus();
      t2 = $.WidgetsBinding__instance;
      if (t1) {
        C.JSArray_methods.add$1(t2.WidgetsBinding__observers, _this);
        $.WidgetsBinding__instance.toString;
        _this.__EditableTextState__lastBottomViewInset_A = $.$get$window()._viewInsets.bottom;
        if (!_this._widget.readOnly)
          _this._scheduleShowCaretOnScreen$1$withAnimation(true);
        if (!_this._widget.controller._change_notifier$_value.selection.get$isValid())
          _this._editable_text$_handleSelectionChanged$2(A.TextSelection$collapsed(C.TextAffinity_1, _this._widget.controller._change_notifier$_value.text.length), null);
      } else {
        C.JSArray_methods.remove$1(t2.WidgetsBinding__observers, _this);
        _this.setState$1(new A.EditableTextState__handleFocusChanged_closure(_this));
      }
      _this.updateKeepAlive$0();
    },
    _updateSelectionRects$1$force(force) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, newCacheKey, comparison, rects, plainText, characterRange, graphemeStart, graphemeEnd, boxes, box, paintBounds, _this = this;
      _this._widget.toString;
      t1 = B.defaultTargetPlatform();
      if (t1 !== C.TargetPlatform_2)
        return;
      if (C.JSArray_methods.get$single(_this.get$_scrollController()._positions)._userScrollDirection !== C.ScrollDirection_0)
        return;
      t1 = _this._editableKey;
      t2 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1).get$renderObject();
      t2.toString;
      t3 = type$.RenderEditable;
      t2 = t3._as(t2)._editable$_textPainter._text_painter$_text;
      t2.toString;
      t4 = _this._widget.textAlign;
      t5 = _this.get$_editable_text$_textDirection();
      _this._widget.toString;
      t6 = _this._framework$_element;
      t6.toString;
      t6 = B.MediaQuery_textScaleFactorOf(t6);
      _this._widget.toString;
      t7 = _this._framework$_element;
      t7.toString;
      t7 = B.DefaultTextHeightBehavior_maybeOf(t7);
      t8 = _this._widget.get$strutStyle();
      t9 = _this._placeholderLocation;
      t10 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1).get$renderObject();
      t10.toString;
      t10 = t3._as(t10)._size;
      t10.toString;
      newCacheKey = new A._ScribbleCacheKey(t4, t5, t6, t7, null, t8, t9, t10, t2);
      if (force)
        comparison = C.RenderComparison_3;
      else {
        t4 = _this._scribbleCacheKey;
        t4 = t4 == null ? null : t4.compare$1(newCacheKey);
        comparison = t4 == null ? C.RenderComparison_3 : t4;
      }
      if (comparison.index < 3)
        return;
      _this._scribbleCacheKey = newCacheKey;
      rects = B._setArrayType([], type$.JSArray_SelectionRect);
      plainText = t2.toPlainText$1$includeSemanticsLabels(false);
      characterRange = new B.StringCharacterRange(plainText, 0, 0);
      for (graphemeStart = 0; characterRange._advanceEnd$2(1, characterRange._characters_impl$_end); graphemeStart = graphemeEnd) {
        t2 = characterRange._currentCache;
        graphemeEnd = graphemeStart + (t2 == null ? characterRange._currentCache = C.JSString_methods.substring$2(plainText, characterRange._characters_impl$_start, characterRange._characters_impl$_end) : t2).length;
        t2 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1).get$renderObject();
        t2.toString;
        t3._as(t2);
        t4 = graphemeStart < graphemeEnd;
        t5 = t4 ? graphemeStart : graphemeEnd;
        boxes = t2.getBoxesForSelection$1(new B.TextSelection(graphemeStart, graphemeEnd, C.TextAffinity_1, false, t5, t4 ? graphemeEnd : graphemeStart));
        box = boxes.length === 0 ? null : C.JSArray_methods.get$first(boxes);
        if (box != null) {
          t2 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1).get$renderObject();
          t2.toString;
          t2 = t3._as(t2)._size;
          t4 = t2._dx;
          t2 = 0 + t2._dy;
          paintBounds = new B.Rect(0, 0, 0 + t4, t2);
          t4 = box.top;
          if (t2 <= t4)
            break;
          if (paintBounds.contains$1(0, new B.Offset(box.left, t4)) || paintBounds.contains$1(0, new B.Offset(box.right, box.bottom)))
            C.JSArray_methods.add$1(rects, new A.SelectionRect(graphemeStart, box));
        }
      }
      t1 = _this._textInputConnection;
      t1.toString;
      type$.List_SelectionRect._as(rects);
      if (!B.listEquals(t1._cachedSelectionRects, rects, type$.SelectionRect)) {
        t1.set$_cachedSelectionRects(rects);
        $.$get$TextInput__instance()._setSelectionRects$1(rects);
      }
    },
    _updateSelectionRects$0() {
      return this._updateSelectionRects$1$force(false);
    },
    _updateSizeAndTransform$0() {
      var t1, t2, t3, transform, _this = this;
      if (_this.get$_hasInputConnection()) {
        t1 = _this._editableKey;
        t2 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1).get$renderObject();
        t2.toString;
        t3 = type$.RenderEditable;
        t2 = t3._as(t2)._size;
        t2.toString;
        t1 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1).get$renderObject();
        t1.toString;
        transform = t3._as(t1).getTransformTo$1(0, null);
        t1 = _this._textInputConnection;
        if (!t2.$eq(0, t1._cachedSize) || !transform.$eq(0, t1._cachedTransform)) {
          t1._cachedSize = t2;
          t1._cachedTransform = transform;
          $.$get$TextInput__instance()._setEditableSizeAndTransform$2(t2, transform);
        }
        _this._updateSelectionRects$0();
        t1 = $.SchedulerBinding__instance;
        t1.toString;
        C.JSArray_methods.add$1(t1.SchedulerBinding__postFrameCallbacks, type$.void_Function_Duration._as(new A.EditableTextState__updateSizeAndTransform_closure(_this)));
      } else if (_this._placeholderLocation !== -1)
        _this.removeTextPlaceholder$0();
    },
    _updateComposingRectIfNeeded$0() {
      var t1, t2, t3, composingRect, offset, _this = this,
        composingRange = _this._widget.controller._change_notifier$_value.composing;
      if (_this.get$_hasInputConnection()) {
        t1 = _this._editableKey;
        t2 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1).get$renderObject();
        t2.toString;
        t3 = type$.RenderEditable;
        composingRect = t3._as(t2).getRectForComposingRange$1(composingRange);
        if (composingRect == null) {
          offset = composingRange.get$isValid() ? composingRange.start : 0;
          t1 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1).get$renderObject();
          t1.toString;
          composingRect = t3._as(t1).getLocalRectForCaret$1(new B.TextPosition(offset, C.TextAffinity_1));
        }
        _this._textInputConnection.setComposingRect$1(composingRect);
        t1 = $.SchedulerBinding__instance;
        t1.toString;
        C.JSArray_methods.add$1(t1.SchedulerBinding__postFrameCallbacks, type$.void_Function_Duration._as(new A.EditableTextState__updateComposingRectIfNeeded_closure(_this)));
      }
    },
    _updateCaretRectIfNeeded$0() {
      var t1, t2, t3, caretRect, _this = this;
      if (_this.get$_hasInputConnection()) {
        t1 = _this._editableKey;
        t2 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1).get$renderObject();
        t2.toString;
        t3 = type$.RenderEditable;
        t3._as(t2);
        t2 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1).get$renderObject();
        t2.toString;
        if (t3._as(t2)._selection.get$isValid()) {
          t2 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1).get$renderObject();
          t2.toString;
          t2 = t3._as(t2)._selection;
          t2 = t2.start === t2.end;
        } else
          t2 = false;
        if (t2) {
          t2 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1).get$renderObject();
          t2.toString;
          t2 = t3._as(t2)._selection;
          t1 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1).get$renderObject();
          t1.toString;
          caretRect = t3._as(t1).getLocalRectForCaret$1(new B.TextPosition(t2.baseOffset, C.TextAffinity_1));
          _this._textInputConnection.setCaretRect$1(caretRect);
        }
        t1 = $.SchedulerBinding__instance;
        t1.toString;
        C.JSArray_methods.add$1(t1.SchedulerBinding__postFrameCallbacks, type$.void_Function_Duration._as(new A.EditableTextState__updateCaretRectIfNeeded_closure(_this)));
      }
    },
    get$_editable_text$_textDirection() {
      var result = this._widget.textDirection,
        t1 = this._framework$_element.dependOnInheritedWidgetOfExactType$1$0(type$.Directionality);
      t1.toString;
      return t1.textDirection;
    },
    get$textEditingValue() {
      return this._widget.controller._change_notifier$_value;
    },
    userUpdateTextEditingValue$2(value, cause) {
      var _this = this,
        t1 = _this._widget,
        t2 = t1.readOnly;
      t1 = t1.controller._change_notifier$_value;
      if (t2 ? !t1.selection.$eq(0, value.selection) : !t1.$eq(0, value))
        _this._scheduleShowCaretOnScreen$1$withAnimation(true);
      if (value.$eq(0, _this._widget.controller._change_notifier$_value)) {
        if (!_this._widget.focusNode.get$hasFocus()) {
          _this._widget.focusNode.requestFocus$0();
          _this._selectionOverlay = _this._createSelectionOverlay$0();
        }
        return;
      }
      _this._formatAndSetValue$3$userInteraction(value, cause, true);
    },
    bringIntoView$1(position) {
      var t3, targetOffset,
        t1 = this._editableKey,
        t2 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1).get$renderObject();
      t2.toString;
      t3 = type$.RenderEditable;
      targetOffset = this._getOffsetToRevealCaret$1(t3._as(t2).getLocalRectForCaret$1(position));
      this.get$_scrollController().jumpTo$1(targetOffset.offset);
      t1 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1).get$renderObject();
      t1.toString;
      t3._as(t1).showOnScreen$1$rect(targetOffset.rect);
    },
    showToolbar$0() {
      return false;
    },
    hideToolbar$1(hideHandles) {
      var t1,
        _s17_ = "_selectionOverlay";
      if (hideHandles) {
        t1 = this._selectionOverlay;
        if (t1 != null) {
          t1 = t1.__TextSelectionOverlay__selectionOverlay_F;
          t1 === $ && B.throwLateFieldNI(_s17_);
          t1.hide$0();
        }
      } else {
        t1 = this._selectionOverlay;
        t1 = t1 == null ? null : t1.get$toolbarIsVisible();
        if (t1 === true) {
          t1 = this._selectionOverlay;
          if (t1 != null) {
            t1 = t1.__TextSelectionOverlay__selectionOverlay_F;
            t1 === $ && B.throwLateFieldNI(_s17_);
            t1.hideToolbar$0();
          }
        }
      }
    },
    hideToolbar$0() {
      return this.hideToolbar$1(true);
    },
    toggleToolbar$1(hideHandles) {
      var _this = this,
        selectionOverlay = _this._selectionOverlay;
      if ((selectionOverlay == null ? _this._selectionOverlay = _this._createSelectionOverlay$0() : selectionOverlay).get$toolbarIsVisible())
        _this.hideToolbar$1(hideHandles);
      else
        _this.showToolbar$0();
    },
    toggleToolbar$0() {
      return this.toggleToolbar$1(true);
    },
    showMagnifier$1(positionToShow) {
      var t2, position, t3,
        _s17_ = "_selectionOverlay",
        t1 = this._selectionOverlay;
      if (t1 == null)
        return;
      t1 = t1.__TextSelectionOverlay__selectionOverlay_F;
      t1 === $ && B.throwLateFieldNI(_s17_);
      t1 = t1._magnifierController.get$shown();
      t2 = this._selectionOverlay;
      if (t1) {
        t1 = t2.renderObject;
        position = t1.getPositionForPoint$1(positionToShow);
        t2._updateSelectionOverlay$0();
        t3 = t2.__TextSelectionOverlay__selectionOverlay_F;
        t3 === $ && B.throwLateFieldNI(_s17_);
        t3.updateMagnifier$1(t2._buildMagnifier$3$currentTextPosition$globalGesturePosition$renderEditable(position, positionToShow, t1));
      } else {
        t1 = t2.renderObject;
        position = t1.getPositionForPoint$1(positionToShow);
        t2._updateSelectionOverlay$0();
        t3 = t2.__TextSelectionOverlay__selectionOverlay_F;
        t3 === $ && B.throwLateFieldNI(_s17_);
        t3.showMagnifier$1(t2._buildMagnifier$3$currentTextPosition$globalGesturePosition$renderEditable(position, positionToShow, t1));
      }
    },
    hideMagnifier$0() {
      var _s17_ = "_selectionOverlay",
        t1 = this._selectionOverlay;
      if (t1 == null)
        return;
      t1 = t1.__TextSelectionOverlay__selectionOverlay_F;
      t1 === $ && B.throwLateFieldNI(_s17_);
      if (t1._magnifierController.get$shown()) {
        t1 = this._selectionOverlay.__TextSelectionOverlay__selectionOverlay_F;
        t1 === $ && B.throwLateFieldNI(_s17_);
        t1.hideMagnifier$0();
      }
    },
    insertTextPlaceholder$1(size) {
      var t1 = this._widget;
      if (!t1.controller._change_notifier$_value.selection.get$isValid())
        return;
      this.setState$1(new A.EditableTextState_insertTextPlaceholder_closure(this));
    },
    removeTextPlaceholder$0() {
      this._widget.toString;
      this.setState$1(new A.EditableTextState_removeTextPlaceholder_closure(this));
    },
    performSelector$1(selectorName) {
      var t1, primaryContext,
        intent = D.Map_iLREK.$index(0, B._asString(selectorName));
      if (intent != null) {
        t1 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner.focusManager._primaryFocus;
        primaryContext = t1 == null ? null : t1._context;
        if (primaryContext != null)
          A.Actions_invoke(primaryContext, intent, type$.Intent);
      }
    },
    get$textInputConfiguration() {
      var autofillHints, autofillConfiguration, t1, t2, t3, t4, t5, t6, t7, t8, _this = this;
      _this._widget.toString;
      autofillHints = J.JSArray_JSArray$markFixed(C.List_empty0.slice(0), type$.String);
      autofillConfiguration = autofillHints != null ? new A.AutofillConfiguration(true, "EditableText-" + B.Primitives_objectHashCode(_this), autofillHints, _this._widget.controller._change_notifier$_value, null) : D.AutofillConfiguration_lYx;
      t1 = _this._widget;
      t2 = t1.keyboardType;
      t3 = t1.readOnly;
      t4 = t1.smartDashesType;
      t5 = t1.smartQuotesType;
      if (t1.enableInteractiveSelection)
        t6 = true;
      else
        t6 = false;
      t1 = t1.textInputAction;
      if (t1 == null)
        t1 = t2.$eq(0, D.TextInputType_1_null_null) ? C.TextInputAction_12 : C.TextInputAction_2;
      t7 = _this._widget;
      t8 = t7.textCapitalization;
      return A.TextInputConfiguration$(true, autofillConfiguration, false, true, t6, true, t1, t2, t7.keyboardAppearance, false, t3, t4, t5, t8);
    },
    showAutocorrectionPromptRect$2(start, end) {
      this.setState$1(new A.EditableTextState_showAutocorrectionPromptRect_closure(this, start, end));
    },
    _semanticsOnCopy$1(controls) {
      var _this = this,
        t1 = _this._widget;
      if (t1.enableInteractiveSelection)
        if (t1.focusNode.get$hasFocus())
          if (type$.TextSelectionHandleControls._is(_this._widget.selectionControls))
            t1 = _this.get$copyEnabled();
          else if (_this.get$copyEnabled()) {
            t1 = _this._widget.selectionControls == null && null;
            t1 = t1 === true;
          } else
            t1 = false;
        else
          t1 = false;
      else
        t1 = false;
      return t1 ? new A.EditableTextState__semanticsOnCopy_closure(_this, controls) : null;
    },
    _semanticsOnCut$1(controls) {
      var _this = this,
        t1 = _this._widget;
      if (t1.enableInteractiveSelection)
        if (t1.focusNode.get$hasFocus())
          if (type$.TextSelectionHandleControls._is(_this._widget.selectionControls))
            t1 = _this.get$cutEnabled();
          else if (_this.get$cutEnabled()) {
            t1 = _this._widget.selectionControls == null && null;
            t1 = t1 === true;
          } else
            t1 = false;
        else
          t1 = false;
      else
        t1 = false;
      return t1 ? new A.EditableTextState__semanticsOnCut_closure(_this, controls) : null;
    },
    _semanticsOnPaste$1(controls) {
      var _this = this,
        t1 = _this._widget;
      if (t1.enableInteractiveSelection)
        if (t1.focusNode.get$hasFocus()) {
          if (type$.TextSelectionHandleControls._is(_this._widget.selectionControls))
            t1 = _this.get$pasteEnabled();
          else if (_this.get$pasteEnabled()) {
            t1 = _this._widget.selectionControls == null && null;
            t1 = t1 === true;
          } else
            t1 = false;
          if (t1)
            t1 = true;
          else
            t1 = false;
        } else
          t1 = false;
      else
        t1 = false;
      return t1 ? new A.EditableTextState__semanticsOnPaste_closure(_this, controls) : null;
    },
    _characterBoundary$1(intent) {
      var t1 = this._widget.controller._change_notifier$_value,
        atomicTextBoundary = new B.CharacterBoundary(t1.text);
      return intent.forward ? new B._ExpandedTextBoundary(atomicTextBoundary, C.PushTextPosition_true) : new B._ExpandedTextBoundary(atomicTextBoundary, C.PushTextPosition_false);
    },
    _nextWordBoundary$1(intent) {
      var t1, atomicTextBoundary, t2, boundary, mixedBoundary;
      this._widget.toString;
      t1 = this.get$_textEditingValueforTextLayoutMetrics().text;
      atomicTextBoundary = new B.CharacterBoundary(t1);
      t2 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, this._editableKey).get$renderObject();
      t2.toString;
      boundary = new B._ExpandedTextBoundary(new B.WordBoundary(type$.RenderEditable._as(t2)), new B.WhitespaceBoundary(t1));
      t1 = intent.forward;
      mixedBoundary = t1 ? new A._MixedBoundary(atomicTextBoundary, boundary) : new A._MixedBoundary(boundary, atomicTextBoundary);
      return t1 ? new B._ExpandedTextBoundary(mixedBoundary, C.PushTextPosition_true) : new B._ExpandedTextBoundary(mixedBoundary, C.PushTextPosition_false);
    },
    _linebreak$1(intent) {
      var atomicTextBoundary, t1, boundary, pushed;
      this._widget.toString;
      atomicTextBoundary = new B.CharacterBoundary(this.get$_textEditingValueforTextLayoutMetrics().text);
      t1 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, this._editableKey).get$renderObject();
      t1.toString;
      boundary = new B.LineBreak(type$.RenderEditable._as(t1));
      t1 = intent.forward;
      pushed = t1 ? new B._ExpandedTextBoundary(atomicTextBoundary, C.PushTextPosition_true) : new B._ExpandedTextBoundary(atomicTextBoundary, C.PushTextPosition_false);
      return t1 ? new A._MixedBoundary(pushed, boundary) : new A._MixedBoundary(boundary, pushed);
    },
    _documentBoundary$1(intent) {
      return new B.DocumentBoundary(this._widget.controller._change_notifier$_value.text);
    },
    _transposeCharacters$1(intent) {
      var t1, text, transposing, t2, t3, t4, _this = this;
      type$.TransposeCharactersIntent._as(intent);
      t1 = _this._widget.controller._change_notifier$_value.text;
      t1 = t1.length === 0 ? C.StringCharacters_ehH : new B.StringCharacters(t1);
      if (t1.get$length(t1) > 1) {
        t1 = _this._widget;
        t1 = t1.controller._change_notifier$_value.selection;
        t1 = t1.start !== t1.end || t1.baseOffset === 0;
      } else
        t1 = true;
      if (t1)
        return;
      t1 = _this._widget.controller._change_notifier$_value;
      text = t1.text;
      t1 = t1.selection.baseOffset;
      transposing = B.StringCharacterRange_StringCharacterRange$at(text, t1, null);
      t2 = transposing._characters_impl$_start;
      if (t1 === text.length)
        transposing._retractStart$2(2, t2);
      else {
        transposing._retractStart$2(1, t2);
        transposing._advanceEnd$2(1, transposing._characters_impl$_start);
      }
      t1 = transposing._characters_impl$_string;
      t2 = C.JSString_methods.substring$2(t1, 0, transposing._characters_impl$_start);
      t3 = new B.StringCharacters(transposing.get$current(transposing));
      t3 = t3.get$last(t3);
      t4 = new B.StringCharacters(transposing.get$current(transposing));
      _this.userUpdateTextEditingValue$2(new B.TextEditingValue(t2 + t3 + t4.get$first(t4) + C.JSString_methods.substring$1(t1, transposing._characters_impl$_end), A.TextSelection$collapsed(C.TextAffinity_1, transposing._characters_impl$_start + transposing.get$current(transposing).length), C.TextRange_m1_m1), C.SelectionChangedCause_4);
    },
    _replaceText$1(intent) {
      var t1, newValue;
      type$.ReplaceTextIntent._as(intent);
      t1 = this._widget.controller._change_notifier$_value;
      newValue = intent.currentTextEditingValue.replaced$2(intent.replacementRange, intent.replacementText);
      this.userUpdateTextEditingValue$2(newValue, intent.cause);
      if (newValue.$eq(0, t1))
        this._didChangeTextEditingValue$0();
    },
    _scrollToDocumentBoundary$1(intent) {
      if (type$.ScrollToDocumentBoundaryIntent._as(intent).forward)
        this.bringIntoView$1(new B.TextPosition(this._widget.controller._change_notifier$_value.text.length, C.TextAffinity_1));
      else
        this.bringIntoView$1(C.TextPosition_0_TextAffinity_1);
    },
    _scroll$1(intent) {
      var position, t1, t2, state, increment, t3, destination, _this = this;
      type$.ScrollIntent._as(intent);
      if (intent.type !== C.ScrollIncrementType_1)
        return;
      position = C.JSArray_methods.get$single(_this.get$_scrollController()._positions);
      if (_this._widget.maxLines === 1) {
        t1 = _this.get$_scrollController();
        t2 = position._maxScrollExtent;
        t2.toString;
        t1.jumpTo$1(t2);
        return;
      }
      t1 = position._maxScrollExtent;
      t1.toString;
      if (t1 === 0) {
        t1 = position._minScrollExtent;
        t1.toString;
        t1 = t1 === 0;
      } else
        t1 = false;
      if (t1)
        return;
      state = type$.nullable_ScrollableState._as(_this._scrollableKey.get$currentState());
      state.toString;
      increment = B.ScrollAction_getDirectionalIncrement(state, intent);
      t1 = position._pixels;
      t1.toString;
      t2 = position._minScrollExtent;
      t2.toString;
      t3 = position._maxScrollExtent;
      t3.toString;
      destination = B.clampDouble(t1 + increment, t2, t3);
      if (destination === t1)
        return;
      _this.get$_scrollController().jumpTo$1(destination);
    },
    _extendSelectionByPage$1(intent) {
      var t1, t2, t3, extentRect, state, increment, position, t4, t5, t6, nextExtent, nextSelection, _this = this;
      type$.ExtendSelectionByPageIntent._as(intent);
      if (_this._widget.maxLines === 1)
        return;
      t1 = _this._editableKey;
      t2 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1).get$renderObject();
      t2.toString;
      t3 = type$.RenderEditable;
      extentRect = t3._as(t2).getLocalRectForCaret$1(_this._widget.controller._change_notifier$_value.selection.get$extent());
      state = type$.nullable_ScrollableState._as(_this._scrollableKey.get$currentState());
      state.toString;
      increment = B.ScrollAction_getDirectionalIncrement(state, new B.ScrollIntent(intent.get$forward(intent) ? C.AxisDirection_2 : C.AxisDirection_0, C.ScrollIncrementType_1));
      position = C.JSArray_methods.get$single(_this.get$_scrollController()._positions);
      if (intent.get$forward(intent)) {
        t2 = _this._widget.controller._change_notifier$_value;
        if (t2.selection.extentOffset >= t2.text.length)
          return;
        t2 = extentRect.top + increment;
        t4 = position._maxScrollExtent;
        t4.toString;
        t5 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1).get$renderObject();
        t5.toString;
        t5 = t3._as(t5)._size._dy;
        t6 = position._pixels;
        t6.toString;
        if (t2 + t6 >= t4 + t5)
          nextExtent = new B.TextPosition(_this._widget.controller._change_notifier$_value.text.length, C.TextAffinity_1);
        else {
          t4 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1).get$renderObject();
          t4.toString;
          t3._as(t4);
          t1 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1).get$renderObject();
          t1.toString;
          nextExtent = t4.getPositionForPoint$1(B.MatrixUtils_transformPoint(t3._as(t1).getTransformTo$1(0, null), new B.Offset(extentRect.left, t2)));
        }
        nextSelection = _this._widget.controller._change_notifier$_value.selection.copyWith$1$extentOffset(nextExtent.offset);
      } else {
        if (_this._widget.controller._change_notifier$_value.selection.extentOffset <= 0)
          return;
        t2 = extentRect.top + increment;
        t4 = position._pixels;
        t4.toString;
        if (t2 + t4 <= 0)
          nextExtent = C.TextPosition_0_TextAffinity_1;
        else {
          t4 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1).get$renderObject();
          t4.toString;
          t3._as(t4);
          t1 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1).get$renderObject();
          t1.toString;
          nextExtent = t4.getPositionForPoint$1(B.MatrixUtils_transformPoint(t3._as(t1).getTransformTo$1(0, null), new B.Offset(extentRect.left, t2)));
        }
        nextSelection = _this._widget.controller._change_notifier$_value.selection.copyWith$1$extentOffset(nextExtent.offset);
      }
      _this.bringIntoView$1(nextSelection.get$extent());
      _this.userUpdateTextEditingValue$2(_this._widget.controller._change_notifier$_value.copyWith$1$selection(nextSelection), C.SelectionChangedCause_4);
    },
    _updateSelection$1(intent) {
      var t1;
      type$.UpdateSelectionIntent._as(intent);
      t1 = intent.newSelection;
      this.bringIntoView$1(t1.get$extent());
      this.userUpdateTextEditingValue$2(intent.currentTextEditingValue.copyWith$1$selection(t1), intent.cause);
    },
    get$_verticalSelectionUpdateAction() {
      var result, _this = this,
        value = _this.__EditableTextState__verticalSelectionUpdateAction_FI;
      if (value === $) {
        result = new A._UpdateTextSelectionVerticallyAction(_this, new B.ObserverList(B._setArrayType([], type$.JSArray_of_void_Function_Action_Intent), type$.ObserverList_of_void_Function_Action_Intent), type$._UpdateTextSelectionVerticallyAction_DirectionalCaretMovementIntent);
        _this.__EditableTextState__verticalSelectionUpdateAction_FI !== $ && B.throwLateFieldADI("_verticalSelectionUpdateAction");
        _this.set$__EditableTextState__verticalSelectionUpdateAction_FI(result);
        value = result;
      }
      return value;
    },
    _expandSelectionToDocumentBoundary$1(intent) {
      this._expandSelection$3(type$.ExpandSelectionToDocumentBoundaryIntent._as(intent).forward, new B.DocumentBoundary(this._widget.controller._change_notifier$_value.text), true);
    },
    _expandSelectionToLinebreak$1(intent) {
      type$.ExpandSelectionToLineBreakIntent._as(intent);
      this._expandSelection$2(intent.forward, this._linebreak$1(intent));
    },
    _expandSelection$3($forward, textBoundary, extentAtIndex) {
      var position, newExtent, newSelection, _this = this,
        textBoundarySelection = _this._widget.controller._change_notifier$_value.selection;
      if (!textBoundarySelection.get$isValid())
        return;
      position = $forward === textBoundarySelection.baseOffset <= textBoundarySelection.extentOffset ? textBoundarySelection.get$extent() : textBoundarySelection.get$base();
      newExtent = $forward ? textBoundary.getTrailingTextBoundaryAt$1(position) : textBoundary.getLeadingTextBoundaryAt$1(position);
      newSelection = textBoundarySelection.expandTo$2(newExtent, textBoundarySelection.start === textBoundarySelection.end || extentAtIndex);
      _this.userUpdateTextEditingValue$2(_this._widget.controller._change_notifier$_value.copyWith$1$selection(newSelection), C.SelectionChangedCause_4);
      _this.bringIntoView$1(newSelection.get$extent());
    },
    _expandSelection$2($forward, textBoundary) {
      return this._expandSelection$3($forward, textBoundary, false);
    },
    _hideToolbarIfVisible$1(intent) {
      var t2,
        t1 = type$.DismissIntent;
      t1._as(intent);
      t2 = this._selectionOverlay;
      t2 = t2 == null ? null : t2.get$toolbarIsVisible();
      if (t2 === true) {
        this.hideToolbar$1(false);
        return null;
      }
      t2 = this._framework$_element;
      t2.toString;
      return A.Actions_invoke(t2, intent, t1);
    },
    _defaultOnTapOutside$1($event) {
      switch (B.defaultTargetPlatform().index) {
        case 0:
        case 2:
        case 1:
          switch ($event.get$kind($event).index) {
            case 0:
              this._widget.focusNode.unfocus$0();
              break;
            case 1:
            case 2:
            case 3:
            case 5:
              this._widget.focusNode.unfocus$0();
              break;
            case 4:
              throw B.wrapException(B.UnimplementedError$("Unexpected pointer down event for trackpad"));
          }
          break;
        case 3:
        case 4:
        case 5:
          this._widget.focusNode.unfocus$0();
          break;
      }
    },
    get$_editable_text$_actions() {
      var t1, t2, t3, result, value0, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, value1, _this = this, _s1_ = "T",
        _s16_ = "_makeOverridable",
        value = _this.__EditableTextState__actions_FI;
      if (value === $) {
        t1 = type$.JSArray_of_void_Function_Action_Intent;
        t2 = B._setArrayType([], t1);
        t3 = type$.ObserverList_of_void_Function_Action_Intent;
        value = _this.__EditableTextState__replaceTextAction_FI;
        if (value === $) {
          result = new B.CallbackAction(_this.get$_replaceText(), new B.ObserverList(B._setArrayType([], t1), t3), type$.CallbackAction_ReplaceTextIntent);
          _this.__EditableTextState__replaceTextAction_FI !== $ && B.throwLateFieldADI("_replaceTextAction");
          _this.set$__EditableTextState__replaceTextAction_FI(result);
          value = result;
        }
        value0 = _this.__EditableTextState__updateSelectionAction_FI;
        if (value0 === $) {
          result = new B.CallbackAction(_this.get$_updateSelection(), new B.ObserverList(B._setArrayType([], t1), t3), type$.CallbackAction_UpdateSelectionIntent);
          _this.__EditableTextState__updateSelectionAction_FI !== $ && B.throwLateFieldADI("_updateSelectionAction");
          _this.set$__EditableTextState__updateSelectionAction_FI(result);
          value0 = result;
        }
        t4 = B._setArrayType([], t1);
        t5 = B._setArrayType([], t1);
        t6 = _this.get$_characterBoundary();
        t7 = B._setArrayType([], t1);
        t8 = type$.Intent;
        B.checkTypeBound(t8, t8, _s1_, _s16_);
        t9 = type$.Action_Intent;
        t7 = t9._as(new A._DeleteTextAction(_this, t6, new B.ObserverList(t7, t3), type$._DeleteTextAction_DeleteCharacterIntent));
        t10 = _this._framework$_element;
        t10.toString;
        t10 = t7._makeOverridableAction$1(t10);
        t7 = _this.get$_nextWordBoundary();
        t11 = B._setArrayType([], t1);
        B.checkTypeBound(t8, t8, _s1_, _s16_);
        t11 = t9._as(new A._DeleteTextAction(_this, t7, new B.ObserverList(t11, t3), type$._DeleteTextAction_DeleteToNextWordBoundaryIntent));
        t12 = _this._framework$_element;
        t12.toString;
        t12 = t11._makeOverridableAction$1(t12);
        t11 = _this.get$_linebreak();
        t13 = B._setArrayType([], t1);
        B.checkTypeBound(t8, t8, _s1_, _s16_);
        t13 = t9._as(new A._DeleteTextAction(_this, t11, new B.ObserverList(t13, t3), type$._DeleteTextAction_DeleteToLineBreakIntent));
        t14 = _this._framework$_element;
        t14.toString;
        t14 = t13._makeOverridableAction$1(t14);
        t13 = B._setArrayType([], t1);
        B.checkTypeBound(t8, t8, _s1_, _s16_);
        t13 = t9._as(new A._UpdateTextSelectionAction(_this, false, t6, new B.ObserverList(t13, t3), type$._UpdateTextSelectionAction_ExtendSelectionByCharacterIntent));
        t6 = _this._framework$_element;
        t6.toString;
        t6 = t13._makeOverridableAction$1(t6);
        t13 = B._setArrayType([], t1);
        B.checkTypeBound(t8, t8, _s1_, _s16_);
        t13 = t9._as(new B.CallbackAction(_this.get$_extendSelectionByPage(), new B.ObserverList(t13, t3), type$.CallbackAction_ExtendSelectionByPageIntent));
        t15 = _this._framework$_element;
        t15.toString;
        t15 = t13._makeOverridableAction$1(t15);
        t13 = B._setArrayType([], t1);
        B.checkTypeBound(t8, t8, _s1_, _s16_);
        t13 = t9._as(new A._UpdateTextSelectionAction(_this, true, t7, new B.ObserverList(t13, t3), type$._UpdateTextSelectionAction_ExtendSelectionToNextWordBoundaryIntent));
        t16 = _this._framework$_element;
        t16.toString;
        t16 = t13._makeOverridableAction$1(t16);
        t13 = B._setArrayType([], t1);
        B.checkTypeBound(t8, t8, _s1_, _s16_);
        t13 = t9._as(new A._UpdateTextSelectionAction(_this, true, t11, new B.ObserverList(t13, t3), type$._UpdateTextSelectionAction_ExtendSelectionToLineBreakIntent));
        t11 = _this._framework$_element;
        t11.toString;
        t11 = t13._makeOverridableAction$1(t11);
        t13 = B._setArrayType([], t1);
        B.checkTypeBound(t8, t8, _s1_, _s16_);
        t13 = t9._as(new B.CallbackAction(_this.get$_expandSelectionToLinebreak(), new B.ObserverList(t13, t3), type$.CallbackAction_ExpandSelectionToLineBreakIntent));
        t17 = _this._framework$_element;
        t17.toString;
        t17 = t13._makeOverridableAction$1(t17);
        t13 = B._setArrayType([], t1);
        B.checkTypeBound(t8, t8, _s1_, _s16_);
        t13 = t9._as(new B.CallbackAction(_this.get$_expandSelectionToDocumentBoundary(), new B.ObserverList(t13, t3), type$.CallbackAction_ExpandSelectionToDocumentBoundaryIntent));
        t18 = _this._framework$_element;
        t18.toString;
        t18 = t13._makeOverridableAction$1(t18);
        t13 = _this.get$_verticalSelectionUpdateAction();
        B.checkTypeBound(t8, t8, _s1_, _s16_);
        t9._as(t13);
        t19 = _this._framework$_element;
        t19.toString;
        t19 = t13._makeOverridableAction$1(t19);
        t13 = _this.get$_verticalSelectionUpdateAction();
        B.checkTypeBound(t8, t8, _s1_, _s16_);
        t9._as(t13);
        t20 = _this._framework$_element;
        t20.toString;
        t20 = t13._makeOverridableAction$1(t20);
        t13 = B._setArrayType([], t1);
        B.checkTypeBound(t8, t8, _s1_, _s16_);
        t13 = t9._as(new A._UpdateTextSelectionAction(_this, true, _this.get$_documentBoundary(), new B.ObserverList(t13, t3), type$._UpdateTextSelectionAction_ExtendSelectionToDocumentBoundaryIntent));
        t21 = _this._framework$_element;
        t21.toString;
        t21 = t13._makeOverridableAction$1(t21);
        t13 = B._setArrayType([], t1);
        B.checkTypeBound(t8, t8, _s1_, _s16_);
        t13 = t9._as(new A._ExtendSelectionOrCaretPositionAction(_this, t7, new B.ObserverList(t13, t3)));
        t7 = _this._framework$_element;
        t7.toString;
        t7 = t13._makeOverridableAction$1(t7);
        t13 = B._setArrayType([], t1);
        B.checkTypeBound(t8, t8, _s1_, _s16_);
        t13 = t9._as(new B.CallbackAction(_this.get$_scrollToDocumentBoundary(), new B.ObserverList(t13, t3), type$.CallbackAction_ScrollToDocumentBoundaryIntent));
        t22 = _this._framework$_element;
        t22.toString;
        t22 = t13._makeOverridableAction$1(t22);
        t13 = B._setArrayType([], t1);
        t23 = B._setArrayType([], t1);
        B.checkTypeBound(t8, t8, _s1_, _s16_);
        t23 = t9._as(new A._SelectAllAction(_this, new B.ObserverList(t23, t3)));
        t24 = _this._framework$_element;
        t24.toString;
        t24 = t23._makeOverridableAction$1(t24);
        t23 = B._setArrayType([], t1);
        B.checkTypeBound(t8, t8, _s1_, _s16_);
        t23 = t9._as(new A._CopySelectionAction(_this, new B.ObserverList(t23, t3)));
        t25 = _this._framework$_element;
        t25.toString;
        t25 = t23._makeOverridableAction$1(t25);
        t23 = B._setArrayType([], t1);
        B.checkTypeBound(t8, t8, _s1_, _s16_);
        t23 = t9._as(new B.CallbackAction(new A.EditableTextState__actions_closure(_this), new B.ObserverList(t23, t3), type$.CallbackAction_PasteTextIntent));
        t26 = _this._framework$_element;
        t26.toString;
        t26 = t23._makeOverridableAction$1(t26);
        value1 = _this.__EditableTextState__transposeCharactersAction_FI;
        if (value1 === $) {
          result = new B.CallbackAction(_this.get$_transposeCharacters(), new B.ObserverList(B._setArrayType([], t1), t3), type$.CallbackAction_TransposeCharactersIntent);
          _this.__EditableTextState__transposeCharactersAction_FI !== $ && B.throwLateFieldADI("_transposeCharactersAction");
          _this.set$__EditableTextState__transposeCharactersAction_FI(result);
          value1 = result;
        }
        B.checkTypeBound(t8, t8, _s1_, _s16_);
        t9._as(value1);
        t1 = _this._framework$_element;
        t1.toString;
        result = B.LinkedHashMap_LinkedHashMap$_literal([D.Type_muk, new B.DoNothingAction(false, new B.ObserverList(t2, t3)), D.Type_ReplaceTextIntent_S40, value, D.Type_UpdateSelectionIntent_RH1, value0, C.Type_DirectionalFocusIntent_evN, new B.DirectionalFocusAction(true, new B.ObserverList(t4, t3)), C.Type_DismissIntent_Fb0, new B.CallbackAction(_this.get$_hideToolbarIfVisible(), new B.ObserverList(t5, t3), type$.CallbackAction_DismissIntent), D.Type_DeleteCharacterIntent_NYh, t10, D.Type_wu8, t12, D.Type_DeleteToLineBreakIntent_MEg, t14, D.Type_3dk, t6, D.Type_ExtendSelectionByPageIntent_gMT, t15, D.Type_0Jp, t16, D.Type_23B, t11, D.Type_oyU, t17, D.Type_kr3, t18, D.Type_ejq, t19, D.Type_ejq0, t20, D.Type_0Jp0, t21, D.Type_mya, t7, D.Type_46c, t22, C.Type_ScrollIntent_mpH, new B.CallbackAction(_this.get$_scroll(), new B.ObserverList(t13, t3), type$.CallbackAction_ScrollIntent), D.Type_SelectAllTextIntent_5TD, t24, D.Type_CopySelectionTextIntent_T5o, t25, D.Type_PasteTextIntent_i6t, t26, D.Type_TransposeCharactersIntent_a66, value1._makeOverridableAction$1(t1)], type$.Type, t9);
        _this.__EditableTextState__actions_FI !== $ && B.throwLateFieldADI("_actions");
        _this.set$__EditableTextState__actions_FI(result);
        value = result;
      }
      return value;
    },
    build$1(context) {
      var t1, controls, t2, t3, t4, t5, t6, t7, t8, t9, t10, _this = this, _null = null;
      _this.super$AutomaticKeepAliveClientMixin$build(context);
      t1 = _this._widget;
      controls = t1.selectionControls;
      t1 = t1.mouseCursor;
      t2 = _this.get$_editable_text$_actions();
      t3 = _this._widget;
      t4 = t3.controller;
      t5 = t3.focusNode;
      t3 = t3.maxLines !== 1 ? C.AxisDirection_2 : C.AxisDirection_1;
      t6 = _this.get$_scrollController();
      t7 = _this._widget;
      t8 = t7.scrollPhysics;
      t9 = t7.dragStartBehavior;
      t7 = t7.restorationId;
      t10 = B.ScrollConfiguration_of(context).copyWith$2$overscroll$scrollbars(false, _this._widget.maxLines !== 1);
      return A.TextFieldTapRegion$(B.MouseRegion$(B.Actions$(t2, new A._TextEditingHistory(B.Focus$(false, _null, H.Scrollable$(t3, C.Clip_1, t6, t9, true, _this._scrollableKey, t8, t7, t10, _null, new A.EditableTextState_build_closure(_this, controls)), _null, _null, _null, t5, false, _null, _null, _null, _null, _null, _null), t4, new A.EditableTextState_build_closure0(_this), _null)), t1, _null, _null, _null, _null), _null, _this.get$_defaultOnTapOutside());
    },
    buildTextSpan$0() {
      var t2, placeholders, placeholderLocation, spellCheckResultsReceived, withComposing, composingRegionOutOfRange, t3, t4, spellCheckResultsSpans, spellCheckResultsText, _this = this, _null = null,
        t1 = _this._widget;
      t1.toString;
      t2 = _this._placeholderLocation;
      if (t2 >= 0 && t2 <= t1.controller._change_notifier$_value.text.length) {
        placeholders = B._setArrayType([], type$.JSArray__ScribblePlaceholder);
        t1 = _this._widget;
        placeholderLocation = t1.controller._change_notifier$_value.text.length - _this._placeholderLocation;
        if (t1.maxLines !== 1) {
          C.JSArray_methods.add$1(placeholders, D._ScribblePlaceholder_IBZ);
          t1 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, _this._editableKey).get$renderObject();
          t1.toString;
          C.JSArray_methods.add$1(placeholders, new A._ScribblePlaceholder(new B.Size(type$.RenderEditable._as(t1)._size._dx, 0), C.SizedBox_0_0_null_null, C.PlaceholderAlignment_4, _null, _null));
        } else
          C.JSArray_methods.add$1(placeholders, D._ScribblePlaceholder_IBZ0);
        t1 = _this._widget;
        t2 = t1.style;
        t1 = B._setArrayType([B.TextSpan$(_null, _null, C.JSString_methods.substring$2(t1.controller._change_notifier$_value.text, 0, placeholderLocation))], type$.JSArray_InlineSpan);
        C.JSArray_methods.addAll$1(t1, placeholders);
        t1.push(B.TextSpan$(_null, _null, C.JSString_methods.substring$1(_this._widget.controller._change_notifier$_value.text, placeholderLocation)));
        return B.TextSpan$(t1, t2, _null);
      }
      t2 = _this.__EditableTextState__spellCheckConfiguration_A;
      t2 === $ && B.throwLateFieldNI("_spellCheckConfiguration");
      spellCheckResultsReceived = t2._spellCheckEnabled && _this._spellCheckResults != null;
      withComposing = !t1.readOnly && t1.focusNode.get$hasFocus();
      if (spellCheckResultsReceived) {
        composingRegionOutOfRange = !_this._widget.controller._change_notifier$_value.get$isComposingRangeValid() || !withComposing;
        t1 = _this._widget;
        t2 = t1.controller._change_notifier$_value;
        t1 = t1.style;
        t3 = _this.__EditableTextState__spellCheckConfiguration_A.misspelledTextStyle;
        t3.toString;
        t4 = _this._spellCheckResults;
        spellCheckResultsSpans = t4.suggestionSpans;
        spellCheckResultsText = t4.spellCheckedText;
        t4 = t2.text;
        return B.TextSpan$(A._buildSubtreesWithMisspelledWordsIndicated(spellCheckResultsText !== t4 ? A._correctSpellCheckResults(t4, spellCheckResultsText, spellCheckResultsSpans) : spellCheckResultsSpans, t2, t1, t3, composingRegionOutOfRange), t1, _null);
      }
      t1 = _this._widget;
      t2 = t1.controller;
      t3 = _this._framework$_element;
      t3.toString;
      return t2.buildTextSpan$3$context$style$withComposing(t3, t1.style, withComposing);
    },
    set$__EditableTextState__transposeCharactersAction_FI(__EditableTextState__transposeCharactersAction_FI) {
      this.__EditableTextState__transposeCharactersAction_FI = type$.Action_TransposeCharactersIntent._as(__EditableTextState__transposeCharactersAction_FI);
    },
    set$__EditableTextState__replaceTextAction_FI(__EditableTextState__replaceTextAction_FI) {
      this.__EditableTextState__replaceTextAction_FI = type$.Action_ReplaceTextIntent._as(__EditableTextState__replaceTextAction_FI);
    },
    set$__EditableTextState__updateSelectionAction_FI(__EditableTextState__updateSelectionAction_FI) {
      this.__EditableTextState__updateSelectionAction_FI = type$.Action_UpdateSelectionIntent._as(__EditableTextState__updateSelectionAction_FI);
    },
    set$__EditableTextState__verticalSelectionUpdateAction_FI(__EditableTextState__verticalSelectionUpdateAction_FI) {
      this.__EditableTextState__verticalSelectionUpdateAction_FI = type$._UpdateTextSelectionVerticallyAction_DirectionalCaretMovementIntent._as(__EditableTextState__verticalSelectionUpdateAction_FI);
    },
    set$__EditableTextState__actions_FI(__EditableTextState__actions_FI) {
      this.__EditableTextState__actions_FI = type$.Map_of_Type_and_Action_Intent._as(__EditableTextState__actions_FI);
    },
    $isTickerProvider: 1,
    $isAutofillClient: 1
  };
  A._Editable.prototype = {
    createRenderObject$1(context) {
      var t9, t10, _this = this, _null = null,
        t1 = _this.inlineSpan,
        t2 = _this.maxLines,
        t3 = B.Localizations_maybeLocaleOf(context),
        t4 = _this.value.selection,
        t5 = A._TextHighlightPainter$(),
        t6 = A._TextHighlightPainter$(),
        t7 = type$.bool,
        t8 = B.ValueNotifier$(true, t7);
      t7 = B.ValueNotifier$(true, t7);
      t9 = B.LayerHandle$(type$.ClipRectLayer);
      t10 = t2 === 1 ? 1 : _null;
      t10 = B.TextPainter$(_null, t3, t10, _this.strutStyle, t1, _this.textAlign, _this.textDirection, _this.textHeightBehavior, _this.textScaleFactor, _this.textWidthBasis);
      t2 = new A.RenderEditable(t5, t6, _this.onCaretChanged, true, _this.devicePixelRatio, _this.obscuringCharacter, false, _this.textSelectionDelegate, t8, t7, t10, _this.showCursor, _this.hasFocus, true, _this.readOnly, t2, _this.minLines, false, t4, _this.offset, _this.cursorWidth, _this.cursorHeight, _this.paintCursorAboveText, _this.startHandleLayerLink, _this.endHandleLayerLink, _this.enableInteractiveSelection, _this.clipBehavior, C.Offset_0_0, t9, 0, _null, _null, B.LayerHandle$(type$.ContainerLayer));
      t2.RenderObject$0();
      t5.set$highlightColor(_this.selectionColor);
      t5.set$highlightedRange(t4);
      t5.set$selectionHeightStyle(_this.selectionHeightStyle);
      t5.set$selectionWidthStyle(_this.selectionWidthStyle);
      t6.set$highlightColor(_this.promptRectColor);
      t6.set$highlightedRange(_this.promptRectRange);
      t2.get$_caretPainter().set$caretColor(_this.cursorColor);
      t2.get$_caretPainter().set$cursorRadius(_this.cursorRadius);
      t2.get$_caretPainter().set$cursorOffset(_this.cursorOffset);
      t2.get$_caretPainter().set$backgroundCursorColor(_this.backgroundCursorColor);
      t2._updateForegroundPainter$1(_null);
      t2._updatePainter$1(_null);
      t2.addAll$1(0, _null);
      t2._editable$_extractPlaceholderSpans$1(t1);
      return t2;
    },
    updateRenderObject$2(context, renderObject) {
      var t1, t2, _this = this;
      type$.RenderEditable._as(renderObject);
      renderObject.set$text(0, _this.inlineSpan);
      renderObject.get$_caretPainter().set$caretColor(_this.cursorColor);
      renderObject.set$startHandleLayerLink(_this.startHandleLayerLink);
      renderObject.set$endHandleLayerLink(_this.endHandleLayerLink);
      renderObject.get$_caretPainter().set$backgroundCursorColor(_this.backgroundCursorColor);
      renderObject.set$showCursor(_this.showCursor);
      renderObject.set$forceLine(true);
      renderObject.set$readOnly(0, _this.readOnly);
      renderObject.set$hasFocus(_this.hasFocus);
      renderObject.set$maxLines(_this.maxLines);
      renderObject.set$minLines(_this.minLines);
      renderObject.set$expands(false);
      renderObject.set$strutStyle(_this.strutStyle);
      t1 = renderObject._selectionPainter;
      t1.set$highlightColor(_this.selectionColor);
      renderObject.set$textScaleFactor(_this.textScaleFactor);
      renderObject.set$textAlign(0, _this.textAlign);
      renderObject.set$textDirection(_this.textDirection);
      t2 = B.Localizations_maybeLocaleOf(context);
      renderObject.set$locale(0, t2);
      renderObject.set$selection(_this.value.selection);
      renderObject.set$offset(0, _this.offset);
      renderObject.set$onCaretChanged(_this.onCaretChanged);
      renderObject.ignorePointer = true;
      renderObject.set$textHeightBehavior(_this.textHeightBehavior);
      renderObject.set$textWidthBasis(_this.textWidthBasis);
      renderObject.set$obscuringCharacter(_this.obscuringCharacter);
      renderObject.set$obscureText(false);
      renderObject.set$cursorWidth(_this.cursorWidth);
      renderObject.set$cursorHeight(_this.cursorHeight);
      renderObject.get$_caretPainter().set$cursorRadius(_this.cursorRadius);
      renderObject.get$_caretPainter().set$cursorOffset(_this.cursorOffset);
      t1.set$selectionHeightStyle(_this.selectionHeightStyle);
      t1.set$selectionWidthStyle(_this.selectionWidthStyle);
      renderObject.set$enableInteractiveSelection(_this.enableInteractiveSelection);
      renderObject.textSelectionDelegate = _this.textSelectionDelegate;
      renderObject.set$devicePixelRatio(0, _this.devicePixelRatio);
      renderObject.set$paintCursorAboveText(_this.paintCursorAboveText);
      t1 = renderObject._autocorrectHighlightPainter;
      t1.set$highlightColor(_this.promptRectColor);
      t2 = _this.clipBehavior;
      if (t2 !== renderObject._editable$_clipBehavior) {
        renderObject._editable$_clipBehavior = t2;
        renderObject.markNeedsPaint$0();
        renderObject.markNeedsSemanticsUpdate$0();
      }
      t1.set$highlightedRange(_this.promptRectRange);
    }
  };
  A._ScribbleCacheKey.prototype = {
    compare$1(other) {
      var t1, needsLayout, _this = this;
      if (other === _this)
        return C.RenderComparison_0;
      if (_this.textAlign === other.textAlign)
        if (_this.textDirection === other.textDirection) {
          if (_this.textScaleFactor === other.textScaleFactor)
            t1 = !D.TextHeightBehavior_TextLeadingDistribution_0.$eq(0, D.TextHeightBehavior_TextLeadingDistribution_0) || !_this.structStyle.$eq(0, other.structStyle) || _this.placeholder !== other.placeholder || !_this.size.$eq(0, other.size);
          else
            t1 = true;
          needsLayout = t1;
        } else
          needsLayout = true;
      else
        needsLayout = true;
      return needsLayout ? C.RenderComparison_3 : _this.inlineSpan.compareTo$1(0, other.inlineSpan);
    }
  };
  A._ScribbleFocusable.prototype = {
    createState$0() {
      var t1 = $._ScribbleFocusableState__nextElementIdentifier;
      $._ScribbleFocusableState__nextElementIdentifier = t1 + 1;
      return new A._ScribbleFocusableState(C.JSInt_methods.toString$0(t1), C._StateLifecycle_0);
    },
    updateSelectionRects$0() {
      return this.updateSelectionRects.call$0();
    }
  };
  A._ScribbleFocusableState.prototype = {
    initState$0() {
      var _this = this;
      _this.super$State$initState();
      _this._widget.toString;
      $.$get$TextInput__instance()._scribbleClients.$indexSet(0, _this._elementIdentifier, _this);
    },
    didUpdateWidget$1(oldWidget) {
      this.super$State$didUpdateWidget(type$._ScribbleFocusable._as(oldWidget));
      this._widget.toString;
    },
    dispose$0() {
      $.$get$TextInput__instance()._scribbleClients.remove$1(0, this._elementIdentifier);
      this.super$State$dispose();
    },
    get$renderEditable() {
      var t1 = this._widget.editableKey;
      t1 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1);
      t1 = t1 == null ? null : t1.get$renderObject();
      return type$.nullable_RenderEditable._as(t1);
    },
    onScribbleFocus$1(offset) {
      var t1;
      this._widget.focusNode.requestFocus$0();
      t1 = this.get$renderEditable();
      if (t1 != null)
        t1.selectPositionAt$2$cause$from(D.SelectionChangedCause_7, offset);
      this._widget.updateSelectionRects$0();
    },
    isInScribbleRect$1(rect) {
      var intersection, result, t2, t3, _this = this,
        calculatedBounds = _this.get$bounds(_this),
        t1 = _this.get$renderEditable();
      t1 = t1 == null ? null : t1._readOnly;
      if (t1 === true)
        return false;
      if (calculatedBounds.$eq(0, C.Rect_0_0_0_0))
        return false;
      if (!calculatedBounds.overlaps$1(rect))
        return false;
      intersection = calculatedBounds.intersect$1(rect);
      result = B.HitTestResult$();
      t1 = $.WidgetsBinding__instance;
      t1.toString;
      t2 = intersection.get$center();
      t3 = t1.RendererBinding___RendererBinding__pipelineOwner_A;
      t3 === $ && B.throwLateFieldNI("_pipelineOwner");
      t3._rootNode.hitTest$2$position(result, t2);
      t1.super$GestureBinding$hitTest(result, t2);
      return C.JSArray_methods.any$1(result._path, new A._ScribbleFocusableState_isInScribbleRect_closure(_this));
    },
    get$bounds(_) {
      var transform, t1,
        box = type$.nullable_RenderBox._as(this._framework$_element.get$renderObject());
      if (box == null || this._framework$_element == null || box._node$_owner == null)
        return C.Rect_0_0_0_0;
      transform = box.getTransformTo$1(0, null);
      t1 = box._size;
      return B.MatrixUtils_transformRect(transform, new B.Rect(0, 0, 0 + t1._dx, 0 + t1._dy));
    },
    build$1(context) {
      return this._widget.child;
    },
    $isScribbleClient: 1
  };
  A._ScribblePlaceholder.prototype = {
    build$3$dimensions$textScaleFactor(builder, dimensions, textScaleFactor) {
      var t1, hasStyle;
      type$.nullable_List_PlaceholderDimensions._as(dimensions);
      t1 = this.style;
      hasStyle = t1 != null;
      if (hasStyle)
        builder.pushStyle$1(t1.getTextStyle$1$textScaleFactor(textScaleFactor));
      t1 = this.size;
      builder.addPlaceholder$4$scale(t1._dx, t1._dy, this.alignment, textScaleFactor);
      if (hasStyle)
        builder.pop$0();
    }
  };
  A._MixedBoundary.prototype = {
    getLeadingTextBoundaryAt$1(position) {
      return this.leadingTextBoundary.getLeadingTextBoundaryAt$1(type$.TextPosition._as(position));
    },
    getTrailingTextBoundaryAt$1(position) {
      return this.trailingTextBoundary.getTrailingTextBoundaryAt$1(type$.TextPosition._as(position));
    }
  };
  A._DeleteTextAction.prototype = {
    _expandNonCollapsedRange$1(value) {
      var atomicBoundary,
        selection = value.selection;
      this.state._widget.toString;
      atomicBoundary = new B.CharacterBoundary(value.text);
      return new B.TextRange(atomicBoundary.getLeadingTextBoundaryAt$1(new B.TextPosition(selection.start, C.TextAffinity_1)).offset, atomicBoundary.getTrailingTextBoundaryAt$1(new B.TextPosition(selection.end - 1, C.TextAffinity_1)).offset);
    },
    invoke$2(intent, context) {
      var t1, t2, selection, textBoundary, _this = this;
      _this.$ti._precomputed1._as(intent);
      t1 = _this.state;
      t2 = t1._widget.controller._change_notifier$_value;
      selection = t2.selection;
      if (selection.start !== selection.end) {
        context.toString;
        return A.Actions_invoke(context, new A.ReplaceTextIntent(t2, "", _this._expandNonCollapsedRange$1(t2), C.SelectionChangedCause_4), type$.ReplaceTextIntent);
      }
      textBoundary = _this.getTextBoundariesForIntent.call$1(intent);
      if (!t1._widget.controller._change_notifier$_value.selection.get$isValid())
        return null;
      t1 = t1._widget.controller._change_notifier$_value;
      t2 = t1.selection;
      if (t2.start !== t2.end) {
        context.toString;
        return A.Actions_invoke(context, new A.ReplaceTextIntent(t1, "", _this._expandNonCollapsedRange$1(t1), C.SelectionChangedCause_4), type$.ReplaceTextIntent);
      }
      context.toString;
      return A.Actions_invoke(context, new A.ReplaceTextIntent(t1, "", textBoundary.getTextBoundaryAt$1(t2.get$base()), C.SelectionChangedCause_4), type$.ReplaceTextIntent);
    },
    invoke$1(intent) {
      return this.invoke$2(intent, null);
    },
    get$isActionEnabled() {
      var t1 = this.state._widget;
      return !t1.readOnly && t1.controller._change_notifier$_value.selection.get$isValid();
    }
  };
  A._UpdateTextSelectionAction.prototype = {
    invoke$2(intent, context) {
      var t1, t2, t3, selection, collapseSelection, textBoundary, extent, t4, t5, newExtent, newSelection, _this = this;
      _this.$ti._precomputed1._as(intent);
      t1 = _this.state;
      t2 = t1._widget;
      t3 = t2.controller._change_notifier$_value;
      selection = t3.selection;
      collapseSelection = intent.collapseSelection || !t2.enableInteractiveSelection;
      t2 = selection.start !== selection.end;
      if (t2 && !_this.ignoreNonCollapsedSelection && collapseSelection) {
        context.toString;
        return A.Actions_invoke(context, new A.UpdateSelectionIntent(t3, new A._UpdateTextSelectionAction_invoke_collapse(intent).call$1(selection), C.SelectionChangedCause_4), type$.UpdateSelectionIntent);
      }
      textBoundary = _this.getTextBoundariesForIntent.call$1(intent);
      extent = selection.get$extent();
      if (intent.continuesAtWrap) {
        t3 = intent.forward;
        if (t3) {
          t4 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1._editableKey).get$renderObject();
          t4.toString;
          t4 = type$.RenderEditable._as(t4).getLineAtOffset$1(extent).end;
          if (new B.TextPosition(t4, C.TextAffinity_0).$eq(0, extent)) {
            t5 = t1._widget.controller._change_notifier$_value.text;
            t4 = t4 !== t5.length && C.JSString_methods.codeUnitAt$1(t5, extent.offset) !== 10;
          } else
            t4 = false;
        } else
          t4 = false;
        if (t4)
          extent = new B.TextPosition(extent.offset, C.TextAffinity_1);
        else {
          if (!t3) {
            t3 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1._editableKey).get$renderObject();
            t3.toString;
            t3 = type$.RenderEditable._as(t3).getLineAtOffset$1(extent).start;
            t3 = new B.TextPosition(t3, C.TextAffinity_1).$eq(0, extent) && t3 !== 0 && C.JSString_methods.codeUnitAt$1(t1._widget.controller._change_notifier$_value.text, extent.offset - 1) !== 10;
          } else
            t3 = false;
          if (t3)
            extent = new B.TextPosition(extent.offset, C.TextAffinity_0);
        }
      }
      newExtent = intent.forward ? textBoundary.getTrailingTextBoundaryAt$1(extent) : textBoundary.getLeadingTextBoundaryAt$1(extent);
      newSelection = collapseSelection ? A.TextSelection$fromPosition(newExtent) : selection.extendTo$1(newExtent);
      if (t2 && intent.collapseAtReversal && selection.baseOffset < selection.extentOffset !== newSelection.baseOffset < newSelection.extentOffset) {
        context.toString;
        return A.Actions_invoke(context, new A.UpdateSelectionIntent(t1._widget.controller._change_notifier$_value, A.TextSelection$fromPosition(selection.get$base()), C.SelectionChangedCause_4), type$.UpdateSelectionIntent);
      }
      context.toString;
      return A.Actions_invoke(context, new A.UpdateSelectionIntent(t1._widget.controller._change_notifier$_value, newSelection, C.SelectionChangedCause_4), type$.UpdateSelectionIntent);
    },
    invoke$1(intent) {
      return this.invoke$2(intent, null);
    },
    get$isActionEnabled() {
      return this.state._widget.controller._change_notifier$_value.selection.get$isValid();
    }
  };
  A._ExtendSelectionOrCaretPositionAction.prototype = {
    invoke$2(intent, context) {
      var t1, textBoundary, textBoundarySelection, extent, newExtent, t2, t3, newSelection;
      type$.ExtendSelectionToNextWordBoundaryOrCaretLocationIntent._as(intent);
      t1 = this.state;
      t1._widget.toString;
      textBoundary = this.getTextBoundariesForIntent.call$1(intent);
      textBoundarySelection = t1._widget.controller._change_notifier$_value.selection;
      if (!textBoundarySelection.get$isValid())
        return null;
      extent = textBoundarySelection.get$extent();
      newExtent = intent.forward ? textBoundary.getTrailingTextBoundaryAt$1(extent) : textBoundary.getLeadingTextBoundaryAt$1(extent);
      t2 = textBoundarySelection.baseOffset;
      t3 = textBoundarySelection.extentOffset;
      if ((newExtent.offset - t2) * (t3 - t2) < 0)
        newSelection = textBoundarySelection.copyWith$2$affinity$extentOffset(t3 > t2 ? C.TextAffinity_1 : C.TextAffinity_0, t2);
      else
        newSelection = textBoundarySelection.extendTo$1(newExtent);
      context.toString;
      return A.Actions_invoke(context, new A.UpdateSelectionIntent(t1._widget.controller._change_notifier$_value, newSelection, C.SelectionChangedCause_4), type$.UpdateSelectionIntent);
    },
    invoke$1(intent) {
      return this.invoke$2(intent, null);
    },
    get$isActionEnabled() {
      var t1 = this.state._widget;
      return t1.enableInteractiveSelection && t1.controller._change_notifier$_value.selection.get$isValid();
    }
  };
  A._UpdateTextSelectionVerticallyAction.prototype = {
    stopCurrentVerticalRunIfSelectionChanges$0() {
      var t1, _this = this,
        runSelection = _this._runSelection;
      if (runSelection == null)
        return;
      t1 = _this._runSelection = _this.state._widget.controller._change_notifier$_value.selection;
      if (!(t1.get$isValid() && t1.start === t1.end && t1.baseOffset === runSelection.baseOffset && t1.extentOffset === runSelection.extentOffset))
        _this._runSelection = _this._verticalMovementRun = null;
    },
    invoke$2(intent, context) {
      var collapseSelection, t1, value, t2, t3, currentRun, t4, t5, metrics, currentLine, shouldMove, newExtent, newSelection, _this = this;
      _this.$ti._precomputed1._as(intent);
      collapseSelection = intent.collapseSelection || !_this.state._widget.enableInteractiveSelection;
      t1 = _this.state;
      value = t1.get$_textEditingValueforTextLayoutMetrics();
      t2 = value.selection;
      if (!t2.get$isValid())
        return;
      t3 = _this._verticalMovementRun;
      if ((t3 == null ? null : t3.get$isValid()) === false)
        _this._runSelection = _this._verticalMovementRun = null;
      currentRun = _this._verticalMovementRun;
      if (currentRun == null) {
        t3 = t1._editableKey;
        t4 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t3).get$renderObject();
        t4.toString;
        t5 = type$.RenderEditable;
        t5._as(t4);
        t3 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t3).get$renderObject();
        t3.toString;
        t3 = t5._as(t3)._selection.get$extent();
        metrics = t4._editable$_textPainter.computeLineMetrics$0();
        currentLine = t4._lineNumberFor$2(t3, metrics);
        currentRun = new A.VerticalCaretMovementRun(currentLine.value, currentLine.key, t3, metrics, t4, B.LinkedHashMap_LinkedHashMap$_empty(type$.int, type$.MapEntry_Offset_TextPosition));
      }
      if (intent instanceof B.ExtendSelectionVerticallyToAdjacentPageIntent) {
        t3 = intent.forward;
        t4 = t3 ? 1 : -1;
        t5 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1._editableKey).get$renderObject();
        t5.toString;
        shouldMove = currentRun.moveByOffset$1(t4 * type$.RenderEditable._as(t5)._size._dy);
      } else {
        t3 = intent.forward;
        shouldMove = t3 ? currentRun.moveNext$0() : currentRun.movePrevious$0();
      }
      if (shouldMove)
        newExtent = currentRun._currentTextPosition;
      else
        newExtent = t3 ? new B.TextPosition(t1._widget.controller._change_notifier$_value.text.length, C.TextAffinity_1) : C.TextPosition_0_TextAffinity_1;
      newSelection = collapseSelection ? A.TextSelection$fromPosition(newExtent) : t2.extendTo$1(newExtent);
      context.toString;
      A.Actions_invoke(context, new A.UpdateSelectionIntent(value, newSelection, C.SelectionChangedCause_4), type$.UpdateSelectionIntent);
      if (t1._widget.controller._change_notifier$_value.selection.$eq(0, newSelection)) {
        _this._verticalMovementRun = currentRun;
        _this._runSelection = newSelection;
      }
    },
    invoke$1(intent) {
      return this.invoke$2(intent, null);
    },
    get$isActionEnabled() {
      return this.state._widget.controller._change_notifier$_value.selection.get$isValid();
    }
  };
  A._SelectAllAction.prototype = {
    invoke$2(intent, context) {
      var t1;
      type$.SelectAllTextIntent._as(intent);
      context.toString;
      t1 = this.state._widget.controller._change_notifier$_value;
      return A.Actions_invoke(context, new A.UpdateSelectionIntent(t1, B.TextSelection$(C.TextAffinity_1, 0, t1.text.length, false), C.SelectionChangedCause_4), type$.UpdateSelectionIntent);
    },
    invoke$1(intent) {
      return this.invoke$2(intent, null);
    },
    get$isActionEnabled() {
      return this.state._widget.enableInteractiveSelection;
    }
  };
  A._CopySelectionAction.prototype = {
    invoke$2(intent, context) {
      var t1 = this.state;
      if (type$.CopySelectionTextIntent._as(intent).collapseSelection)
        t1.cutSelection$1(C.SelectionChangedCause_4);
      else
        t1.copySelection$1(C.SelectionChangedCause_4);
    },
    invoke$1(intent) {
      return this.invoke$2(intent, null);
    },
    get$isActionEnabled() {
      var t1 = this.state;
      if (t1._widget.controller._change_notifier$_value.selection.get$isValid()) {
        t1 = t1._widget.controller._change_notifier$_value.selection;
        t1 = t1.start !== t1.end;
      } else
        t1 = false;
      return t1;
    }
  };
  A._TextEditingHistory.prototype = {
    createState$0() {
      return new A._TextEditingHistoryState(new A._UndoStack(B._setArrayType([], type$.JSArray_TextEditingValue), type$._UndoStack_TextEditingValue), C._StateLifecycle_0);
    },
    onTriggered$1(arg0) {
      return this.onTriggered.call$1(arg0);
    }
  };
  A._TextEditingHistoryState.prototype = {
    get$_throttledPush() {
      var t1 = this.___TextEditingHistoryState__throttledPush_F;
      t1 === $ && B.throwLateFieldNI("_throttledPush");
      return t1;
    },
    _undo$1(intent) {
      type$.UndoTextIntent._as(intent);
      this._update$1(0, this._editable_text$_stack.undo$0());
    },
    _redo$1(intent) {
      type$.RedoTextIntent._as(intent);
      this._update$1(0, this._editable_text$_stack.redo$0());
    },
    _update$1(_, nextValue) {
      var t1, t2, t3;
      if (nextValue == null)
        return;
      t1 = nextValue.text;
      t2 = this._widget;
      t3 = t2.controller._change_notifier$_value;
      if (t1 === t3.text)
        return;
      t2.onTriggered$1(t3.copyWith$2$selection$text(nextValue.selection, t1));
    },
    _push$0() {
      var t1, _this = this;
      if (J.$eq$(_this._widget.controller._change_notifier$_value, D.TextEditingValue_li8))
        return;
      switch (B.defaultTargetPlatform().index) {
        case 2:
        case 4:
        case 1:
        case 3:
        case 5:
          t1 = _this._widget.controller._change_notifier$_value.composing;
          if (t1.start !== t1.end)
            return;
          break;
        case 0:
          break;
      }
      _this.set$_throttleTimer(_this._throttledPush$1(_this._widget.controller._change_notifier$_value));
    },
    initState$0() {
      var t1, _this = this;
      _this.super$State$initState();
      t1 = type$.Timer_Function_TextEditingValue._as(A._throttle(C.Duration_500000, type$.void_Function_TextEditingValue._as(_this._editable_text$_stack.get$push()), type$.TextEditingValue));
      _this.___TextEditingHistoryState__throttledPush_F !== $ && B.throwLateFieldAI("_throttledPush");
      _this.set$___TextEditingHistoryState__throttledPush_F(t1);
      _this._push$0();
      _this._widget.controller.addListener$1(0, _this.get$_push());
    },
    didUpdateWidget$1(oldWidget) {
      var t1, t2, _this = this;
      type$._TextEditingHistory._as(oldWidget);
      _this.super$State$didUpdateWidget(oldWidget);
      t1 = oldWidget.controller;
      if (_this._widget.controller !== t1) {
        t2 = _this._editable_text$_stack;
        C.JSArray_methods.clear$0(t2._editable_text$_list);
        t2.___UndoStack__index_A = -1;
        t2 = _this.get$_push();
        t1.removeListener$1(0, t2);
        _this._widget.controller.addListener$1(0, t2);
      }
    },
    dispose$0() {
      var t1, _this = this;
      _this._widget.controller.removeListener$1(0, _this.get$_push());
      t1 = _this._throttleTimer;
      if (t1 != null)
        t1.cancel$0(0);
      _this.super$State$dispose();
    },
    build$1(context) {
      var t1 = type$.JSArray_of_void_Function_Action_Intent,
        t2 = type$.ObserverList_of_void_Function_Action_Intent;
      return B.Actions$(B.LinkedHashMap_LinkedHashMap$_literal([D.Type_UndoTextIntent_yzJ, new B.CallbackAction(this.get$_undo(), new B.ObserverList(B._setArrayType([], t1), t2), type$.CallbackAction_UndoTextIntent)._makeOverridableAction$1(context), D.Type_RedoTextIntent_yzJ, new B.CallbackAction(this.get$_redo(), new B.ObserverList(B._setArrayType([], t1), t2), type$.CallbackAction_RedoTextIntent)._makeOverridableAction$1(context)], type$.Type, type$.Action_Intent), this._widget.child);
    },
    set$___TextEditingHistoryState__throttledPush_F(___TextEditingHistoryState__throttledPush_F) {
      this.___TextEditingHistoryState__throttledPush_F = type$.Timer_Function_TextEditingValue._as(___TextEditingHistoryState__throttledPush_F);
    },
    set$_throttleTimer(_throttleTimer) {
      this._throttleTimer = type$.nullable_Timer._as(_throttleTimer);
    },
    _throttledPush$1(arg0) {
      return this.get$_throttledPush().call$1(arg0);
    }
  };
  A._UndoStack.prototype = {
    get$currentValue() {
      var t3,
        t1 = this._editable_text$_list,
        t2 = t1.length;
      if (t2 === 0)
        t1 = null;
      else {
        t3 = this.___UndoStack__index_A;
        t3 === $ && B.throwLateFieldNI("_index");
        if (!(t3 >= 0 && t3 < t2))
          return B.ioore(t1, t3);
        t3 = t1[t3];
        t1 = t3;
      }
      return t1;
    },
    push$1(value) {
      var t1, t2, t3, _this = this;
      _this.$ti._precomputed1._as(value);
      t1 = _this._editable_text$_list;
      if (t1.length === 0) {
        _this.___UndoStack__index_A = 0;
        C.JSArray_methods.add$1(t1, value);
        return;
      }
      if (J.$eq$(value, _this.get$currentValue()))
        return;
      t2 = _this.___UndoStack__index_A;
      t2 === $ && B.throwLateFieldNI("_index");
      t3 = t1.length;
      if (t2 !== t3 - 1)
        C.JSArray_methods.removeRange$2(t1, t2 + 1, t3);
      C.JSArray_methods.add$1(t1, value);
      _this.___UndoStack__index_A = t1.length - 1;
    },
    undo$0() {
      var t1, _this = this;
      if (_this._editable_text$_list.length === 0)
        return null;
      t1 = _this.___UndoStack__index_A;
      t1 === $ && B.throwLateFieldNI("_index");
      if (t1 !== 0)
        _this.___UndoStack__index_A = t1 - 1;
      return _this.get$currentValue();
    },
    redo$0() {
      var t2, _this = this,
        t1 = _this._editable_text$_list.length;
      if (t1 === 0)
        return null;
      t2 = _this.___UndoStack__index_A;
      t2 === $ && B.throwLateFieldNI("_index");
      if (t2 < t1 - 1)
        _this.___UndoStack__index_A = t2 + 1;
      return _this.get$currentValue();
    },
    toString$0(_) {
      return "_UndoStack " + B.S(this._editable_text$_list);
    }
  };
  A._GlyphHeights.prototype = {};
  A._EditableTextState_State_AutomaticKeepAliveClientMixin.prototype = {
    initState$0() {
      this.super$State$initState();
      if (this._widget.focusNode.get$hasFocus())
        this._ensureKeepAlive$0();
    },
    deactivate$0() {
      var t1 = this.AutomaticKeepAliveClientMixin__keepAliveHandle;
      if (t1 != null) {
        t1.notifyListeners$0();
        t1.super$ChangeNotifier$dispose();
        this.AutomaticKeepAliveClientMixin__keepAliveHandle = null;
      }
      this.super$State$deactivate();
    }
  };
  A._EditableTextState_State_AutomaticKeepAliveClientMixin_WidgetsBindingObserver.prototype = {};
  A._EditableTextState_State_AutomaticKeepAliveClientMixin_WidgetsBindingObserver_TickerProviderStateMixin.prototype = {
    activate$0() {
      this.super$State$activate();
      this._updateTickerModeNotifier$0();
      this._updateTickers$0();
    },
    dispose$0() {
      var _this = this,
        t1 = _this.TickerProviderStateMixin__tickerModeNotifier;
      if (t1 != null)
        t1.removeListener$1(0, _this.get$_updateTickers());
      _this.set$_tickerModeNotifier(null);
      _this.super$State$dispose();
    }
  };
  A._EditableTextState_State_AutomaticKeepAliveClientMixin_WidgetsBindingObserver_TickerProviderStateMixin_TextSelectionDelegate.prototype = {};
  A._EditableTextState_State_AutomaticKeepAliveClientMixin_WidgetsBindingObserver_TickerProviderStateMixin_TextSelectionDelegate_TextInputClient.prototype = {};
  A.AnimatedPositioned.prototype = {
    createState$0() {
      return new A._AnimatedPositionedState(null, null, C._StateLifecycle_0);
    }
  };
  A._AnimatedPositionedState.prototype = {
    forEachTween$1(visitor) {
      var t1, t2, _this = this, _null = null;
      type$.nullable_Tween_dynamic_Function_3_nullable_Tween_dynamic_and_dynamic_and_Tween_dynamic_Function_dynamic._as(visitor);
      t1 = type$.nullable_Tween_double;
      _this.set$_implicit_animations$_left(0, t1._as(visitor.call$3(_this._implicit_animations$_left, _this._widget.left, new A._AnimatedPositionedState_forEachTween_closure())));
      _this.set$_implicit_animations$_top(0, t1._as(visitor.call$3(_this._implicit_animations$_top, _this._widget.top, new A._AnimatedPositionedState_forEachTween_closure0())));
      t2 = _this._implicit_animations$_right;
      _this._widget.toString;
      _this.set$_implicit_animations$_right(0, t1._as(visitor.call$3(t2, _null, new A._AnimatedPositionedState_forEachTween_closure1())));
      t2 = _this._implicit_animations$_bottom;
      _this._widget.toString;
      _this.set$_implicit_animations$_bottom(0, t1._as(visitor.call$3(t2, _null, new A._AnimatedPositionedState_forEachTween_closure2())));
      t2 = _this._implicit_animations$_width;
      _this._widget.toString;
      _this.set$_implicit_animations$_width(0, t1._as(visitor.call$3(t2, _null, new A._AnimatedPositionedState_forEachTween_closure3())));
      t2 = _this._implicit_animations$_height;
      _this._widget.toString;
      _this.set$_implicit_animations$_height(0, t1._as(visitor.call$3(t2, _null, new A._AnimatedPositionedState_forEachTween_closure4())));
    },
    build$1(context) {
      var t2, t3, t4, t5, t6, t7, _this = this, _null = null,
        t1 = _this._implicit_animations$_left;
      if (t1 == null)
        t1 = _null;
      else {
        t2 = type$.Animation_double._as(_this.get$_implicit_animations$_animation());
        t2 = t1.transform$1(0, t2.get$value(t2));
        t1 = t2;
      }
      t2 = _this._implicit_animations$_top;
      if (t2 == null)
        t2 = _null;
      else {
        t3 = type$.Animation_double._as(_this.get$_implicit_animations$_animation());
        t3 = t2.transform$1(0, t3.get$value(t3));
        t2 = t3;
      }
      t3 = _this._implicit_animations$_right;
      if (t3 == null)
        t3 = _null;
      else {
        t4 = type$.Animation_double._as(_this.get$_implicit_animations$_animation());
        t4 = t3.transform$1(0, t4.get$value(t4));
        t3 = t4;
      }
      t4 = _this._implicit_animations$_bottom;
      if (t4 == null)
        t4 = _null;
      else {
        t5 = type$.Animation_double._as(_this.get$_implicit_animations$_animation());
        t5 = t4.transform$1(0, t5.get$value(t5));
        t4 = t5;
      }
      t5 = _this._implicit_animations$_width;
      if (t5 == null)
        t5 = _null;
      else {
        t6 = type$.Animation_double._as(_this.get$_implicit_animations$_animation());
        t6 = t5.transform$1(0, t6.get$value(t6));
        t5 = t6;
      }
      t6 = _this._implicit_animations$_height;
      if (t6 == null)
        t6 = _null;
      else {
        t7 = type$.Animation_double._as(_this.get$_implicit_animations$_animation());
        t7 = t6.transform$1(0, t7.get$value(t7));
        t6 = t7;
      }
      return B.Positioned$(t4, _this._widget.child, t6, _null, t1, t3, t2, t5);
    },
    set$_implicit_animations$_left(_, _left) {
      this._implicit_animations$_left = type$.nullable_Tween_double._as(_left);
    },
    set$_implicit_animations$_top(_, _top) {
      this._implicit_animations$_top = type$.nullable_Tween_double._as(_top);
    },
    set$_implicit_animations$_right(_, _right) {
      this._implicit_animations$_right = type$.nullable_Tween_double._as(_right);
    },
    set$_implicit_animations$_bottom(_, _bottom) {
      this._implicit_animations$_bottom = type$.nullable_Tween_double._as(_bottom);
    },
    set$_implicit_animations$_width(_, _width) {
      this._implicit_animations$_width = type$.nullable_Tween_double._as(_width);
    },
    set$_implicit_animations$_height(_, _height) {
      this._implicit_animations$_height = type$.nullable_Tween_double._as(_height);
    }
  };
  A.MagnifierInfo.prototype = {
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      return other instanceof A.MagnifierInfo && other.globalGesturePosition.$eq(0, _this.globalGesturePosition) && other.caretRect.$eq(0, _this.caretRect) && other.currentLineBoundaries.$eq(0, _this.currentLineBoundaries) && other.fieldBounds.$eq(0, _this.fieldBounds);
    },
    get$hashCode(_) {
      var _this = this;
      return B.Object_hash(_this.globalGesturePosition, _this.caretRect, _this.fieldBounds, _this.currentLineBoundaries, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue);
    }
  };
  A.TextMagnifierConfiguration.prototype = {
    get$magnifierBuilder() {
      var t1 = this._magnifierBuilder;
      return t1 == null ? new A.TextMagnifierConfiguration_magnifierBuilder_closure() : t1;
    },
    magnifierBuilder$3(arg0, arg1, arg2) {
      return this.get$magnifierBuilder().call$3(arg0, arg1, arg2);
    }
  };
  A.MagnifierController.prototype = {
    get$shown() {
      if (this._overlayEntry == null)
        return false;
      var t1 = this.animationController;
      if (t1 != null) {
        t1 = t1.__AnimationController__status_A;
        t1 === $ && B.throwLateFieldNI("_status");
        return t1 === C.AnimationStatus_3 || t1 === C.AnimationStatus_1;
      }
      return true;
    },
    show$3$below$builder$context(_, below, builder, context) {
      return this.show$body$MagnifierController(0, below, type$.Widget_Function_BuildContext._as(builder), context);
    },
    show$body$MagnifierController(_, below, builder, context) {
      var $async$goto = 0,
        $async$completer = B._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t2, t1;
      var $async$show$3$below$builder$context = B._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return B._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._overlayEntry;
              if (t1 != null)
                t1.remove$0(0);
              t1 = context.findRootAncestorStateOfType$1$0(type$.OverlayState);
              t1.toString;
              t2 = A.Navigator_maybeOf(context);
              if (t2 == null)
                t2 = null;
              else {
                t2 = t2._framework$_element;
                t2.toString;
              }
              t2 = B.OverlayEntry$(new A.MagnifierController_show_closure(B.InheritedTheme_capture(context, t2), builder), false);
              $async$self._overlayEntry = t2;
              t1.insert$2$below(0, t2, below);
              t1 = $async$self.animationController;
              $async$goto = t1 != null ? 2 : 3;
              break;
            case 2:
              // then
              $async$goto = 4;
              return B._asyncAwait(t1.forward$0(0), $async$show$3$below$builder$context);
            case 4:
              // returning from await.
            case 3:
              // join
              // implicit return
              return B._asyncReturn(null, $async$completer);
          }
      });
      return B._asyncStartSync($async$show$3$below$builder$context, $async$completer);
    },
    hide$1$removeFromOverlay(removeFromOverlay) {
      var $async$goto = 0,
        $async$completer = B._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$self = this, t1;
      var $async$hide$1$removeFromOverlay = B._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return B._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if ($async$self._overlayEntry == null) {
                // goto return
                $async$goto = 1;
                break;
              }
              t1 = $async$self.animationController;
              $async$goto = t1 != null ? 3 : 4;
              break;
            case 3:
              // then
              $async$goto = 5;
              return B._asyncAwait(t1.reverse$0(0), $async$hide$1$removeFromOverlay);
            case 5:
              // returning from await.
            case 4:
              // join
              if (removeFromOverlay) {
                t1 = $async$self._overlayEntry;
                if (t1 != null)
                  t1.remove$0(0);
                $async$self._overlayEntry = null;
              }
            case 1:
              // return
              return B._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return B._asyncStartSync($async$hide$1$removeFromOverlay, $async$completer);
    },
    hide$0() {
      return this.hide$1$removeFromOverlay(true);
    }
  };
  A.MagnifierDecoration.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      return this.super$ShapeDecoration$$eq(0, other) && other instanceof A.MagnifierDecoration && other.opacity === this.opacity;
    },
    get$hashCode(_) {
      return B.Object_hash(A.ShapeDecoration.prototype.get$hashCode.call(this, this), this.opacity, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue);
    }
  };
  A.RawMagnifier.prototype = {
    build$1(context) {
      var _this = this, _null = null,
        t1 = _this.decoration,
        t2 = t1.shape,
        t3 = t1.opacity,
        t4 = _this.size;
      return new B.Stack(C.Alignment_0_0, _null, C.StackFit_0, C.Clip_0, B._setArrayType([A.ClipPath_shape(B.Opacity$(new A._Magnifier(_this.focalPointOffset, _this.magnificationScale, t2, A.SizedBox$fromSize(_this.child, t4), _null), t3), t2), B.Opacity$(new A._MagnifierStyle(t1, t4, _null), t3)], type$.JSArray_Widget), _null);
    }
  };
  A._MagnifierStyle.prototype = {
    build$1(context) {
      var t3, largestShadow, _i, shadow, t4, t5, t6,
        t1 = this.decoration,
        t2 = t1.shadows;
      if (t2 == null)
        t2 = B._setArrayType([], type$.JSArray_BoxShadow);
      t3 = t2.length;
      largestShadow = 0;
      _i = 0;
      for (; _i < t3; ++_i) {
        shadow = t2[_i];
        t4 = shadow.blurRadius;
        t5 = shadow.spreadRadius;
        t6 = shadow.offset;
        largestShadow = Math.max(largestShadow, t4 + t5 + Math.max(Math.abs(t6._dy), Math.abs(t6._dx)));
      }
      return B.ClipPath$(B.DecoratedBox$(A.SizedBox$fromSize(null, this.size), t1, C.DecorationPosition_0), C.Clip_1, new A._DonutClip(largestShadow, t1.shape, null));
    }
  };
  A._DonutClip.prototype = {
    getClip$1(size) {
      var t1,
        path = $.$get$_renderer().createPath$0(),
        rect = new B.Rect(0, 0, 0 + size._dx, 0 + size._dy);
      path.set$fillType(C.PathFillType_1);
      t1 = this.shape;
      path.addPath$2(0, t1.getOuterPath$1(rect.inflate$1(this.spreadRadius)), C.Offset_0_0);
      path.addPath$2(0, t1.getInnerPath$1(rect), C.Offset_0_0);
      return path;
    },
    shouldReclip$1(oldClipper) {
      return !type$._DonutClip._as(oldClipper).shape.$eq(0, this.shape);
    }
  };
  A._Magnifier.prototype = {
    createRenderObject$1(context) {
      var t1 = new A._RenderMagnification(this.focalPointOffset, this.magnificationScale, this.shape, null, B.LayerHandle$(type$.ContainerLayer));
      t1.RenderObject$0();
      t1.set$child(null);
      return t1;
    },
    updateRenderObject$2(context, renderObject) {
      type$._RenderMagnification._as(renderObject);
      renderObject.set$focalPointOffset(this.focalPointOffset);
      renderObject.set$shape(0, this.shape);
      renderObject.set$magnificationScale(this.magnificationScale);
    }
  };
  A._RenderMagnification.prototype = {
    set$focalPointOffset(value) {
      if (this._focalPointOffset.$eq(0, value))
        return;
      this._focalPointOffset = value;
      this.markNeedsPaint$0();
    },
    set$magnificationScale(value) {
      if (this._magnificationScale === value)
        return;
      this._magnificationScale = value;
      this.markNeedsPaint$0();
    },
    set$shape(_, value) {
      if (this._magnifier$_shape.$eq(0, value))
        return;
      this._magnifier$_shape = value;
      this.markNeedsPaint$0();
    },
    get$alwaysNeedsCompositing() {
      return true;
    },
    paint$2(context, offset) {
      var thisCenter, matrix, t2, t3, t4, t5, filter, _this = this,
        t1 = _this._size;
      t1.toString;
      thisCenter = C.Alignment_0_0.alongSize$1(t1).$add(0, offset);
      t1 = new Float64Array(16);
      matrix = new B.Matrix4(t1);
      matrix.setIdentity$0();
      t2 = _this._magnificationScale;
      t3 = _this._focalPointOffset;
      t4 = thisCenter._dx;
      t5 = thisCenter._dy;
      matrix.translate$2(0, t2 * (t3._dx * -1 - t4) + t4, t2 * (t3._dy * -1 - t5) + t5);
      matrix.scale$1(0, _this._magnificationScale);
      filter = B.ImageFilter_ImageFilter$matrix(t1, C.FilterQuality_3);
      t1 = type$.nullable_BackdropFilterLayer;
      if (t1._as(B.RenderObject.prototype.get$layer.call(_this, _this)) == null)
        _this._layerHandle.set$layer(0, B.BackdropFilterLayer$(filter));
      else
        t1._as(B.RenderObject.prototype.get$layer.call(_this, _this)).set$filter(0, filter);
      t1 = t1._as(B.RenderObject.prototype.get$layer.call(_this, _this));
      t1.toString;
      context.pushLayer$3(t1, B.RenderProxyBoxMixin.prototype.get$paint.call(_this), offset);
    }
  };
  A.RestorableListenable.prototype = {
    initWithValue$1(value) {
      var t1, _this = this;
      B._instanceType(_this)._eval$1("RestorableListenable.T")._as(value);
      t1 = _this._restoration_properties$_value;
      if (t1 != null)
        t1.removeListener$1(0, _this.get$notifyListeners());
      _this.set$_restoration_properties$_value(value);
      _this._restoration_properties$_value.addListener$1(0, _this.get$notifyListeners());
    },
    dispose$0() {
      this.super$RestorableProperty$dispose();
      var t1 = this._restoration_properties$_value;
      if (t1 != null)
        t1.removeListener$1(0, this.get$notifyListeners());
    },
    set$_restoration_properties$_value(_value) {
      this._restoration_properties$_value = B._instanceType(this)._eval$1("RestorableListenable.T?")._as(_value);
    }
  };
  A.RestorableChangeNotifier.prototype = {
    initWithValue$1(value) {
      B._instanceType(this)._eval$1("RestorableChangeNotifier.T")._as(value);
      this._disposeOldValue$0();
      this.super$RestorableListenable$initWithValue(value);
    },
    dispose$0() {
      this._disposeOldValue$0();
      this.super$RestorableListenable$dispose();
    },
    _disposeOldValue$0() {
      var t1 = this._restoration_properties$_value;
      if (t1 != null)
        B.scheduleMicrotask(t1.get$dispose());
    }
  };
  A.RestorableTextEditingController.prototype = {
    createDefaultValue$0() {
      var t1 = this._initialValue,
        t2 = new A.TextEditingController(t1, $.$get$ChangeNotifier__emptyListeners());
      t2.ValueNotifier$1(t1, type$.TextEditingValue);
      return t2;
    },
    fromPrimitives$1(data) {
      data.toString;
      return A.TextEditingController$(B._asString(data));
    },
    toPrimitives$0() {
      return this._restoration_properties$_value._change_notifier$_value.text;
    }
  };
  A.SlottedMultiChildRenderObjectWidgetMixin.prototype = {
    createElement$0(_) {
      var t1 = B._instanceType(this),
        t2 = type$.Element;
      return new A.SlottedRenderObjectElement(B.LinkedHashMap_LinkedHashMap$_empty(t1._eval$1("SlottedMultiChildRenderObjectWidgetMixin.S"), t2), B.LinkedHashMap_LinkedHashMap$_empty(type$.Key, t2), this, C._ElementLifecycle_0, t1._eval$1("SlottedRenderObjectElement<SlottedMultiChildRenderObjectWidgetMixin.S>"));
    }
  };
  A.SlottedContainerRenderObjectMixin.prototype = {
    get$children(_) {
      var t1 = this.SlottedContainerRenderObjectMixin__slotToChild;
      return t1.get$values(t1);
    },
    redepthChildren$0() {
      J.forEach$1$ax(this.get$children(this), this.get$redepthChild());
    },
    visitChildren$1(visitor) {
      type$.void_Function_RenderObject._as(visitor);
      J.forEach$1$ax(this.get$children(this), visitor);
    },
    _setChild$2(child, slot) {
      var t1, oldChild, _this = this;
      B._instanceType(_this)._eval$1("SlottedContainerRenderObjectMixin.S")._as(slot);
      t1 = _this.SlottedContainerRenderObjectMixin__slotToChild;
      oldChild = t1.$index(0, slot);
      if (oldChild != null) {
        _this.dropChild$1(oldChild);
        t1.remove$1(0, slot);
      }
      if (child != null) {
        t1.$indexSet(0, slot, child);
        _this.adoptChild$1(child);
      }
    }
  };
  A.SlottedRenderObjectElement.prototype = {
    get$renderObject() {
      return this.$ti._eval$1("SlottedContainerRenderObjectMixin<1>")._as(B.RenderObjectElement.prototype.get$renderObject.call(this));
    },
    visitChildren$1(visitor) {
      var t1;
      type$.void_Function_Element._as(visitor);
      t1 = this._slotToChild;
      t1.get$values(t1).forEach$1(0, visitor);
    },
    forgetChild$1(child) {
      this._slotToChild.remove$1(0, child._slot);
      this.super$Element$forgetChild(child);
    },
    mount$2($parent, newSlot) {
      this.super$RenderObjectElement$mount($parent, newSlot);
      this._updateChildren$0();
    },
    update$1(_, newWidget) {
      this.super$RenderObjectElement$update(0, this.$ti._eval$1("SlottedMultiChildRenderObjectWidgetMixin<1>")._as(newWidget));
      this._updateChildren$0();
    },
    _updateChildren$0() {
      var t2, oldKeyedElements, t3, oldSlotToChild, t4, _i, slot, widget, newWidgetKey, oldSlotChild, oldKeyChild, fromElement, newChild, _this = this,
        t1 = _this._widget;
      t1.toString;
      t2 = _this.$ti;
      t2._eval$1("SlottedMultiChildRenderObjectWidgetMixin<1>")._as(t1);
      oldKeyedElements = _this._keyedChildren;
      t3 = type$.Element;
      _this.set$_keyedChildren(B.LinkedHashMap_LinkedHashMap$_empty(type$.Key, t3));
      oldSlotToChild = _this._slotToChild;
      t2 = t2._precomputed1;
      _this.set$_slotToChild(B.LinkedHashMap_LinkedHashMap$_empty(t2, t3));
      for (t3 = t1.get$slots(), t4 = t3.length, _i = 0; _i < t4; ++_i) {
        slot = t3[_i];
        widget = t1.childForSlot$1(slot);
        newWidgetKey = widget == null ? null : widget.key;
        oldSlotChild = oldSlotToChild.$index(0, slot);
        oldKeyChild = oldKeyedElements.$index(0, newWidgetKey);
        if (oldKeyChild != null)
          fromElement = oldSlotToChild.remove$1(0, t2._as(oldKeyChild._slot));
        else
          fromElement = (oldSlotChild == null ? null : oldSlotChild.get$widget().key) == null ? oldSlotToChild.remove$1(0, slot) : null;
        newChild = _this.updateChild$3(fromElement, widget, slot);
        if (newChild != null) {
          _this._slotToChild.$indexSet(0, slot, newChild);
          if (newWidgetKey != null)
            _this._keyedChildren.$indexSet(0, newWidgetKey, newChild);
        }
      }
      oldSlotToChild.get$values(oldSlotToChild).forEach$1(0, _this.get$deactivateChild());
    },
    insertRenderObjectChild$2(child, slot) {
      var t1;
      type$.RenderBox._as(child);
      t1 = this.$ti;
      t1._precomputed1._as(slot);
      t1._eval$1("SlottedContainerRenderObjectMixin<1>")._as(B.RenderObjectElement.prototype.get$renderObject.call(this))._setChild$2(child, slot);
    },
    removeRenderObjectChild$2(child, slot) {
      var t1;
      type$.RenderBox._as(child);
      t1 = this.$ti;
      t1._precomputed1._as(slot);
      t1 = t1._eval$1("SlottedContainerRenderObjectMixin<1>");
      if (t1._as(B.RenderObjectElement.prototype.get$renderObject.call(this)).SlottedContainerRenderObjectMixin__slotToChild.$index(0, slot) === child)
        t1._as(B.RenderObjectElement.prototype.get$renderObject.call(this))._setChild$2(null, slot);
    },
    moveRenderObjectChild$3(child, oldSlot, newSlot) {
      var t1, t2;
      type$.RenderBox._as(child);
      t1 = this.$ti;
      t2 = t1._precomputed1;
      t2._as(oldSlot);
      t2._as(newSlot);
      t1 = t1._eval$1("SlottedContainerRenderObjectMixin<1>")._as(B.RenderObjectElement.prototype.get$renderObject.call(this));
      t2 = B._instanceType(t1)._eval$1("SlottedContainerRenderObjectMixin.S");
      t2._as(newSlot);
      t2._as(oldSlot);
      if (t1.SlottedContainerRenderObjectMixin__slotToChild.$index(0, oldSlot) === child)
        t1._setChild$2(null, oldSlot);
      t1._setChild$2(child, newSlot);
    },
    set$_slotToChild(_slotToChild) {
      this._slotToChild = this.$ti._eval$1("Map<1,Element>")._as(_slotToChild);
    },
    set$_keyedChildren(_keyedChildren) {
      this._keyedChildren = type$.Map_Key_Element._as(_keyedChildren);
    }
  };
  A.SpellCheckConfiguration.prototype = {
    copyWith$2$misspelledTextStyle$spellCheckService(misspelledTextStyle, spellCheckService) {
      if (!this._spellCheckEnabled)
        return D.SpellCheckConfiguration_null_null_false;
      return new A.SpellCheckConfiguration(spellCheckService, this.misspelledTextStyle, true);
    },
    copyWith$1$spellCheckService(spellCheckService) {
      return this.copyWith$2$misspelledTextStyle$spellCheckService(null, spellCheckService);
    },
    toString$0(_) {
      return C.JSString_methods.trim$0("  spell check enabled   : " + this._spellCheckEnabled + "\n  spell check service   : " + B.S(this.spellCheckService) + "\n  misspelled text style : " + B.S(this.misspelledTextStyle) + "\n");
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (other instanceof A.SpellCheckConfiguration)
        if (other.spellCheckService == this.spellCheckService)
          t1 = other._spellCheckEnabled === this._spellCheckEnabled;
        else
          t1 = false;
      else
        t1 = false;
      return t1;
    },
    get$hashCode(_) {
      return B.Object_hash(this.spellCheckService, this.misspelledTextStyle, this._spellCheckEnabled, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue);
    }
  };
  A.TapRegion.prototype = {
    createRenderObject$1(context) {
      var t1 = new A.RenderTapRegion(this.onTapOutside, this.onTapInside, true, this.groupId, context.findAncestorRenderObjectOfType$1$0(type$.RenderTapRegionSurface), C.HitTestBehavior_0, null, B.LayerHandle$(type$.ContainerLayer));
      t1.RenderObject$0();
      t1.set$child(null);
      return t1;
    },
    updateRenderObject$2(context, renderObject) {
      var t1, t2;
      type$.RenderTapRegion._as(renderObject);
      t1 = context.findAncestorRenderObjectOfType$1$0(type$.RenderTapRegionSurface);
      t2 = renderObject._registry;
      if (t2 != t1) {
        if (renderObject._isRegistered) {
          t2.unregisterTapRegion$1(renderObject);
          renderObject._isRegistered = false;
        }
        renderObject._registry = t1;
        renderObject.markNeedsLayout$0();
      }
      renderObject.behavior = C.HitTestBehavior_0;
      t1 = this.groupId;
      if (renderObject._groupId !== t1) {
        if (renderObject._isRegistered) {
          renderObject._registry.unregisterTapRegion$1(renderObject);
          renderObject._isRegistered = false;
        }
        renderObject._groupId = t1;
        renderObject.markNeedsLayout$0();
      }
      renderObject.set$onTapOutside(this.onTapOutside);
      renderObject.set$onTapInside(this.onTapInside);
    }
  };
  A.RenderTapRegion.prototype = {
    get$groupId(_) {
      return this._groupId;
    },
    layout$2$parentUsesSize(constraints, parentUsesSize) {
      var t1, shouldBeRegistered, t2, _this = this;
      _this.super$RenderBox$layout(type$.Constraints._as(constraints), parentUsesSize);
      t1 = _this._registry;
      if (t1 == null)
        return;
      if (_this._isRegistered)
        t1.unregisterTapRegion$1(_this);
      t1 = _this._registry;
      shouldBeRegistered = t1 != null;
      if (shouldBeRegistered) {
        t1._registeredRegions.add$1(0, _this);
        t1 = t1._groupIdToRegions;
        t2 = _this._groupId;
        if (t1.$index(0, t2) == null)
          t1.$indexSet(0, t2, B.LinkedHashSet_LinkedHashSet$_empty(type$.RenderTapRegion));
        t1.$index(0, _this._groupId).add$1(0, _this);
      }
      _this._isRegistered = shouldBeRegistered;
    },
    layout$1(constraints) {
      return this.layout$2$parentUsesSize(constraints, false);
    },
    dispose$0() {
      var _this = this;
      if (_this._isRegistered)
        _this._registry.unregisterTapRegion$1(_this);
      _this.super$RenderObject$dispose();
    },
    set$onTapOutside(onTapOutside) {
      this.onTapOutside = type$.nullable_void_Function_PointerDownEvent._as(onTapOutside);
    },
    set$onTapInside(onTapInside) {
      this.onTapInside = type$.nullable_void_Function_PointerDownEvent._as(onTapInside);
    }
  };
  A.TextFieldTapRegion.prototype = {};
  A.ReplaceTextIntent.prototype = {};
  A.UpdateSelectionIntent.prototype = {};
  A.ToolbarItemsParentData.prototype = {
    toString$0(_) {
      return this.super$BoxParentData$toString(0) + "; shouldPaint=" + this.shouldPaint;
    }
  };
  A.TextSelectionControls.prototype = {
    canCut$1(delegate) {
      var t1;
      if (delegate.get$cutEnabled()) {
        t1 = delegate.get$textEditingValue().selection;
        t1 = t1.start !== t1.end;
      } else
        t1 = false;
      return t1;
    },
    canCopy$1(delegate) {
      var t1;
      if (delegate.get$copyEnabled()) {
        t1 = delegate.get$textEditingValue().selection;
        t1 = t1.start !== t1.end;
      } else
        t1 = false;
      return t1;
    },
    canPaste$1(delegate) {
      return delegate.get$pasteEnabled();
    },
    canSelectAll$1(delegate) {
      var t1;
      if (B.boolConversionCheck(delegate.get$selectAllEnabled()))
        if (delegate.get$textEditingValue().text.length !== 0) {
          t1 = delegate.get$textEditingValue().selection;
          t1 = t1.start === t1.end;
        } else
          t1 = false;
      else
        t1 = false;
      return t1;
    },
    handleCut$1(delegate) {
      delegate.cutSelection$1(D.SelectionChangedCause_5);
    },
    handleCopy$1(delegate) {
      delegate.copySelection$1(D.SelectionChangedCause_5);
    },
    handlePaste$1(delegate) {
      var $async$goto = 0,
        $async$completer = B._makeAsyncAwaitCompleter(type$.void);
      var $async$handlePaste$1 = B._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return B._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              delegate.pasteText$1(D.SelectionChangedCause_5);
              // implicit return
              return B._asyncReturn(null, $async$completer);
          }
      });
      return B._asyncStartSync($async$handlePaste$1, $async$completer);
    },
    handleSelectAll$1(delegate) {
      delegate.selectAll$1(D.SelectionChangedCause_5);
    }
  };
  A.TextSelectionOverlay.prototype = {
    _updateTextSelectionOverlayVisibilities$0() {
      var _this = this,
        t1 = _this._handlesVisible && B.boolConversionCheck(_this.renderObject._selectionStartInViewport._change_notifier$_value);
      _this._effectiveStartHandleVisibility.set$value(0, t1);
      t1 = _this._handlesVisible && B.boolConversionCheck(_this.renderObject._selectionEndInViewport._change_notifier$_value);
      _this._effectiveEndHandleVisibility.set$value(0, t1);
      t1 = _this.renderObject;
      t1 = B.boolConversionCheck(t1._selectionStartInViewport._change_notifier$_value) || B.boolConversionCheck(t1._selectionEndInViewport._change_notifier$_value);
      _this._effectiveToolbarVisibility.set$value(0, t1);
    },
    set$handlesVisible(visible) {
      if (this._handlesVisible === visible)
        return;
      this._handlesVisible = visible;
      this._updateTextSelectionOverlayVisibilities$0();
    },
    update$1(_, newValue) {
      var t1, _this = this;
      if (_this._text_selection$_value.$eq(0, newValue))
        return;
      _this._text_selection$_value = newValue;
      _this._updateSelectionOverlay$0();
      t1 = _this.__TextSelectionOverlay__selectionOverlay_F;
      t1 === $ && B.throwLateFieldNI("_selectionOverlay");
      t1.markNeedsBuild$0();
    },
    _updateSelectionOverlay$0() {
      var t2, t3, t4, currText, t5, selectedGraphemes, t6, startHandleRect, endHandleRect, _this = this, _null = null,
        t1 = _this.__TextSelectionOverlay__selectionOverlay_F;
      t1 === $ && B.throwLateFieldNI("_selectionOverlay");
      t2 = _this.renderObject;
      t3 = t2._editable$_textPainter;
      t4 = t3._text_painter$_textDirection;
      t4.toString;
      t1.set$startHandleType(_this._chooseType$3(t4, C.TextSelectionHandleType_0, C.TextSelectionHandleType_1));
      t4 = _this.selectionDelegate;
      currText = t4._widget.controller._change_notifier$_value.text;
      if (t3.get$plainText() === currText)
        if (_this._text_selection$_value.selection.get$isValid()) {
          t5 = _this._text_selection$_value.selection;
          t5 = t5.start !== t5.end;
        } else
          t5 = false;
      else
        t5 = false;
      if (t5) {
        t5 = _this._text_selection$_value.selection;
        selectedGraphemes = C.JSString_methods.substring$2(currText, t5.start, t5.end);
        t5 = selectedGraphemes.length === 0 ? C.StringCharacters_ehH : new B.StringCharacters(selectedGraphemes);
        t5 = t5.get$first(t5);
        t6 = _this._text_selection$_value.selection.start;
        startHandleRect = t2.getRectForComposingRange$1(new B.TextRange(t6, t6 + t5.length));
      } else
        startHandleRect = _null;
      t5 = startHandleRect == null ? _null : startHandleRect.bottom - startHandleRect.top;
      t1.set$lineHeightAtStart(t5 == null ? t3.get$preferredLineHeight() : t5);
      t5 = t3._text_painter$_textDirection;
      t5.toString;
      t1.set$endHandleType(_this._chooseType$3(t5, C.TextSelectionHandleType_1, C.TextSelectionHandleType_0));
      currText = t4._widget.controller._change_notifier$_value.text;
      if (t3.get$plainText() === currText)
        if (_this._text_selection$_value.selection.get$isValid()) {
          t4 = _this._text_selection$_value.selection;
          t4 = t4.start !== t4.end;
        } else
          t4 = false;
      else
        t4 = false;
      if (t4) {
        t4 = _this._text_selection$_value.selection;
        selectedGraphemes = C.JSString_methods.substring$2(currText, t4.start, t4.end);
        t4 = selectedGraphemes.length === 0 ? C.StringCharacters_ehH : new B.StringCharacters(selectedGraphemes);
        t4 = t4.get$last(t4);
        t5 = _this._text_selection$_value.selection.end;
        endHandleRect = t2.getRectForComposingRange$1(new B.TextRange(t5 - t4.length, t5));
      } else
        endHandleRect = _null;
      t4 = endHandleRect == null ? _null : endHandleRect.bottom - endHandleRect.top;
      t1.set$lineHeightAtEnd(t4 == null ? t3.get$preferredLineHeight() : t4);
      t1.set$selectionEndpoints(t2.getEndpointsForSelection$1(_this._text_selection$_value.selection));
      t1.set$toolbarLocation(t2._lastSecondaryTapDownPosition);
    },
    get$toolbarIsVisible() {
      var _s17_ = "_selectionOverlay",
        t1 = this.__TextSelectionOverlay__selectionOverlay_F;
      if (type$.TextSelectionHandleControls._is(this.selectionControls)) {
        t1 === $ && B.throwLateFieldNI(_s17_);
        t1 = $.ContextMenuController__shownInstance === t1._contextMenuController;
      } else {
        t1 === $ && B.throwLateFieldNI(_s17_);
        t1 = t1._toolbar != null;
      }
      return t1;
    },
    dispose$0() {
      var t2, t3, _this = this,
        t1 = _this.__TextSelectionOverlay__selectionOverlay_F;
      t1 === $ && B.throwLateFieldNI("_selectionOverlay");
      t1.hide$0();
      t2 = _this.renderObject;
      t3 = _this.get$_updateTextSelectionOverlayVisibilities();
      t2._selectionStartInViewport.removeListener$1(0, t3);
      t2._selectionEndInViewport.removeListener$1(0, t3);
      _this._effectiveToolbarVisibility.dispose$0();
      _this._effectiveStartHandleVisibility.dispose$0();
      _this._effectiveEndHandleVisibility.dispose$0();
      t1.hideToolbar$0();
    },
    _buildMagnifier$3$currentTextPosition$globalGesturePosition$renderEditable(currentTextPosition, globalGesturePosition, renderEditable) {
      var t5,
        globalRenderEditableTopLeft = B.MatrixUtils_transformPoint(renderEditable.getTransformTo$1(0, null), C.Offset_0_0),
        localCaretRect = renderEditable.getLocalRectForCaret$1(currentTextPosition),
        lineAtOffset = renderEditable.getLineAtOffset$1(currentTextPosition),
        lineBoundaries = B.Rect$fromPoints(renderEditable.getLocalRectForCaret$1(new B.TextPosition(lineAtOffset.baseOffset, C.TextAffinity_1)).get$topCenter(), renderEditable.getLocalRectForCaret$1(new B.TextPosition(lineAtOffset.extentOffset, C.TextAffinity_0)).get$bottomCenter()),
        t1 = renderEditable._size,
        t2 = globalRenderEditableTopLeft._dx,
        t3 = globalRenderEditableTopLeft._dy,
        t4 = t1._dx;
      t1 = t1._dy;
      t5 = localCaretRect.shift$1(globalRenderEditableTopLeft);
      return new A.MagnifierInfo(globalGesturePosition, lineBoundaries.shift$1(globalRenderEditableTopLeft), t5, new B.Rect(t2, t3, t2 + t4, t3 + t1));
    },
    _handleSelectionEndHandleDragStart$1(details) {
      var t2, t3, t4, centerOfLine, _this = this,
        t1 = _this.renderObject;
      if (t1._node$_owner == null)
        return;
      t2 = details.globalPosition;
      _this.__TextSelectionOverlay__endHandleDragPosition_A = t2._dy;
      t3 = _this.__TextSelectionOverlay__selectionOverlay_F;
      t3 === $ && B.throwLateFieldNI("_selectionOverlay");
      t4 = J.get$last$ax(t3._selectionEndpoints).point;
      centerOfLine = B.MatrixUtils_transformPoint(t1.getTransformTo$1(0, null), t4)._dy - t1._editable$_textPainter.get$preferredLineHeight() / 2;
      _this.__TextSelectionOverlay__endHandleDragPositionToCenterOfLine_A = centerOfLine - _this.__TextSelectionOverlay__endHandleDragPosition_A;
      t3.showMagnifier$1(_this._buildMagnifier$3$currentTextPosition$globalGesturePosition$renderEditable(t1.getPositionForPoint$1(new B.Offset(t2._dx, centerOfLine)), t2, t1));
    },
    _getHandleDy$2(dragDy, handleDy) {
      var distanceDragged = dragDy - handleDy,
        dragDirection = distanceDragged < 0 ? -1 : 1,
        t1 = this.renderObject._editable$_textPainter;
      return handleDy + dragDirection * C.JSNumber_methods.floor$0(Math.abs(distanceDragged) / t1.get$preferredLineHeight()) * t1.get$preferredLineHeight();
    },
    _handleSelectionEndHandleDragUpdate$1(details) {
      var t2, t3, t4, position, newSelection, _this = this,
        _s17_ = "_selectionOverlay",
        t1 = _this.renderObject;
      if (t1._node$_owner == null)
        return;
      t2 = details.globalPosition;
      t3 = _this.__TextSelectionOverlay__endHandleDragPosition_A;
      t3 === $ && B.throwLateFieldNI("_endHandleDragPosition");
      t3 = _this._getHandleDy$2(t2._dy, t3);
      _this.__TextSelectionOverlay__endHandleDragPosition_A = t3;
      t4 = _this.__TextSelectionOverlay__endHandleDragPositionToCenterOfLine_A;
      t4 === $ && B.throwLateFieldNI("_endHandleDragPositionToCenterOfLine");
      position = t1.getPositionForPoint$1(new B.Offset(t2._dx, t3 + t4));
      t3 = _this._text_selection$_value.selection;
      t4 = t3.start;
      if (t4 === t3.end) {
        t3 = _this.__TextSelectionOverlay__selectionOverlay_F;
        t3 === $ && B.throwLateFieldNI(_s17_);
        t3.updateMagnifier$1(_this._buildMagnifier$3$currentTextPosition$globalGesturePosition$renderEditable(position, t2, t1));
        _this._handleSelectionHandleChanged$2$isEnd(A.TextSelection$fromPosition(position), true);
        return;
      }
      switch (B.defaultTargetPlatform().index) {
        case 2:
        case 4:
          t3 = position.offset;
          newSelection = B.TextSelection$(C.TextAffinity_1, t4, t3, false);
          if (t3 <= t4)
            return;
          break;
        case 0:
        case 1:
        case 3:
        case 5:
          newSelection = B.TextSelection$(C.TextAffinity_1, t3.baseOffset, position.offset, false);
          if (newSelection.baseOffset >= newSelection.extentOffset)
            return;
          break;
        default:
          newSelection = null;
      }
      _this._handleSelectionHandleChanged$2$isEnd(newSelection, true);
      t3 = _this.__TextSelectionOverlay__selectionOverlay_F;
      t3 === $ && B.throwLateFieldNI(_s17_);
      t3.updateMagnifier$1(_this._buildMagnifier$3$currentTextPosition$globalGesturePosition$renderEditable(newSelection.get$extent(), t2, t1));
    },
    _handleSelectionStartHandleDragStart$1(details) {
      var t2, t3, t4, centerOfLine, _this = this,
        t1 = _this.renderObject;
      if (t1._node$_owner == null)
        return;
      t2 = details.globalPosition;
      _this.__TextSelectionOverlay__startHandleDragPosition_A = t2._dy;
      t3 = _this.__TextSelectionOverlay__selectionOverlay_F;
      t3 === $ && B.throwLateFieldNI("_selectionOverlay");
      t4 = J.get$first$ax(t3._selectionEndpoints).point;
      centerOfLine = B.MatrixUtils_transformPoint(t1.getTransformTo$1(0, null), t4)._dy - t1._editable$_textPainter.get$preferredLineHeight() / 2;
      _this.__TextSelectionOverlay__startHandleDragPositionToCenterOfLine_A = centerOfLine - _this.__TextSelectionOverlay__startHandleDragPosition_A;
      t3.showMagnifier$1(_this._buildMagnifier$3$currentTextPosition$globalGesturePosition$renderEditable(t1.getPositionForPoint$1(new B.Offset(t2._dx, centerOfLine)), t2, t1));
    },
    _handleSelectionStartHandleDragUpdate$1(details) {
      var t2, t3, t4, position, newSelection, _this = this,
        _s17_ = "_selectionOverlay",
        t1 = _this.renderObject;
      if (t1._node$_owner == null)
        return;
      t2 = details.globalPosition;
      t3 = _this.__TextSelectionOverlay__startHandleDragPosition_A;
      t3 === $ && B.throwLateFieldNI("_startHandleDragPosition");
      t3 = _this._getHandleDy$2(t2._dy, t3);
      _this.__TextSelectionOverlay__startHandleDragPosition_A = t3;
      t4 = _this.__TextSelectionOverlay__startHandleDragPositionToCenterOfLine_A;
      t4 === $ && B.throwLateFieldNI("_startHandleDragPositionToCenterOfLine");
      position = t1.getPositionForPoint$1(new B.Offset(t2._dx, t3 + t4));
      t3 = _this._text_selection$_value.selection;
      t4 = t3.end;
      if (t3.start === t4) {
        t3 = _this.__TextSelectionOverlay__selectionOverlay_F;
        t3 === $ && B.throwLateFieldNI(_s17_);
        t3.updateMagnifier$1(_this._buildMagnifier$3$currentTextPosition$globalGesturePosition$renderEditable(position, t2, t1));
        _this._handleSelectionHandleChanged$2$isEnd(A.TextSelection$fromPosition(position), false);
        return;
      }
      switch (B.defaultTargetPlatform().index) {
        case 2:
        case 4:
          newSelection = B.TextSelection$(C.TextAffinity_1, t4, position.offset, false);
          if (newSelection.extentOffset >= t4)
            return;
          break;
        case 0:
        case 1:
        case 3:
        case 5:
          newSelection = B.TextSelection$(C.TextAffinity_1, position.offset, t3.extentOffset, false);
          if (newSelection.baseOffset >= newSelection.extentOffset)
            return;
          break;
        default:
          newSelection = null;
      }
      t3 = _this.__TextSelectionOverlay__selectionOverlay_F;
      t3 === $ && B.throwLateFieldNI(_s17_);
      t3.updateMagnifier$1(_this._buildMagnifier$3$currentTextPosition$globalGesturePosition$renderEditable(newSelection.get$extent().offset < newSelection.get$base().offset ? newSelection.get$extent() : newSelection.get$base(), t2, t1));
      _this._handleSelectionHandleChanged$2$isEnd(newSelection, false);
    },
    _handleAnyDragEnd$1(details) {
      var t2, t3, _this = this,
        _s17_ = "_selectionOverlay",
        t1 = _this.context;
      if (t1._widget == null)
        return;
      if (!type$.TextSelectionHandleControls._is(_this.selectionControls)) {
        t1 = _this.__TextSelectionOverlay__selectionOverlay_F;
        t1 === $ && B.throwLateFieldNI(_s17_);
        t1.hideMagnifier$0();
        t2 = _this._text_selection$_value.selection;
        if (t2.start !== t2.end)
          t1.showToolbar$0();
        return;
      }
      t2 = _this.__TextSelectionOverlay__selectionOverlay_F;
      t2 === $ && B.throwLateFieldNI(_s17_);
      t2.hideMagnifier$0();
      t3 = _this._text_selection$_value.selection;
      if (t3.start !== t3.end)
        t2.showToolbar$2$context$contextMenuBuilder(t1, _this.contextMenuBuilder);
    },
    _handleSelectionHandleChanged$2$isEnd(newSelection, isEnd) {
      var textPosition = isEnd ? newSelection.get$extent() : newSelection.get$base(),
        t1 = this.selectionDelegate;
      t1.userUpdateTextEditingValue$2(this._text_selection$_value.copyWith$1$selection(newSelection), D.SelectionChangedCause_6);
      t1.bringIntoView$1(textPosition);
    },
    _chooseType$3(textDirection, ltrType, rtlType) {
      var t1 = this._text_selection$_value.selection;
      if (t1.start === t1.end)
        return D.TextSelectionHandleType_2;
      switch (textDirection.index) {
        case 1:
          return ltrType;
        case 0:
          return rtlType;
      }
    }
  };
  A.SelectionOverlay.prototype = {
    showMagnifier$1(initalMagnifierInfo) {
      var t1, t2, t3, t4, builtMagnifier, _this = this;
      if (_this._toolbar != null || $.ContextMenuController__shownInstance === _this._contextMenuController)
        _this.hideToolbar$0();
      t1 = _this._magnifierInfo;
      t1.set$value(0, initalMagnifierInfo);
      t2 = _this.magnifierConfiguration;
      t3 = _this.context;
      t4 = _this._magnifierController;
      builtMagnifier = t2.magnifierBuilder$3(t3, t4, t1);
      if (builtMagnifier == null)
        return;
      if (t2.shouldDisplayHandlesInMagnifier)
        t1 = null;
      else {
        t1 = _this._handles;
        t1 = t1 == null ? null : C.JSArray_methods.get$first(t1);
      }
      t4.show$3$below$builder$context(0, t1, new A.SelectionOverlay_showMagnifier_closure(builtMagnifier), t3);
    },
    hideMagnifier$0() {
      var t1 = this._magnifierController;
      if (t1._overlayEntry == null)
        return;
      t1.hide$0();
    },
    set$startHandleType(value) {
      type$.TextSelectionHandleType._as(value);
      if (this._startHandleType === value)
        return;
      this._startHandleType = value;
      this.markNeedsBuild$0();
    },
    set$lineHeightAtStart(value) {
      if (this._lineHeightAtStart === value)
        return;
      this._lineHeightAtStart = value;
      this.markNeedsBuild$0();
    },
    _handleStartHandleDragStart$1(details) {
      this._isDraggingStartHandle = details.kind === C.PointerDeviceKind_0;
      this.onStartHandleDragStart.call$1(details);
    },
    _handleStartHandleDragEnd$1(details) {
      this._isDraggingStartHandle = false;
      this.onStartHandleDragEnd.call$1(details);
    },
    set$endHandleType(value) {
      type$.TextSelectionHandleType._as(value);
      if (this._endHandleType === value)
        return;
      this._endHandleType = value;
      this.markNeedsBuild$0();
    },
    set$lineHeightAtEnd(value) {
      if (this._lineHeightAtEnd === value)
        return;
      this._lineHeightAtEnd = value;
      this.markNeedsBuild$0();
    },
    _handleEndHandleDragStart$1(details) {
      this._isDraggingEndHandle = details.kind === C.PointerDeviceKind_0;
      this.onEndHandleDragStart.call$1(details);
    },
    _handleEndHandleDragEnd$1(details) {
      this._isDraggingEndHandle = false;
      this.onEndHandleDragEnd.call$1(details);
    },
    set$selectionEndpoints(value) {
      var _this = this;
      type$.List_TextSelectionPoint._as(value);
      if (!B.listEquals(_this._selectionEndpoints, value, type$.TextSelectionPoint)) {
        _this.markNeedsBuild$0();
        if (_this._isDraggingEndHandle || _this._isDraggingStartHandle)
          switch (B.defaultTargetPlatform().index) {
            case 0:
              A.HapticFeedback_selectionClick();
              break;
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
              break;
          }
      }
      _this.set$_selectionEndpoints(value);
    },
    set$toolbarLocation(value) {
      if (J.$eq$(this._toolbarLocation, value))
        return;
      this._toolbarLocation = value;
      this.markNeedsBuild$0();
    },
    showHandles$0() {
      var t1, t2, _this = this;
      if (_this._handles != null)
        return;
      _this.set$_handles(B._setArrayType([B.OverlayEntry$(_this.get$_buildStartHandle(), false), B.OverlayEntry$(_this.get$_buildEndHandle(), false)], type$.JSArray_OverlayEntry));
      t1 = _this.context.findRootAncestorStateOfType$1$0(type$.OverlayState);
      t1.toString;
      t2 = _this._handles;
      t2.toString;
      t1.insertAll$1(0, t2);
    },
    showToolbar$2$context$contextMenuBuilder(context, contextMenuBuilder) {
      var t1, t2, _this = this;
      type$.nullable_Widget_Function_BuildContext._as(contextMenuBuilder);
      if (contextMenuBuilder == null) {
        if (_this._toolbar != null)
          return;
        _this._toolbar = B.OverlayEntry$(_this.get$_buildToolbar(), false);
        t1 = _this.context.findRootAncestorStateOfType$1$0(type$.OverlayState);
        t1.toString;
        t2 = _this._toolbar;
        t2.toString;
        t1.insert$1(0, t2);
        return;
      }
      if (context == null)
        return;
      t1 = context.get$renderObject();
      t1.toString;
      _this._contextMenuController.show$2$context$contextMenuBuilder(0, context, new A.SelectionOverlay_showToolbar_closure(_this, type$.RenderBox._as(t1), contextMenuBuilder));
    },
    showToolbar$0() {
      return this.showToolbar$2$context$contextMenuBuilder(null, null);
    },
    showToolbar$1$contextMenuBuilder(contextMenuBuilder) {
      return this.showToolbar$2$context$contextMenuBuilder(null, contextMenuBuilder);
    },
    markNeedsBuild$0() {
      var t3, _this = this,
        t1 = _this._handles,
        t2 = t1 == null;
      if (t2 && _this._toolbar == null)
        return;
      t3 = $.SchedulerBinding__instance;
      if (t3.SchedulerBinding__schedulerPhase === C.SchedulerPhase_3) {
        if (_this._buildScheduled)
          return;
        _this._buildScheduled = true;
        t1 = type$.void_Function_Duration._as(new A.SelectionOverlay_markNeedsBuild_closure(_this));
        C.JSArray_methods.add$1(t3.SchedulerBinding__postFrameCallbacks, t1);
      } else {
        if (!t2) {
          t1[0].markNeedsBuild$0();
          _this._handles[1].markNeedsBuild$0();
        }
        t1 = _this._toolbar;
        if (t1 != null)
          t1.markNeedsBuild$0();
        if ($.ContextMenuController__shownInstance === _this._contextMenuController) {
          t1 = $.ContextMenuController__menuOverlayEntry;
          if (t1 != null)
            t1.markNeedsBuild$0();
        }
      }
    },
    hide$0() {
      var t1, _this = this;
      _this._magnifierController.hide$0();
      t1 = _this._handles;
      if (t1 != null) {
        t1[0].remove$0(0);
        _this._handles[1].remove$0(0);
        _this.set$_handles(null);
      }
      if (_this._toolbar != null || $.ContextMenuController__shownInstance === _this._contextMenuController)
        _this.hideToolbar$0();
    },
    hideToolbar$0() {
      this._contextMenuController.remove$0(0);
      var t1 = this._toolbar;
      if (t1 == null)
        return;
      t1.remove$0(0);
      this._toolbar = null;
    },
    _buildStartHandle$1(context) {
      var selectionControls, handle, t1, _this = this;
      type$.BuildContext._as(context);
      selectionControls = _this.selectionControls;
      if (selectionControls == null)
        handle = C.SizedBox_0_0_null_null;
      else {
        t1 = _this._startHandleType;
        handle = A._SelectionHandleOverlay$(_this.dragStartBehavior, _this.startHandleLayerLink, _this.get$_handleStartHandleDragEnd(), _this.get$_handleStartHandleDragStart(), _this.onStartHandleDragUpdate, _this.onSelectionHandleTapped, _this._lineHeightAtStart, selectionControls, t1, _this.startHandlesVisible);
      }
      return A.TextFieldTapRegion$(new B.ExcludeSemantics(true, handle, null), null, null);
    },
    _buildEndHandle$1(context) {
      var selectionControls, handle, t1, _this = this;
      type$.BuildContext._as(context);
      selectionControls = _this.selectionControls;
      if (selectionControls == null || _this._startHandleType === D.TextSelectionHandleType_2)
        handle = C.SizedBox_0_0_null_null;
      else {
        t1 = _this._endHandleType;
        handle = A._SelectionHandleOverlay$(_this.dragStartBehavior, _this.endHandleLayerLink, _this.get$_handleEndHandleDragEnd(), _this.get$_handleEndHandleDragStart(), _this.onEndHandleDragUpdate, _this.onSelectionHandleTapped, _this._lineHeightAtEnd, selectionControls, t1, _this.endHandlesVisible);
      }
      return A.TextFieldTapRegion$(new B.ExcludeSemantics(true, handle, null), null, null);
    },
    _buildToolbar$1(context) {
      var t1, t2, t3, editingRegion, midX, _this = this, _null = null;
      type$.BuildContext._as(context);
      if (_this.selectionControls == null)
        return C.SizedBox_0_0_null_null;
      t1 = _this.context.get$renderObject();
      t1.toString;
      type$.RenderBox._as(t1);
      t2 = B.MatrixUtils_transformPoint(t1.getTransformTo$1(0, _null), C.Offset_0_0);
      t3 = t1._size.bottomRight$1(0, C.Offset_0_0);
      editingRegion = B.Rect$fromPoints(t2, B.MatrixUtils_transformPoint(t1.getTransformTo$1(0, _null), t3));
      midX = J.get$last$ax(_this._selectionEndpoints).point._dy - J.get$first$ax(_this._selectionEndpoints).point._dy > _this._lineHeightAtEnd / 2 ? (editingRegion.right - editingRegion.left) / 2 : (J.get$first$ax(_this._selectionEndpoints).point._dx + J.get$last$ax(_this._selectionEndpoints).point._dx) / 2;
      return new A._SelectionToolbarWrapper(new B.Builder(new A.SelectionOverlay__buildToolbar_closure(_this, editingRegion, new B.Offset(midX, J.get$first$ax(_this._selectionEndpoints).point._dy - _this._lineHeightAtStart)), _null), new B.Offset(-editingRegion.left, -editingRegion.top), _this.toolbarLayerLink, _this.toolbarVisible, _null);
    },
    updateMagnifier$1(magnifierInfo) {
      if (this._magnifierController._overlayEntry == null)
        return;
      this._magnifierInfo.set$value(0, magnifierInfo);
    },
    set$_selectionEndpoints(_selectionEndpoints) {
      this._selectionEndpoints = type$.List_TextSelectionPoint._as(_selectionEndpoints);
    },
    set$_handles(_handles) {
      this._handles = type$.nullable_List_OverlayEntry._as(_handles);
    }
  };
  A._SelectionToolbarWrapper.prototype = {
    createState$0() {
      return new A._SelectionToolbarWrapperState(null, null, C._StateLifecycle_0);
    }
  };
  A._SelectionToolbarWrapperState.prototype = {
    initState$0() {
      var t1, _this = this;
      _this.super$State$initState();
      _this.___SelectionToolbarWrapperState__controller_A = B.AnimationController$(null, C.Duration_150000, null, null, _this);
      _this._toolbarVisibilityChanged$0();
      t1 = _this._widget.visibility;
      if (t1 != null)
        t1.addListener$1(0, _this.get$_toolbarVisibilityChanged());
    },
    didUpdateWidget$1(oldWidget) {
      var t1, _this = this;
      type$._SelectionToolbarWrapper._as(oldWidget);
      _this.super$State$didUpdateWidget(oldWidget);
      t1 = oldWidget.visibility;
      if (t1 == _this._widget.visibility)
        return;
      if (t1 != null)
        t1.removeListener$1(0, _this.get$_toolbarVisibilityChanged());
      _this._toolbarVisibilityChanged$0();
      t1 = _this._widget.visibility;
      if (t1 != null)
        t1.addListener$1(0, _this.get$_toolbarVisibilityChanged());
    },
    dispose$0() {
      var _this = this,
        t1 = _this._widget.visibility;
      if (t1 != null)
        t1.removeListener$1(0, _this.get$_toolbarVisibilityChanged());
      t1 = _this.___SelectionToolbarWrapperState__controller_A;
      t1 === $ && B.throwLateFieldNI("_controller");
      t1.dispose$0();
      _this.super$__SelectionToolbarWrapperState_State_SingleTickerProviderStateMixin$dispose();
    },
    _toolbarVisibilityChanged$0() {
      var t2,
        _s11_ = "_controller",
        t1 = this._widget.visibility;
      t1 = t1 == null ? null : t1._change_notifier$_value;
      t1 = B.boolConversionCheck(t1 == null ? true : t1);
      t2 = this.___SelectionToolbarWrapperState__controller_A;
      if (t1) {
        t2 === $ && B.throwLateFieldNI(_s11_);
        t2.forward$0(0);
      } else {
        t2 === $ && B.throwLateFieldNI(_s11_);
        t2.reverse$0(0);
      }
    },
    build$1(context) {
      var t2, t3, t4, t5,
        t1 = this._framework$_element.dependOnInheritedWidgetOfExactType$1$0(type$.Directionality);
      t1.toString;
      t2 = this.___SelectionToolbarWrapperState__controller_A;
      t2 === $ && B.throwLateFieldNI("_controller");
      t3 = this._widget;
      t4 = t3.layerLink;
      t5 = t3.offset;
      return A.TextFieldTapRegion$(B.Directionality$(B.FadeTransition$(false, A.CompositedTransformFollower$(t3.child, t4, t5, false), t2), t1.textDirection), null, null);
    },
    $isTickerProvider: 1
  };
  A._SelectionHandleOverlay.prototype = {
    createState$0() {
      return new A._SelectionHandleOverlayState(null, null, C._StateLifecycle_0);
    }
  };
  A._SelectionHandleOverlayState.prototype = {
    initState$0() {
      var t1, _this = this;
      _this.super$State$initState();
      _this.___SelectionHandleOverlayState__controller_A = B.AnimationController$(null, C.Duration_150000, null, null, _this);
      _this._handleVisibilityChanged$0();
      t1 = _this._widget.visibility;
      if (t1 != null)
        t1.addListener$1(0, _this.get$_handleVisibilityChanged());
    },
    _handleVisibilityChanged$0() {
      var t2,
        _s11_ = "_controller",
        t1 = this._widget.visibility;
      t1 = t1 == null ? null : t1._change_notifier$_value;
      t1 = B.boolConversionCheck(t1 == null ? true : t1);
      t2 = this.___SelectionHandleOverlayState__controller_A;
      if (t1) {
        t2 === $ && B.throwLateFieldNI(_s11_);
        t2.forward$0(0);
      } else {
        t2 === $ && B.throwLateFieldNI(_s11_);
        t2.reverse$0(0);
      }
    },
    didUpdateWidget$1(oldWidget) {
      var t1, _this = this;
      type$._SelectionHandleOverlay._as(oldWidget);
      _this.super$State$didUpdateWidget(oldWidget);
      t1 = oldWidget.visibility;
      if (t1 != null)
        t1.removeListener$1(0, _this.get$_handleVisibilityChanged());
      _this._handleVisibilityChanged$0();
      t1 = _this._widget.visibility;
      if (t1 != null)
        t1.addListener$1(0, _this.get$_handleVisibilityChanged());
    },
    dispose$0() {
      var _this = this,
        t1 = _this._widget.visibility;
      if (t1 != null)
        t1.removeListener$1(0, _this.get$_handleVisibilityChanged());
      t1 = _this.___SelectionHandleOverlayState__controller_A;
      t1 === $ && B.throwLateFieldNI("_controller");
      t1.dispose$0();
      _this.super$__SelectionHandleOverlayState_State_SingleTickerProviderStateMixin$dispose();
    },
    build$1(context) {
      var handleSize, t2, t3, t4, handleRect, interactiveRect, t5, t6, t7, t8, t9, t10, _this = this, _null = null,
        t1 = _this._widget,
        handleAnchor = t1.selectionControls.getHandleAnchor$2(t1.type, t1.preferredLineHeight);
      t1 = _this._widget;
      handleSize = t1.selectionControls.getHandleSize$1(t1.preferredLineHeight);
      t1 = -handleAnchor._dx;
      t2 = -handleAnchor._dy;
      t3 = t1 + handleSize._dx;
      t4 = t2 + handleSize._dy;
      handleRect = new B.Rect(t1, t2, t3, t4);
      interactiveRect = handleRect.expandToInclude$1(B.Rect$fromCircle(handleRect.get$center(), 24));
      t5 = interactiveRect.left;
      t6 = interactiveRect.right - t5;
      t1 = Math.max((t6 - (t3 - t1)) / 2, 0);
      t3 = interactiveRect.top;
      t7 = interactiveRect.bottom - t3;
      t2 = Math.max((t7 - (t4 - t2)) / 2, 0);
      t4 = _this._widget.handleLayerLink;
      t8 = _this.___SelectionHandleOverlayState__controller_A;
      t8 === $ && B.throwLateFieldNI("_controller");
      t9 = B.LinkedHashMap_LinkedHashMap$_literal([C.Type_PanGestureRecognizer_bbH, new B.GestureRecognizerFactoryWithHandlers(new A._SelectionHandleOverlayState_build_closure(_this), new A._SelectionHandleOverlayState_build_closure0(_this), type$.GestureRecognizerFactoryWithHandlers_PanGestureRecognizer)], type$.Type, type$.GestureRecognizerFactory_GestureRecognizer);
      t10 = _this._widget;
      return A.CompositedTransformFollower$(B.FadeTransition$(false, B.Container$(C.Alignment_m1_m1, new B.RawGestureDetector(new B.Padding(new B.EdgeInsets(t1, t2, t1, t2), t10.selectionControls.buildHandle$4(context, t10.type, t10.preferredLineHeight, t10.onSelectionHandleTapped), _null), t9, C.HitTestBehavior_2, false, _null, _null), C.Clip_0, _null, _null, _null, t7, _null, _null, _null, t6), t8), t4, new B.Offset(t5, t3), false);
    },
    $isTickerProvider: 1
  };
  A.TextSelectionGestureDetectorBuilder.prototype = {
    get$_lastSecondaryTapWasOnSelection() {
      var t3, t4, textPosition,
        t1 = this.delegate.editableTextKey,
        t2 = t1.get$currentState();
      t2.toString;
      t2 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t2._editableKey).get$renderObject();
      t2.toString;
      t3 = type$.RenderEditable;
      t3._as(t2);
      t2 = t1.get$currentState();
      t2.toString;
      t2 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t2._editableKey).get$renderObject();
      t2.toString;
      t3._as(t2);
      t4 = t1.get$currentState();
      t4.toString;
      t4 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t4._editableKey).get$renderObject();
      t4.toString;
      t4 = t3._as(t4)._lastSecondaryTapDownPosition;
      t4.toString;
      textPosition = t2.getPositionForPoint$1(t4);
      t2 = t1.get$currentState();
      t2.toString;
      t2 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t2._editableKey).get$renderObject();
      t2.toString;
      t4 = textPosition.offset;
      if (t3._as(t2)._selection.start <= t4) {
        t1 = t1.get$currentState();
        t1.toString;
        t1 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1._editableKey).get$renderObject();
        t1.toString;
        t4 = t3._as(t1)._selection.end >= t4;
        t1 = t4;
      } else
        t1 = false;
      return t1;
    },
    _positionWasOnSelectionExclusive$1(textPosition) {
      var selection,
        t1 = this.delegate.editableTextKey.get$currentState();
      t1.toString;
      t1 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1._editableKey).get$renderObject();
      t1.toString;
      selection = type$.RenderEditable._as(t1)._selection;
      t1 = textPosition.offset;
      return selection.start < t1 && selection.end > t1;
    },
    _positionWasOnSelectionInclusive$1(textPosition) {
      var selection,
        t1 = this.delegate.editableTextKey.get$currentState();
      t1.toString;
      t1 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1._editableKey).get$renderObject();
      t1.toString;
      selection = type$.RenderEditable._as(t1)._selection;
      t1 = textPosition.offset;
      return selection.start <= t1 && selection.end >= t1;
    },
    _text_selection$_expandSelection$3(offset, cause, fromSelection) {
      var t3, tappedPosition, selection, t4, nextSelection,
        t1 = this.delegate.editableTextKey,
        t2 = t1.get$currentState();
      t2.toString;
      t2 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t2._editableKey).get$renderObject();
      t2.toString;
      t3 = type$.RenderEditable;
      tappedPosition = t3._as(t2).getPositionForPoint$1(offset);
      if (fromSelection == null) {
        t2 = t1.get$currentState();
        t2.toString;
        t2 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t2._editableKey).get$renderObject();
        t2.toString;
        selection = t3._as(t2)._selection;
      } else
        selection = fromSelection;
      t2 = tappedPosition.offset;
      t3 = selection.baseOffset;
      t4 = selection.extentOffset;
      nextSelection = selection.copyWith$2$baseOffset$extentOffset(Math.abs(t2 - t3) < Math.abs(t2 - t4) ? t4 : t3, t2);
      t2 = t1.get$currentState();
      t2.toString;
      t1 = t1.get$currentState();
      t1.toString;
      t2.userUpdateTextEditingValue$2(t1._widget.controller._change_notifier$_value.copyWith$1$selection(nextSelection), cause);
    },
    _text_selection$_expandSelection$2(offset, cause) {
      return this._text_selection$_expandSelection$3(offset, cause, null);
    },
    _extendSelection$2(offset, cause) {
      var t3, tappedPosition, nextSelection,
        t1 = this.delegate.editableTextKey,
        t2 = t1.get$currentState();
      t2.toString;
      t2 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t2._editableKey).get$renderObject();
      t2.toString;
      t3 = type$.RenderEditable;
      tappedPosition = t3._as(t2).getPositionForPoint$1(offset);
      t2 = t1.get$currentState();
      t2.toString;
      t2 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t2._editableKey).get$renderObject();
      t2.toString;
      nextSelection = t3._as(t2)._selection.copyWith$1$extentOffset(tappedPosition.offset);
      t2 = t1.get$currentState();
      t2.toString;
      t1 = t1.get$currentState();
      t1.toString;
      t2.userUpdateTextEditingValue$2(t1._widget.controller._change_notifier$_value.copyWith$1$selection(nextSelection), cause);
    },
    get$_text_selection$_scrollPosition() {
      var scrollableState,
        t1 = this.delegate.editableTextKey;
      if ($.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1) == null)
        scrollableState = null;
      else {
        t1 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1);
        t1.toString;
        scrollableState = B.Scrollable_maybeOf(t1);
      }
      if (scrollableState == null)
        t1 = 0;
      else {
        t1 = scrollableState._scrollable$_position._pixels;
        t1.toString;
      }
      return t1;
    },
    onTapDown$1(details) {
      var t2, t3, kind, t4, t5, isShiftPressedValid, _this = this,
        t1 = _this.delegate;
      if (!t1._widget.enableInteractiveSelection)
        return;
      t1 = t1.editableTextKey;
      t2 = t1.get$currentState();
      t2.toString;
      t2 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t2._editableKey).get$renderObject();
      t2.toString;
      t3 = type$.RenderEditable;
      t2 = t3._as(t2)._lastTapDownPosition = details.globalPosition;
      kind = details.kind;
      _this._shouldShowSelectionToolbar = kind == null || kind === C.PointerDeviceKind_0 || kind === C.PointerDeviceKind_2;
      t4 = $.ServicesBinding__instance.ServicesBinding___ServicesBinding__keyboard_F;
      t4 === $ && B.throwLateFieldNI("_keyboard");
      t4 = t4._pressedKeys;
      t4 = t4.get$values(t4);
      t4 = B.LinkedHashSet_LinkedHashSet$of(t4, B._instanceType(t4)._eval$1("Iterable.E"));
      t5 = B.LinkedHashSet_LinkedHashSet$_literal([C.LogicalKeyboardKey_8589934850, C.LogicalKeyboardKey_8589934851], type$.LogicalKeyboardKey);
      if (t4.any$1(0, t5.get$contains(t5))) {
        t4 = t1.get$currentState();
        t4.toString;
        t4 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t4._editableKey).get$renderObject();
        t4.toString;
        t3._as(t4)._selection;
        isShiftPressedValid = true;
      } else
        isShiftPressedValid = false;
      switch (B.defaultTargetPlatform().index) {
        case 0:
        case 1:
        case 2:
          if (_this._isShiftTapping)
            _this._isShiftTapping = false;
          break;
        case 4:
          if (isShiftPressedValid) {
            _this._isShiftTapping = true;
            t1 = t1.get$currentState();
            t1.toString;
            t1 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1._editableKey).get$renderObject();
            t1.toString;
            _this._text_selection$_expandSelection$3(t2, D.SelectionChangedCause_0, t3._as(t1)._editable$_hasFocus ? null : D.TextSelection_3Ex1);
            return;
          }
          t1 = t1.get$currentState();
          t1.toString;
          t1 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1._editableKey).get$renderObject();
          t1.toString;
          t3._as(t1);
          t3 = t1._lastTapDownPosition;
          t3.toString;
          t1.selectPositionAt$2$cause$from(D.SelectionChangedCause_0, t3);
          break;
        case 3:
        case 5:
          if (isShiftPressedValid) {
            _this._isShiftTapping = true;
            _this._extendSelection$2(t2, D.SelectionChangedCause_0);
            return;
          }
          t1 = t1.get$currentState();
          t1.toString;
          t1 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1._editableKey).get$renderObject();
          t1.toString;
          t3._as(t1);
          t3 = t1._lastTapDownPosition;
          t3.toString;
          t1.selectPositionAt$2$cause$from(D.SelectionChangedCause_0, t3);
          break;
      }
    },
    onForcePressStart$1(details) {
      var t1;
      this._shouldShowSelectionToolbar = true;
      t1 = this.delegate;
      if (t1._widget.enableInteractiveSelection) {
        t1 = t1.editableTextKey.get$currentState();
        t1.toString;
        t1 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1._editableKey).get$renderObject();
        t1.toString;
        type$.RenderEditable._as(t1).selectWordsInRange$2$cause$from(D.SelectionChangedCause_3, details.globalPosition);
      }
    },
    onSingleTapUp$1(details) {
      var t2, t3, isShiftPressedValid, fromSelection, previousSelection, textPosition, isAffinityTheSame, t4, t5, position, word, newSelection, _this = this,
        t1 = _this.delegate;
      if (t1._widget.enableInteractiveSelection) {
        t2 = $.ServicesBinding__instance.ServicesBinding___ServicesBinding__keyboard_F;
        t2 === $ && B.throwLateFieldNI("_keyboard");
        t2 = t2._pressedKeys;
        t2 = t2.get$values(t2);
        t2 = B.LinkedHashSet_LinkedHashSet$of(t2, B._instanceType(t2)._eval$1("Iterable.E"));
        t3 = B.LinkedHashSet_LinkedHashSet$_literal([C.LogicalKeyboardKey_8589934850, C.LogicalKeyboardKey_8589934851], type$.LogicalKeyboardKey);
        if (t2.any$1(0, t3.get$contains(t3))) {
          t2 = t1.editableTextKey.get$currentState();
          t2.toString;
          t2 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t2._editableKey).get$renderObject();
          t2.toString;
          type$.RenderEditable._as(t2)._selection;
          isShiftPressedValid = true;
        } else
          isShiftPressedValid = false;
        switch (B.defaultTargetPlatform().index) {
          case 3:
          case 4:
          case 5:
            t1 = t1.editableTextKey.get$currentState();
            t1.toString;
            t1.hideToolbar$0();
            if (_this._isShiftTapping)
              _this._isShiftTapping = false;
            break;
          case 0:
          case 1:
            t1 = t1.editableTextKey;
            t2 = t1.get$currentState();
            t2.toString;
            t2.hideToolbar$0();
            if (isShiftPressedValid) {
              _this._isShiftTapping = true;
              _this._extendSelection$2(details.globalPosition, D.SelectionChangedCause_0);
              return;
            }
            t1 = t1.get$currentState();
            t1.toString;
            t1 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1._editableKey).get$renderObject();
            t1.toString;
            type$.RenderEditable._as(t1);
            t2 = t1._lastTapDownPosition;
            t2.toString;
            t1.selectPositionAt$2$cause$from(D.SelectionChangedCause_0, t2);
            break;
          case 2:
            if (isShiftPressedValid) {
              _this._isShiftTapping = true;
              t1 = t1.editableTextKey.get$currentState();
              t1.toString;
              t1 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1._editableKey).get$renderObject();
              t1.toString;
              fromSelection = type$.RenderEditable._as(t1)._editable$_hasFocus ? null : D.TextSelection_3Ex1;
              _this._text_selection$_expandSelection$3(details.globalPosition, D.SelectionChangedCause_0, fromSelection);
              return;
            }
            switch (details.kind.index) {
              case 1:
              case 4:
              case 2:
              case 3:
                t1 = t1.editableTextKey.get$currentState();
                t1.toString;
                t1 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1._editableKey).get$renderObject();
                t1.toString;
                type$.RenderEditable._as(t1);
                t2 = t1._lastTapDownPosition;
                t2.toString;
                t1.selectPositionAt$2$cause$from(D.SelectionChangedCause_0, t2);
                break;
              case 0:
              case 5:
                t1 = t1.editableTextKey;
                t2 = t1.get$currentState();
                t2.toString;
                t2 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t2._editableKey).get$renderObject();
                t2.toString;
                t3 = type$.RenderEditable;
                previousSelection = t3._as(t2)._selection;
                t2 = t1.get$currentState();
                t2.toString;
                t2 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t2._editableKey).get$renderObject();
                t2.toString;
                textPosition = t3._as(t2).getPositionForPoint$1(details.globalPosition);
                isAffinityTheSame = textPosition.affinity === previousSelection.affinity;
                if (!(_this._positionWasOnSelectionExclusive$1(textPosition) && previousSelection.start !== previousSelection.end))
                  t2 = _this._positionWasOnSelectionInclusive$1(textPosition) && previousSelection.start === previousSelection.end && isAffinityTheSame;
                else
                  t2 = true;
                if (t2) {
                  t2 = t1.get$currentState();
                  t2.toString;
                  t2 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t2._editableKey).get$renderObject();
                  t2.toString;
                  t2 = t3._as(t2)._editable$_hasFocus;
                } else
                  t2 = false;
                if (t2) {
                  t1 = t1.get$currentState();
                  t1.toString;
                  t1.toggleToolbar$1(false);
                } else {
                  t2 = t1.get$currentState();
                  t2.toString;
                  t2 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t2._editableKey).get$renderObject();
                  t2.toString;
                  t3._as(t2);
                  t2._computeTextMetricsIfNeeded$0();
                  t4 = t2._editable$_textPainter;
                  t5 = t2._lastTapDownPosition;
                  t5.toString;
                  t5 = t2.globalToLocal$1(t5.$sub(0, t2.get$_editable$_paintOffset()));
                  position = t4._paragraph.getPositionForOffset$1(t5);
                  word = t4._paragraph.getWordBoundary$1(position);
                  newSelection = B._Cell$named("newSelection");
                  t4 = word.start;
                  if (position.offset <= t4)
                    newSelection.__late_helper$_value = A.TextSelection$collapsed(C.TextAffinity_1, t4);
                  else
                    newSelection.__late_helper$_value = A.TextSelection$collapsed(C.TextAffinity_0, word.end);
                  t2._setSelection$2(newSelection._readLocal$0(), D.SelectionChangedCause_0);
                  t2 = t1.get$currentState();
                  t2.toString;
                  if (previousSelection.$eq(0, t2._widget.controller._change_notifier$_value.selection)) {
                    t2 = t1.get$currentState();
                    t2.toString;
                    t2 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t2._editableKey).get$renderObject();
                    t2.toString;
                    t2 = t3._as(t2)._editable$_hasFocus;
                  } else
                    t2 = false;
                  if (t2) {
                    t1 = t1.get$currentState();
                    t1.toString;
                    t1.toggleToolbar$1(false);
                  } else {
                    t1 = t1.get$currentState();
                    t1.toString;
                    t1.hideToolbar$1(false);
                  }
                }
                break;
            }
            break;
        }
      }
    },
    onSingleTapCancel$0() {
    },
    onSingleLongTapStart$1(details) {
      var t2, t3, _this = this,
        t1 = _this.delegate;
      if (t1._widget.enableInteractiveSelection) {
        switch (B.defaultTargetPlatform().index) {
          case 2:
          case 4:
            t2 = t1.editableTextKey.get$currentState();
            t2.toString;
            t2 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t2._editableKey).get$renderObject();
            t2.toString;
            type$.RenderEditable._as(t2).selectPositionAt$2$cause$from(D.SelectionChangedCause_2, details.globalPosition);
            break;
          case 0:
          case 1:
          case 3:
          case 5:
            t2 = t1.editableTextKey.get$currentState();
            t2.toString;
            t2 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t2._editableKey).get$renderObject();
            t2.toString;
            type$.RenderEditable._as(t2);
            t3 = t2._lastTapDownPosition;
            t3.toString;
            t2.selectWordsInRange$2$cause$from(D.SelectionChangedCause_2, t3);
            break;
        }
        switch (B.defaultTargetPlatform().index) {
          case 0:
          case 2:
            t2 = t1.editableTextKey.get$currentState();
            t2.toString;
            t2.showMagnifier$1(details.globalPosition);
            break;
          case 1:
          case 3:
          case 4:
          case 5:
            break;
        }
        t1 = t1.editableTextKey.get$currentState();
        t1.toString;
        t1 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1._editableKey).get$renderObject();
        t1.toString;
        t1 = type$.RenderEditable._as(t1)._editable$_offset._pixels;
        t1.toString;
        _this._dragStartViewportOffset = t1;
        _this._dragStartScrollOffset = _this.get$_text_selection$_scrollPosition();
      }
    },
    onSingleLongTapMoveUpdate$1(details) {
      var t2, t3, editableOffset, t4, t5, t6, _this = this,
        t1 = _this.delegate;
      if (t1._widget.enableInteractiveSelection) {
        t1 = t1.editableTextKey;
        t2 = t1.get$currentState();
        t2.toString;
        t2 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t2._editableKey).get$renderObject();
        t2.toString;
        t3 = type$.RenderEditable;
        if (t3._as(t2)._editable$_maxLines === 1) {
          t2 = t1.get$currentState();
          t2.toString;
          t2 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t2._editableKey).get$renderObject();
          t2.toString;
          t2 = t3._as(t2)._editable$_offset._pixels;
          t2.toString;
          editableOffset = new B.Offset(t2 - _this._dragStartViewportOffset, 0);
        } else {
          t2 = t1.get$currentState();
          t2.toString;
          t2 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t2._editableKey).get$renderObject();
          t2.toString;
          t2 = t3._as(t2)._editable$_offset._pixels;
          t2.toString;
          editableOffset = new B.Offset(0, t2 - _this._dragStartViewportOffset);
        }
        t2 = _this.get$_text_selection$_scrollPosition();
        t4 = _this._dragStartScrollOffset;
        switch (B.defaultTargetPlatform().index) {
          case 2:
          case 4:
            t2 = t1.get$currentState();
            t2.toString;
            t2 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t2._editableKey).get$renderObject();
            t2.toString;
            t3._as(t2).selectPositionAt$2$cause$from(D.SelectionChangedCause_2, details.globalPosition);
            break;
          case 0:
          case 1:
          case 3:
          case 5:
            t5 = t1.get$currentState();
            t5.toString;
            t5 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t5._editableKey).get$renderObject();
            t5.toString;
            t6 = details.globalPosition;
            t3._as(t5).selectWordsInRange$3$cause$from$to(D.SelectionChangedCause_2, t6.$sub(0, details.offsetFromOrigin).$sub(0, editableOffset).$sub(0, new B.Offset(0, t2 - t4)), t6);
            break;
        }
        switch (B.defaultTargetPlatform().index) {
          case 0:
          case 2:
            t1 = t1.get$currentState();
            t1.toString;
            t1.showMagnifier$1(details.globalPosition);
            break;
          case 1:
          case 3:
          case 4:
          case 5:
            break;
        }
      }
    },
    onSingleLongTapEnd$1(details) {
      var t1, _this = this;
      switch (B.defaultTargetPlatform().index) {
        case 0:
        case 2:
          t1 = _this.delegate.editableTextKey.get$currentState();
          t1.toString;
          t1.hideMagnifier$0();
          break;
        case 1:
        case 3:
        case 4:
        case 5:
          break;
      }
      if (_this._shouldShowSelectionToolbar) {
        t1 = _this.delegate.editableTextKey.get$currentState();
        t1.toString;
        t1.showToolbar$0();
      }
      _this._dragStartScrollOffset = _this._dragStartViewportOffset = 0;
    },
    onSecondaryTap$0() {
      var t2, t3,
        t1 = this.delegate;
      if (!t1._widget.enableInteractiveSelection)
        return;
      switch (B.defaultTargetPlatform().index) {
        case 2:
        case 4:
          if (this.get$_lastSecondaryTapWasOnSelection()) {
            t2 = t1.editableTextKey.get$currentState();
            t2.toString;
            t2 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t2._editableKey).get$renderObject();
            t2.toString;
            t2 = !type$.RenderEditable._as(t2)._editable$_hasFocus;
          } else
            t2 = true;
          if (t2) {
            t2 = t1.editableTextKey.get$currentState();
            t2.toString;
            t2 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t2._editableKey).get$renderObject();
            t2.toString;
            type$.RenderEditable._as(t2);
            t3 = t2._lastTapDownPosition;
            t3.toString;
            t2.selectWordsInRange$2$cause$from(D.SelectionChangedCause_0, t3);
          }
          if (this._shouldShowSelectionToolbar) {
            t1 = t1.editableTextKey;
            t2 = t1.get$currentState();
            t2.toString;
            t2.hideToolbar$0();
            t1 = t1.get$currentState();
            t1.toString;
            t1.showToolbar$0();
          }
          break;
        case 0:
        case 1:
        case 3:
        case 5:
          t1 = t1.editableTextKey;
          t2 = t1.get$currentState();
          t2.toString;
          t2 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t2._editableKey).get$renderObject();
          t2.toString;
          t3 = type$.RenderEditable;
          if (!t3._as(t2)._editable$_hasFocus) {
            t2 = t1.get$currentState();
            t2.toString;
            t2 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t2._editableKey).get$renderObject();
            t2.toString;
            t3._as(t2);
            t3 = t2._lastTapDownPosition;
            t3.toString;
            t2.selectPositionAt$2$cause$from(D.SelectionChangedCause_0, t3);
          }
          t1 = t1.get$currentState();
          t1.toString;
          t1.toggleToolbar$0();
          break;
      }
    },
    onSecondaryTapDown$1(details) {
      var t1 = this.delegate.editableTextKey.get$currentState();
      t1.toString;
      t1 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1._editableKey).get$renderObject();
      t1.toString;
      type$.RenderEditable._as(t1);
      t1._lastSecondaryTapDownPosition = t1._lastTapDownPosition = details.globalPosition;
      this._shouldShowSelectionToolbar = true;
    },
    onDoubleTapDown$1(details) {
      var t2, t3,
        t1 = this.delegate;
      if (t1._widget.enableInteractiveSelection) {
        t1 = t1.editableTextKey;
        t2 = t1.get$currentState();
        t2.toString;
        t2 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t2._editableKey).get$renderObject();
        t2.toString;
        type$.RenderEditable._as(t2);
        t3 = t2._lastTapDownPosition;
        t3.toString;
        t2.selectWordsInRange$2$cause$from(D.SelectionChangedCause_0, t3);
        if (this._shouldShowSelectionToolbar) {
          t1 = t1.get$currentState();
          t1.toString;
          t1.showToolbar$0();
        }
      }
    },
    onDragSelectionStart$1(details) {
      var kind, t2, t3, t4, _this = this,
        t1 = _this.delegate;
      if (!t1._widget.enableInteractiveSelection)
        return;
      kind = details.kind;
      _this._shouldShowSelectionToolbar = kind == null || kind === C.PointerDeviceKind_0 || kind === C.PointerDeviceKind_2;
      t2 = $.ServicesBinding__instance.ServicesBinding___ServicesBinding__keyboard_F;
      t2 === $ && B.throwLateFieldNI("_keyboard");
      t2 = t2._pressedKeys;
      t2 = t2.get$values(t2);
      t2 = B.LinkedHashSet_LinkedHashSet$of(t2, B._instanceType(t2)._eval$1("Iterable.E"));
      t3 = B.LinkedHashSet_LinkedHashSet$_literal([C.LogicalKeyboardKey_8589934850, C.LogicalKeyboardKey_8589934851], type$.LogicalKeyboardKey);
      if (t2.any$1(0, t3.get$contains(t3))) {
        t2 = t1.editableTextKey;
        t3 = t2.get$currentState();
        t3.toString;
        t3 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t3._editableKey).get$renderObject();
        t3.toString;
        t4 = type$.RenderEditable;
        t4._as(t3);
        t2 = t2.get$currentState();
        t2.toString;
        t2 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t2._editableKey).get$renderObject();
        t2.toString;
        t2 = t4._as(t2)._selection.get$isValid();
      } else
        t2 = false;
      if (t2) {
        _this._isShiftTapping = true;
        switch (B.defaultTargetPlatform().index) {
          case 2:
          case 4:
            _this._text_selection$_expandSelection$2(details.globalPosition, D.SelectionChangedCause_6);
            break;
          case 0:
          case 1:
          case 3:
          case 5:
            _this._extendSelection$2(details.globalPosition, D.SelectionChangedCause_6);
            break;
        }
        t1 = t1.editableTextKey;
        t2 = t1.get$currentState();
        t2.toString;
        t2 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t2._editableKey).get$renderObject();
        t2.toString;
        _this._shiftTapDragSelection = type$.RenderEditable._as(t2)._selection;
      } else {
        t1 = t1.editableTextKey;
        t2 = t1.get$currentState();
        t2.toString;
        t2 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t2._editableKey).get$renderObject();
        t2.toString;
        type$.RenderEditable._as(t2).selectPositionAt$2$cause$from(D.SelectionChangedCause_6, details.globalPosition);
      }
      _this._dragStartScrollOffset = _this.get$_text_selection$_scrollPosition();
      t1 = t1.get$currentState();
      t1.toString;
      t1 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1._editableKey).get$renderObject();
      t1.toString;
      t1 = type$.RenderEditable._as(t1)._editable$_offset._pixels;
      t1.toString;
      _this._dragStartViewportOffset = t1;
    },
    onDragSelectionUpdate$2(startDetails, updateDetails) {
      var t2, t3, editableOffset, t4, selection, nextExtent, t5, isInverted, _this = this,
        t1 = _this.delegate;
      if (!t1._widget.enableInteractiveSelection)
        return;
      if (!_this._isShiftTapping) {
        t1 = t1.editableTextKey;
        t2 = t1.get$currentState();
        t2.toString;
        t2 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t2._editableKey).get$renderObject();
        t2.toString;
        t3 = type$.RenderEditable;
        if (t3._as(t2)._editable$_maxLines === 1) {
          t2 = t1.get$currentState();
          t2.toString;
          t2 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t2._editableKey).get$renderObject();
          t2.toString;
          t2 = t3._as(t2)._editable$_offset._pixels;
          t2.toString;
          editableOffset = new B.Offset(t2 - _this._dragStartViewportOffset, 0);
        } else {
          t2 = t1.get$currentState();
          t2.toString;
          t2 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t2._editableKey).get$renderObject();
          t2.toString;
          t2 = t3._as(t2)._editable$_offset._pixels;
          t2.toString;
          editableOffset = new B.Offset(0, t2 - _this._dragStartViewportOffset);
        }
        t2 = _this.get$_text_selection$_scrollPosition();
        t4 = _this._dragStartScrollOffset;
        t1 = t1.get$currentState();
        t1.toString;
        t1 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1._editableKey).get$renderObject();
        t1.toString;
        return t3._as(t1).selectPositionAt$3$cause$from$to(D.SelectionChangedCause_6, startDetails.globalPosition.$sub(0, editableOffset).$sub(0, new B.Offset(0, t2 - t4)), updateDetails.globalPosition);
      }
      t2 = _this._shiftTapDragSelection;
      if (t2.start !== t2.end)
        t2 = B.defaultTargetPlatform() !== C.TargetPlatform_2 && B.defaultTargetPlatform() !== C.TargetPlatform_4;
      else
        t2 = true;
      if (t2)
        return _this._extendSelection$2(updateDetails.globalPosition, D.SelectionChangedCause_6);
      t1 = t1.editableTextKey;
      t2 = t1.get$currentState();
      t2.toString;
      selection = t2._widget.controller._change_notifier$_value.selection;
      t2 = t1.get$currentState();
      t2.toString;
      t2 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t2._editableKey).get$renderObject();
      t2.toString;
      t3 = updateDetails.globalPosition;
      nextExtent = type$.RenderEditable._as(t2).getPositionForPoint$1(t3);
      t2 = _this._shiftTapDragSelection;
      t4 = t2.baseOffset;
      t5 = nextExtent.offset;
      isInverted = t4 < t2.extentOffset ? t5 < t4 : t5 > t4;
      if (isInverted && selection.baseOffset === t4) {
        t2 = t1.get$currentState();
        t2.toString;
        t1 = t1.get$currentState();
        t1.toString;
        t2.userUpdateTextEditingValue$2(t1._widget.controller._change_notifier$_value.copyWith$1$selection(B.TextSelection$(C.TextAffinity_1, _this._shiftTapDragSelection.extentOffset, t5, false)), D.SelectionChangedCause_6);
      } else if (!isInverted && t5 !== t4 && selection.baseOffset !== t4) {
        t2 = t1.get$currentState();
        t2.toString;
        t1 = t1.get$currentState();
        t1.toString;
        t2.userUpdateTextEditingValue$2(t1._widget.controller._change_notifier$_value.copyWith$1$selection(B.TextSelection$(C.TextAffinity_1, _this._shiftTapDragSelection.baseOffset, t5, false)), D.SelectionChangedCause_6);
      } else
        _this._extendSelection$2(t3, D.SelectionChangedCause_6);
    },
    onDragSelectionEnd$1(details) {
      if (this._isShiftTapping) {
        this._isShiftTapping = false;
        this._shiftTapDragSelection = null;
      }
    }
  };
  A.TextSelectionGestureDetector.prototype = {
    createState$0() {
      return new A._TextSelectionGestureDetectorState(C._StateLifecycle_0);
    }
  };
  A._TextSelectionGestureDetectorState.prototype = {
    dispose$0() {
      var t1 = this._text_selection$_doubleTapTimer;
      if (t1 != null)
        t1.cancel$0(0);
      t1 = this._dragUpdateThrottleTimer;
      if (t1 != null)
        t1.cancel$0(0);
      this.super$State$dispose();
    },
    _text_selection$_handleTapDown$1(details) {
      var _this = this;
      _this._widget.onTapDown.call$1(details);
      if (_this._text_selection$_doubleTapTimer != null && _this._isWithinDoubleTapTolerance$1(details.globalPosition)) {
        _this._widget.onDoubleTapDown.call$1(details);
        _this._text_selection$_doubleTapTimer.cancel$0(0);
        _this._lastTapOffset = _this._text_selection$_doubleTapTimer = null;
        _this._isDoubleTap = true;
      }
    },
    _text_selection$_handleTapUp$1(details) {
      var t1, _this = this;
      if (!_this._isDoubleTap) {
        _this._widget.onSingleTapUp.call$1(details);
        _this._lastTapOffset = details.globalPosition;
        t1 = _this._text_selection$_doubleTapTimer;
        if (t1 != null)
          t1.cancel$0(0);
        _this._text_selection$_doubleTapTimer = B.Timer_Timer(C.Duration_300000, _this.get$_doubleTapTimeout());
      }
      _this._isDoubleTap = false;
    },
    _text_selection$_handleTapCancel$0() {
      this._widget.onSingleTapCancel.call$0();
    },
    _handleDragStart$1(details) {
      this._lastDragStartDetails = details;
      this._widget.onDragSelectionStart.call$1(details);
    },
    _handleDragUpdate$1(details) {
      var _this = this;
      _this._lastDragUpdateDetails = details;
      if (_this._dragUpdateThrottleTimer == null)
        _this._dragUpdateThrottleTimer = B.Timer_Timer(C.Duration_50000, _this.get$_handleDragUpdateThrottled());
    },
    _handleDragUpdateThrottled$0() {
      var t3, _this = this,
        t1 = _this._widget.onDragSelectionUpdate,
        t2 = _this._lastDragStartDetails;
      t2.toString;
      t3 = _this._lastDragUpdateDetails;
      t3.toString;
      t1.call$2(t2, t3);
      _this._lastDragUpdateDetails = _this._dragUpdateThrottleTimer = null;
    },
    _handleDragEnd$1(details) {
      var _this = this,
        t1 = _this._dragUpdateThrottleTimer;
      if (t1 != null) {
        t1.cancel$0(0);
        _this._handleDragUpdateThrottled$0();
      }
      _this._widget.onDragSelectionEnd.call$1(details);
      _this._lastDragUpdateDetails = _this._lastDragStartDetails = _this._dragUpdateThrottleTimer = null;
    },
    _forcePressStarted$1(details) {
      var t1 = this._text_selection$_doubleTapTimer;
      if (t1 != null)
        t1.cancel$0(0);
      this._text_selection$_doubleTapTimer = null;
      t1 = this._widget.onForcePressStart;
      if (t1 != null)
        t1.call$1(details);
    },
    _forcePressEnded$1(details) {
      var t1 = this._widget.onForcePressEnd;
      if (t1 != null)
        t1.call$1(details);
    },
    _handleLongPressStart$1(details) {
      var t1;
      if (!this._isDoubleTap) {
        this._widget.toString;
        t1 = true;
      } else
        t1 = false;
      if (t1)
        this._widget.onSingleLongTapStart.call$1(details);
    },
    _handleLongPressMoveUpdate$1(details) {
      var t1;
      if (!this._isDoubleTap) {
        this._widget.toString;
        t1 = true;
      } else
        t1 = false;
      if (t1)
        this._widget.onSingleLongTapMoveUpdate.call$1(details);
    },
    _handleLongPressEnd$1(details) {
      var t1, _this = this;
      if (!_this._isDoubleTap) {
        _this._widget.toString;
        t1 = true;
      } else
        t1 = false;
      if (t1)
        _this._widget.onSingleLongTapEnd.call$1(details);
      _this._isDoubleTap = false;
    },
    _doubleTapTimeout$0() {
      this._lastTapOffset = this._text_selection$_doubleTapTimer = null;
    },
    _isWithinDoubleTapTolerance$1(secondTapOffset) {
      var t1 = this._lastTapOffset;
      if (t1 == null)
        return false;
      return secondTapOffset.$sub(0, t1).get$distance() <= 100;
    },
    build$1(context) {
      var t1, t2, _this = this,
        gestures = B.LinkedHashMap_LinkedHashMap$_empty(type$.Type, type$.GestureRecognizerFactory_GestureRecognizer);
      gestures.$indexSet(0, C.Type_TapGestureRecognizer_62h, new B.GestureRecognizerFactoryWithHandlers(new A._TextSelectionGestureDetectorState_build_closure(_this), new A._TextSelectionGestureDetectorState_build_closure0(_this), type$.GestureRecognizerFactoryWithHandlers_TapGestureRecognizer));
      _this._widget.toString;
      gestures.$indexSet(0, C.Type_LongPressGestureRecognizer_46y, new B.GestureRecognizerFactoryWithHandlers(new A._TextSelectionGestureDetectorState_build_closure1(_this), new A._TextSelectionGestureDetectorState_build_closure2(_this), type$.GestureRecognizerFactoryWithHandlers_LongPressGestureRecognizer));
      _this._widget.toString;
      gestures.$indexSet(0, C.Type_PanGestureRecognizer_bbH, new B.GestureRecognizerFactoryWithHandlers(new A._TextSelectionGestureDetectorState_build_closure3(_this), new A._TextSelectionGestureDetectorState_build_closure4(_this), type$.GestureRecognizerFactoryWithHandlers_PanGestureRecognizer));
      t1 = _this._widget;
      if (t1.onForcePressStart != null || t1.onForcePressEnd != null)
        gestures.$indexSet(0, C.Type_ForcePressGestureRecognizer_TN2, new B.GestureRecognizerFactoryWithHandlers(new A._TextSelectionGestureDetectorState_build_closure5(_this), new A._TextSelectionGestureDetectorState_build_closure6(_this), type$.GestureRecognizerFactoryWithHandlers_ForcePressGestureRecognizer));
      t1 = _this._widget;
      t2 = t1.behavior;
      return new B.RawGestureDetector(t1.child, gestures, t2, true, null, null);
    }
  };
  A.TextSelectionHandleControls.prototype = {
    buildToolbar$8(context, globalEditableRegion, textLineHeight, selectionMidpoint, endpoints, delegate, clipboardStatus, lastSecondaryTapDownPosition) {
      type$.List_TextSelectionPoint._as(endpoints);
      type$.nullable_ValueNotifier_ClipboardStatus._as(clipboardStatus);
      return C.SizedBox_0_0_null_null;
    },
    canCut$1(delegate) {
      return false;
    },
    canCopy$1(delegate) {
      return false;
    },
    canPaste$1(delegate) {
      return false;
    },
    canSelectAll$1(delegate) {
      return false;
    },
    handleCut$1(delegate) {
    },
    handleCopy$1(delegate) {
    },
    handlePaste$1(delegate) {
      var $async$goto = 0,
        $async$completer = B._makeAsyncAwaitCompleter(type$.void);
      var $async$handlePaste$1 = B._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return B._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              // implicit return
              return B._asyncReturn(null, $async$completer);
          }
      });
      return B._asyncStartSync($async$handlePaste$1, $async$completer);
    },
    handleSelectAll$1(delegate) {
    }
  };
  A.__SelectionHandleOverlayState_State_SingleTickerProviderStateMixin.prototype = {
    dispose$0() {
      var _this = this,
        t1 = _this.SingleTickerProviderStateMixin__tickerModeNotifier;
      if (t1 != null)
        t1.removeListener$1(0, _this.get$_updateTicker());
      _this.set$_tickerModeNotifier(null);
      _this.super$State$dispose();
    },
    activate$0() {
      this.super$State$activate();
      this._updateTickerModeNotifier$0();
      this._updateTicker$0();
    }
  };
  A.__SelectionToolbarWrapperState_State_SingleTickerProviderStateMixin.prototype = {
    dispose$0() {
      var _this = this,
        t1 = _this.SingleTickerProviderStateMixin__tickerModeNotifier;
      if (t1 != null)
        t1.removeListener$1(0, _this.get$_updateTicker());
      _this.set$_tickerModeNotifier(null);
      _this.super$State$dispose();
    },
    activate$0() {
      this.super$State$activate();
      this._updateTickerModeNotifier$0();
      this._updateTicker$0();
    }
  };
  A.TextSelectionToolbarAnchors.prototype = {};
  A.TextSelectionToolbarLayoutDelegate.prototype = {
    getConstraintsForChild$1(constraints) {
      return new B.BoxConstraints(0, constraints.maxWidth, 0, constraints.maxHeight);
    },
    getPositionForChild$2(size, childSize) {
      var fitsAbove = this.fitsAbove,
        anchor = fitsAbove ? this.anchorAbove : this.anchorBelow,
        t1 = A.TextSelectionToolbarLayoutDelegate__centerOn(anchor._dx, childSize._dx, size._dx),
        t2 = anchor._dy;
      return new B.Offset(t1, fitsAbove ? Math.max(0, t2 - childSize._dy) : t2);
    },
    shouldRelayout$1(oldDelegate) {
      type$.TextSelectionToolbarLayoutDelegate._as(oldDelegate);
      return !this.anchorAbove.$eq(0, oldDelegate.anchorAbove) || !this.anchorBelow.$eq(0, oldDelegate.anchorBelow) || this.fitsAbove !== oldDelegate.fitsAbove;
    }
  };
  A.WidgetSpan.prototype = {
    build$3$dimensions$textScaleFactor(builder, dimensions, textScaleFactor) {
      var t1, hasStyle, currentDimensions;
      type$.nullable_List_PlaceholderDimensions._as(dimensions);
      t1 = this.style;
      hasStyle = t1 != null;
      if (hasStyle)
        builder.pushStyle$1(t1.getTextStyle$1$textScaleFactor(textScaleFactor));
      dimensions.toString;
      t1 = builder.get$placeholderCount();
      if (!(t1 < dimensions.length))
        return B.ioore(dimensions, t1);
      currentDimensions = dimensions[t1];
      t1 = currentDimensions.size;
      builder.addPlaceholder$6$baseline$baselineOffset$scale(t1._dx, t1._dy, this.alignment, currentDimensions.baseline, currentDimensions.baselineOffset, textScaleFactor);
      if (hasStyle)
        builder.pop$0();
    },
    visitChildren$1(visitor) {
      return type$.bool_Function_InlineSpan._as(visitor).call$1(this);
    },
    getSpanForPositionVisitor$2(position, offset) {
      var t1 = offset._inline_span$_value;
      if (position.offset === t1)
        return this;
      offset._inline_span$_value = t1 + 1;
      return null;
    },
    codeUnitAtVisitor$2(index, offset) {
      ++offset._inline_span$_value;
      return 65532;
    },
    compareTo$1(_, other) {
      var t1, t2, t3, candidate, result, _this = this;
      if (_this === other)
        return C.RenderComparison_0;
      if (B.getRuntimeType(other) !== B.getRuntimeType(_this))
        return C.RenderComparison_3;
      t1 = _this.style;
      t2 = t1 == null;
      t3 = other.style;
      if (t2 !== (t3 == null))
        return C.RenderComparison_3;
      type$.WidgetSpan._as(other);
      if (!_this.child.super$Object$$eq(0, other.child) || _this.alignment !== other.alignment)
        return C.RenderComparison_3;
      if (!t2) {
        t3.toString;
        candidate = t1.compareTo$1(0, t3);
        result = candidate.index > 0 ? candidate : C.RenderComparison_0;
        if (result === C.RenderComparison_3)
          return result;
      } else
        result = C.RenderComparison_0;
      return result;
    },
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (J.get$runtimeType$(other) !== B.getRuntimeType(_this))
        return false;
      if (!_this.super$InlineSpan$$eq(0, other))
        return false;
      return other instanceof A.WidgetSpan && other.child.super$Object$$eq(0, _this.child) && other.alignment === _this.alignment && true;
    },
    get$hashCode(_) {
      var _this = this;
      return B.Object_hash(B.InlineSpan.prototype.get$hashCode.call(_this, _this), _this.child, _this.alignment, _this.baseline, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue);
    }
  };
  var typesOffset = hunkHelpers.updateTypes(["~()", "~(TapDownDetails)", "~(DragStartDetails)", "~(DragEndDetails)", "~(ForcePressDetails)", "~(bool)", "TextBoundary(DirectionalTextEditingIntent)", "~(TapUpDetails)", "Widget(BuildContext)", "~(DragUpdateDetails)", "~(String)", "~(LongPressEndDetails)", "~(LongPressStartDetails)", "~(Rect)", "~(PaintingContext,Offset)", "~(LongPressMoveUpdateDetails)", "DesktopTextSelectionToolbarButton(ContextMenuButtonItem)", "~(TextSelection)", "CupertinoTextSelectionToolbarButton(ContextMenuButtonItem)", "~(PointerEnterEvent)", "~(TransposeCharactersIntent)", "~(ReplaceTextIntent)", "~(ScrollToDocumentBoundaryIntent)", "~(PointerExitEvent)", "~(ExtendSelectionByPageIntent)", "~(UpdateSelectionIntent)", "~(ExpandSelectionToDocumentBoundaryIntent)", "~(ExpandSelectionToLineBreakIntent)", "Object?(DismissIntent)", "~(PointerDownEvent)", "Widget(BuildContext,Widget)", "CompositedTransformTarget(BuildContext,ViewportOffset)", "~(UndoTextIntent)", "Widget(BuildContext,EditableTextState)", "~(Object?)", "Null(BuildContext,MagnifierController,ValueNotifier<MagnifierInfo>)", "CupertinoDesktopTextSelectionToolbarButton(ContextMenuButtonItem)", "InputDecorator(BuildContext,Widget?)", "StatefulWidget?(BuildContext,MagnifierController,ValueNotifier<MagnifierInfo>)", "TextEditingValue(TextEditingValue,TextInputFormatter)", "_SelectionToolbarWrapper(BuildContext)", "~(TextSelection,SelectionChangedCause?)", "~(AnimationStatus)", "~(DragStartDetails,DragUpdateDetails)", "Widget(BuildContext,Offset,bool,Widget)", "~(RedoTextIntent)", "~(ScrollIntent)"]);
  A._CupertinoButtonState__animate_closure.prototype = {
    call$1(value) {
      var t1 = this.$this;
      if (t1._framework$_element != null && this.wasHeldDown !== t1._buttonHeldDown)
        t1._animate$0(0);
    },
    $signature: 17
  };
  A._CupertinoDesktopTextSelectionToolbarButtonState__onEnter_closure.prototype = {
    call$0() {
      this.$this._isHovered = true;
    },
    $signature: 0
  };
  A._CupertinoDesktopTextSelectionToolbarButtonState__onExit_closure.prototype = {
    call$0() {
      this.$this._isHovered = false;
    },
    $signature: 0
  };
  A._CupertinoTextMagnifierState_initState_closure.prototype = {
    call$0() {
      return this.$this.setState$1(new A._CupertinoTextMagnifierState_initState__closure());
    },
    $signature: 0
  };
  A._CupertinoTextMagnifierState_initState__closure.prototype = {
    call$0() {
    },
    $signature: 0
  };
  A._CupertinoTextMagnifierState__determineMagnifierPositionAndFocalPoint_closure.prototype = {
    call$0() {
      var _this = this,
        t1 = _this.$this;
      t1._currentAdjustedMagnifierPosition = _this.adjustedMagnifierPosition;
      t1._verticalFocalPointAdjustment = _this.verticalCenterOfCurrentLine - _this.verticalPositionOfLens;
    },
    $signature: 0
  };
  A.CupertinoTextSelectionControls_buildToolbar_closure.prototype = {
    call$0() {
      return this.$this.handleCut$1(this.delegate);
    },
    $signature: 0
  };
  A.CupertinoTextSelectionControls_buildToolbar_closure0.prototype = {
    call$0() {
      return this.$this.handleCopy$1(this.delegate);
    },
    $signature: 0
  };
  A.CupertinoTextSelectionControls_buildToolbar_closure1.prototype = {
    call$0() {
      return this.$this.handlePaste$1(this.delegate);
    },
    $signature: 0
  };
  A.CupertinoTextSelectionControls_buildToolbar_closure2.prototype = {
    call$0() {
      return this.$this.handleSelectAll$1(this.delegate);
    },
    $signature: 0
  };
  A._CupertinoTextSelectionControlsToolbarState_build_addToolbarButton.prototype = {
    call$2(text, onPressed) {
      var t1;
      type$.void_Function._as(onPressed);
      t1 = this.items;
      if (t1.length !== 0)
        C.JSArray_methods.add$1(t1, this.onePhysicalPixelVerticalDivider);
      C.JSArray_methods.add$1(t1, A.CupertinoTextSelectionToolbarButton$text(onPressed, text));
    },
    $signature: 385
  };
  A._RenderCupertinoTextSelectionToolbarShape_paint_closure.prototype = {
    call$2(innerContext, innerOffset) {
      var t1 = this.$this.RenderObjectWithChildMixin__child;
      t1.toString;
      return innerContext.paintChild$2(t1, innerOffset);
    },
    $signature: 11
  };
  A._CupertinoTextSelectionToolbarContentState__statusListener_closure.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = t1._nextPage;
      t2.toString;
      t1._text_selection_toolbar0$_page = t2;
      t1._nextPage = null;
    },
    $signature: 0
  };
  A._RenderCupertinoTextSelectionToolbarItems_performLayout_closure.prototype = {
    call$0() {
      return 0;
    },
    $signature: 67
  };
  A._RenderCupertinoTextSelectionToolbarItems_performLayout_closure0.prototype = {
    call$1(renderObjectChild) {
      var t3, t4, t5, paginationButtonsWidth, t6, t7, currentButtonPosition, _this = this,
        t1 = _this._box_0,
        t2 = ++t1.i;
      type$.RenderBox._as(renderObjectChild);
      t3 = renderObjectChild.parentData;
      t3.toString;
      type$.ToolbarItemsParentData._as(t3);
      t3.shouldPaint = false;
      t4 = _this.$this;
      if (renderObjectChild === t4._backButton || renderObjectChild === t4._nextButton || renderObjectChild === t4._nextButtonDisabled || t1.currentPage > t4._text_selection_toolbar0$_page)
        return;
      t5 = t1.currentPage === 0;
      if (t5)
        paginationButtonsWidth = t2 === t4.ContainerRenderObjectMixin__childCount - 1 ? 0 : t4._nextButton._size._dx;
      else
        paginationButtonsWidth = _this.subsequentPageButtonsWidth;
      t2 = t5 ? type$.BoxConstraints._as(B.RenderObject.prototype.get$constraints.call(t4)).maxWidth : _this.firstPageWidth._readLocal$0();
      if (typeof t2 !== "number")
        return t2.$sub();
      t5 = type$.BoxConstraints;
      renderObjectChild.layout$2$parentUsesSize(F.BoxConstraints$loose(new B.Size(t2 - paginationButtonsWidth, t5._as(B.RenderObject.prototype.get$constraints.call(t4)).maxHeight)), true);
      t2 = _this.greatestHeight;
      t6 = renderObjectChild._size._dy;
      t7 = t2._read$0();
      if (typeof t7 !== "number")
        return B.iae(t7);
      t2.__late_helper$_value = t6 > t7 ? renderObjectChild._size._dy : t2._read$0();
      if (t1.currentButtonPosition + paginationButtonsWidth + renderObjectChild._size._dx > t5._as(B.RenderObject.prototype.get$constraints.call(t4)).maxWidth) {
        ++t1.currentPage;
        t2 = t4._backButton._size._dx;
        t1.currentButtonPosition = t2 + t4._dividerWidth;
        t6 = t4._nextButton._size._dx;
        t7 = _this.firstPageWidth._readLocal$0();
        if (typeof t7 !== "number")
          return t7.$sub();
        renderObjectChild.layout$2$parentUsesSize(F.BoxConstraints$loose(new B.Size(t7 - (t2 + t6), t5._as(B.RenderObject.prototype.get$constraints.call(t4)).maxHeight)), true);
      }
      t2 = t1.currentButtonPosition;
      t3.offset = new B.Offset(t2, 0);
      currentButtonPosition = t1.currentButtonPosition = t2 + (renderObjectChild._size._dx + t4._dividerWidth);
      t1 = t1.currentPage;
      t2 = t1 === t4._text_selection_toolbar0$_page;
      t3.shouldPaint = t2;
      if (t1 === 0)
        _this.firstPageWidth.__late_helper$_value = currentButtonPosition + t4._nextButton._size._dx;
      if (t2)
        _this.toolbarWidth.__late_helper$_value = currentButtonPosition;
    },
    $signature: 15
  };
  A._RenderCupertinoTextSelectionToolbarItems_paint_closure.prototype = {
    call$1(renderObjectChild) {
      var t1;
      type$.RenderBox._as(renderObjectChild);
      t1 = renderObjectChild.parentData;
      t1.toString;
      type$.ToolbarItemsParentData._as(t1);
      if (t1.shouldPaint)
        this.context.paintChild$2(renderObjectChild, t1.offset.$add(0, this.offset));
    },
    $signature: 15
  };
  A._RenderCupertinoTextSelectionToolbarItems_hitTestChild_closure.prototype = {
    call$2(result, transformed) {
      return this.child.hitTest$2$position(result, transformed);
    },
    $signature: 12
  };
  A._RenderCupertinoTextSelectionToolbarItems_redepthChildren_closure.prototype = {
    call$1(renderObjectChild) {
      this.$this.redepthChild$1(type$.RenderBox._as(renderObjectChild));
    },
    $signature: 15
  };
  A._RenderCupertinoTextSelectionToolbarItems_visitChildrenForSemantics_closure.prototype = {
    call$1(renderObjectChild) {
      var t1;
      type$.RenderBox._as(renderObjectChild);
      t1 = renderObjectChild.parentData;
      t1.toString;
      if (type$.ToolbarItemsParentData._as(t1).shouldPaint)
        this.visitor.call$1(renderObjectChild);
    },
    $signature: 15
  };
  A.AdaptiveTextSelectionToolbar_getAdaptiveButtons_closure.prototype = {
    call$1(buttonItem) {
      type$.ContextMenuButtonItem._as(buttonItem);
      return A.CupertinoTextSelectionToolbarButton$text(buttonItem.onPressed, A.AdaptiveTextSelectionToolbar_getButtonLabel(this.context, buttonItem));
    },
    $signature: typesOffset + 18
  };
  A.AdaptiveTextSelectionToolbar_getAdaptiveButtons_closure0.prototype = {
    call$1(buttonItem) {
      var t1;
      type$.ContextMenuButtonItem._as(buttonItem);
      t1 = this.context;
      return A.DesktopTextSelectionToolbarButton$text(t1, buttonItem.onPressed, A.AdaptiveTextSelectionToolbar_getButtonLabel(t1, buttonItem));
    },
    $signature: typesOffset + 16
  };
  A.AdaptiveTextSelectionToolbar_getAdaptiveButtons_closure1.prototype = {
    call$1(buttonItem) {
      var t1;
      type$.ContextMenuButtonItem._as(buttonItem);
      t1 = this.context;
      return A.CupertinoDesktopTextSelectionToolbarButton$text(t1, buttonItem.onPressed, A.AdaptiveTextSelectionToolbar_getButtonLabel(t1, buttonItem));
    },
    $signature: typesOffset + 36
  };
  A._HelperErrorState__handleChange_closure.prototype = {
    call$0() {
    },
    $signature: 0
  };
  A._RenderDecoration_performLayout_centerLayout.prototype = {
    call$2(box, x) {
      var t2, t3, t4,
        t1 = box.parentData;
      t1.toString;
      type$.BoxParentData._as(t1);
      t2 = this.height._readLocal$0();
      t3 = box._size;
      t4 = t3._dy;
      if (typeof t2 !== "number")
        return t2.$sub();
      t1.offset = new B.Offset(x, (t2 - t4) / 2);
      return t3._dx;
    },
    $signature: 147
  };
  A._RenderDecoration_performLayout_baselineLayout.prototype = {
    call$2(box, x) {
      var t2, t3,
        t1 = box.parentData;
      t1.toString;
      type$.BoxParentData._as(t1);
      t2 = this.baseline._readLocal$0();
      t3 = J.$index$asx(this.layout.boxToBaseline, box);
      t3.toString;
      if (typeof t2 !== "number")
        return t2.$sub();
      if (typeof t3 !== "number")
        return B.iae(t3);
      t1.offset = new B.Offset(x, t2 - t3);
      return box._size._dx;
    },
    $signature: 147
  };
  A._RenderDecoration_paint_doPaint.prototype = {
    call$1(child) {
      var t1;
      if (child != null) {
        t1 = child.parentData;
        t1.toString;
        this.context.paintChild$2(child, type$.BoxParentData._as(t1).offset.$add(0, this.offset));
      }
    },
    $signature: 148
  };
  A._RenderDecoration_hitTestChildren_closure.prototype = {
    call$2(result, transformed) {
      return this.child.hitTest$2$position(result, transformed);
    },
    $signature: 12
  };
  A._InputDecoratorState__handleChange_closure.prototype = {
    call$0() {
    },
    $signature: 0
  };
  A._InputDecoratorDefaultsM2_hintStyle_closure.prototype = {
    call$1(states) {
      var _null = null;
      if (type$.Set_MaterialState._as(states).contains$1(0, C.MaterialState_6))
        return B.TextStyle$(_null, _null, B.Theme_of(this.$this.context).disabledColor, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, true, _null, _null, _null, _null, _null, _null, _null, _null);
      return B.TextStyle$(_null, _null, B.Theme_of(this.$this.context).hintColor, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, true, _null, _null, _null, _null, _null, _null, _null, _null);
    },
    $signature: 53
  };
  A._InputDecoratorDefaultsM2_labelStyle_closure.prototype = {
    call$1(states) {
      var _null = null;
      if (type$.Set_MaterialState._as(states).contains$1(0, C.MaterialState_6))
        return B.TextStyle$(_null, _null, B.Theme_of(this.$this.context).disabledColor, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, true, _null, _null, _null, _null, _null, _null, _null, _null);
      return B.TextStyle$(_null, _null, B.Theme_of(this.$this.context).hintColor, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, true, _null, _null, _null, _null, _null, _null, _null, _null);
    },
    $signature: 53
  };
  A._InputDecoratorDefaultsM2_floatingLabelStyle_closure.prototype = {
    call$1(states) {
      var _this = this, _null = null;
      type$.Set_MaterialState._as(states);
      if (states.contains$1(0, C.MaterialState_6))
        return B.TextStyle$(_null, _null, B.Theme_of(_this.$this.context).disabledColor, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, true, _null, _null, _null, _null, _null, _null, _null, _null);
      if (states.contains$1(0, D.MaterialState_7))
        return B.TextStyle$(_null, _null, B.Theme_of(_this.$this.context).colorScheme.error, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, true, _null, _null, _null, _null, _null, _null, _null, _null);
      if (states.contains$1(0, C.MaterialState_1))
        return B.TextStyle$(_null, _null, B.Theme_of(_this.$this.context).colorScheme.primary, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, true, _null, _null, _null, _null, _null, _null, _null, _null);
      return B.TextStyle$(_null, _null, B.Theme_of(_this.$this.context).hintColor, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, true, _null, _null, _null, _null, _null, _null, _null, _null);
    },
    $signature: 53
  };
  A._InputDecoratorDefaultsM2_helperStyle_closure.prototype = {
    call$1(states) {
      var themeData;
      type$.Set_MaterialState._as(states);
      themeData = B.Theme_of(this.$this.context);
      if (states.contains$1(0, C.MaterialState_6))
        return themeData.textTheme.bodySmall.copyWith$1$color(C.Color_0);
      return themeData.textTheme.bodySmall.copyWith$1$color(themeData.hintColor);
    },
    $signature: 53
  };
  A._InputDecoratorDefaultsM2_errorStyle_closure.prototype = {
    call$1(states) {
      var themeData;
      type$.Set_MaterialState._as(states);
      themeData = B.Theme_of(this.$this.context);
      if (states.contains$1(0, C.MaterialState_6))
        return themeData.textTheme.bodySmall.copyWith$1$color(C.Color_0);
      return themeData.textTheme.bodySmall.copyWith$1$color(themeData.colorScheme.error);
    },
    $signature: 53
  };
  A._InputDecoratorDefaultsM2_fillColor_closure.prototype = {
    call$1(states) {
      if (type$.Set_MaterialState._as(states).contains$1(0, C.MaterialState_6))
        switch (B.Theme_of(this.$this.context).colorScheme.brightness.index) {
          case 0:
            return D.Color_234881023;
          case 1:
            return D.Color_83886080;
        }
      switch (B.Theme_of(this.$this.context).colorScheme.brightness.index) {
        case 0:
          return D.Color_452984831;
        case 1:
          return I.Color_167772160;
      }
    },
    $signature: 25
  };
  A._InputDecoratorDefaultsM2_iconColor_closure.prototype = {
    call$1(states) {
      type$.Set_MaterialState._as(states);
      if (states.contains$1(0, C.MaterialState_6) && !states.contains$1(0, C.MaterialState_1))
        return B.Theme_of(this.$this.context).disabledColor;
      if (states.contains$1(0, C.MaterialState_1))
        return B.Theme_of(this.$this.context).colorScheme.primary;
      switch (B.Theme_of(this.$this.context).colorScheme.brightness.index) {
        case 0:
          return C.Color_3019898879;
        case 1:
          return D.Color_1929379840;
      }
    },
    $signature: 25
  };
  A._InputDecoratorDefaultsM2_prefixIconColor_closure.prototype = {
    call$1(states) {
      type$.Set_MaterialState._as(states);
      if (states.contains$1(0, C.MaterialState_6) && !states.contains$1(0, C.MaterialState_1))
        return B.Theme_of(this.$this.context).disabledColor;
      if (states.contains$1(0, C.MaterialState_1))
        return B.Theme_of(this.$this.context).colorScheme.primary;
      switch (B.Theme_of(this.$this.context).colorScheme.brightness.index) {
        case 0:
          return C.Color_3019898879;
        case 1:
          return D.Color_1929379840;
      }
    },
    $signature: 25
  };
  A._InputDecoratorDefaultsM2_suffixIconColor_closure.prototype = {
    call$1(states) {
      type$.Set_MaterialState._as(states);
      if (states.contains$1(0, C.MaterialState_6) && !states.contains$1(0, C.MaterialState_1))
        return B.Theme_of(this.$this.context).disabledColor;
      if (states.contains$1(0, C.MaterialState_1))
        return B.Theme_of(this.$this.context).colorScheme.primary;
      switch (B.Theme_of(this.$this.context).colorScheme.brightness.index) {
        case 0:
          return C.Color_3019898879;
        case 1:
          return D.Color_1929379840;
      }
    },
    $signature: 25
  };
  A.TextMagnifier_adaptiveMagnifierConfiguration_closure.prototype = {
    call$3(context, controller, magnifierInfo) {
      type$.BuildContext._as(context);
      type$.MagnifierController._as(controller);
      type$.ValueNotifier_MagnifierInfo._as(magnifierInfo);
      switch (B.defaultTargetPlatform().index) {
        case 2:
          return new A.CupertinoTextMagnifier(controller, magnifierInfo, null);
        case 0:
          return new A.TextMagnifier(magnifierInfo, null);
        case 1:
        case 3:
        case 4:
        case 5:
          return null;
      }
    },
    "call*": "call$3",
    $requiredArgCount: 3,
    $signature: typesOffset + 38
  };
  A._TextMagnifierState__determineMagnifierPositionAndFocalPoint_closure.prototype = {
    call$0() {
      var t1 = this.$this;
      return t1.setState$1(new A._TextMagnifierState__determineMagnifierPositionAndFocalPoint__closure(t1));
    },
    $signature: 0
  };
  A._TextMagnifierState__determineMagnifierPositionAndFocalPoint__closure.prototype = {
    call$0() {
      this.$this._positionShouldBeAnimatedTimer = null;
    },
    $signature: 0
  };
  A._TextMagnifierState__determineMagnifierPositionAndFocalPoint_closure0.prototype = {
    call$0() {
      var _this = this,
        t1 = _this.$this;
      t1._magnifierPosition = _this.finalMagnifierPosition;
      t1._positionShouldBeAnimatedTimer = _this._box_0.positionShouldBeAnimated;
      t1._extraFocalPointOffset = _this.focalPointAdjustmentForScreenBoundsAdjustment;
    },
    $signature: 0
  };
  A._TextFieldState__handleFocusChanged_closure.prototype = {
    call$0() {
    },
    $signature: 0
  };
  A._TextFieldState__handleSelectionChanged_closure.prototype = {
    call$0() {
      this.$this._showSelectionHandles = this.willShowSelectionHandles;
    },
    $signature: 0
  };
  A._TextFieldState__handleHover_closure.prototype = {
    call$0() {
      this.$this._isHovering = this.hovering;
    },
    $signature: 0
  };
  A._TextFieldState_build_closure.prototype = {
    call$0() {
      var t1 = this.$this;
      if (!t1.get$_effectiveFocusNode().get$hasFocus() && t1.get$_effectiveFocusNode().get$canRequestFocus())
        t1.get$_effectiveFocusNode().requestFocus$0();
    },
    $signature: 0
  };
  A._TextFieldState_build_closure0.prototype = {
    call$0() {
      var t1 = this.$this;
      if (!t1.get$_effectiveFocusNode().get$hasFocus() && t1.get$_effectiveFocusNode().get$canRequestFocus())
        t1.get$_effectiveFocusNode().requestFocus$0();
    },
    $signature: 0
  };
  A._TextFieldState_build_closure1.prototype = {
    call$2(context, child) {
      var t1, t2, t3, t4, t5, t6;
      type$.BuildContext._as(context);
      type$.nullable_Widget._as(child);
      t1 = this.$this;
      t2 = t1._getEffectiveDecoration$0();
      t3 = t1._widget.textAlign;
      t4 = t1._isHovering;
      t5 = this.focusNode.get$hasFocus();
      t6 = this.controller._change_notifier$_value.text;
      t1._widget.toString;
      return A.InputDecorator$(null, child, t2, false, t6.length === 0, t5, t4, t3, null);
    },
    $signature: typesOffset + 37
  };
  A._TextFieldState_build_closure3.prototype = {
    call$1($event) {
      type$.PointerEnterEvent._as($event);
      return this.$this._handleHover$1(true);
    },
    $signature: 56
  };
  A._TextFieldState_build_closure4.prototype = {
    call$1($event) {
      type$.PointerExitEvent._as($event);
      return this.$this._handleHover$1(false);
    },
    $signature: 52
  };
  A._TextFieldState_build_closure2.prototype = {
    call$2(context, child) {
      var t1, t2, t3, t4, _null = null;
      type$.BuildContext._as(context);
      type$.nullable_Widget._as(child);
      t1 = this._box_0;
      t2 = t1.semanticsMaxValueLength;
      t3 = this.$this;
      t4 = t3.get$_effectiveController()._change_notifier$_value.text;
      t4 = t4.length === 0 ? C.StringCharacters_ehH : new B.StringCharacters(t4);
      t4 = t4.get$length(t4);
      t3._widget.toString;
      return B.Semantics$(_null, _null, child, false, t4, _null, false, _null, _null, _null, _null, _null, _null, _null, t2, _null, _null, _null, t1.handleDidGainAccessibilityFocus, _null, _null, _null, new A._TextFieldState_build__closure(t3), _null, _null, _null, _null, _null, _null, _null);
    },
    $signature: 389
  };
  A._TextFieldState_build__closure.prototype = {
    call$0() {
      var t1 = this.$this;
      if (!t1.get$_effectiveController()._change_notifier$_value.selection.get$isValid())
        t1.get$_effectiveController().set$selection(A.TextSelection$collapsed(C.TextAffinity_1, t1.get$_effectiveController()._change_notifier$_value.text.length));
      t1._requestKeyboard$0();
    },
    $signature: 0
  };
  A.__TextFieldState_State_RestorationMixin_dispose_closure.prototype = {
    call$2(property, listener) {
      type$.RestorableProperty_nullable_Object._as(property);
      type$.void_Function._as(listener);
      if (!property._restoration0$_disposed)
        property.removeListener$1(0, listener);
    },
    $signature: 42
  };
  A._TextSelectionToolbarOverflowableState_build_closure.prototype = {
    call$0() {
      var t1 = this.$this;
      t1.setState$1(new A._TextSelectionToolbarOverflowableState_build__closure(t1));
    },
    $signature: 0
  };
  A._TextSelectionToolbarOverflowableState_build__closure.prototype = {
    call$0() {
      var t1 = this.$this;
      t1._overflowOpen = !t1._overflowOpen;
    },
    $signature: 0
  };
  A._TextSelectionToolbarTrailingEdgeAlignRenderBox_hitTestChildren_closure.prototype = {
    call$2(result, transformed) {
      return this.$this.RenderObjectWithChildMixin__child.hitTest$2$position(result, transformed);
    },
    $signature: 12
  };
  A._RenderTextSelectionToolbarItemsLayout__layoutChildren_closure.prototype = {
    call$1(renderObjectChild) {
      var t2, t3, t4, width,
        t1 = this._box_0;
      ++t1.i;
      t2 = this.$this;
      if (t2._lastIndexThatFits !== -1 && !t2._overflowOpen)
        return;
      type$.RenderBox._as(renderObjectChild);
      t3 = this.sizedConstraints;
      t4 = t3.maxWidth;
      renderObjectChild.layout$2$parentUsesSize(new B.BoxConstraints(0, t4, 0, t3.maxHeight), true);
      width = t1.width + renderObjectChild._size._dx;
      t1.width = width;
      if (width > t4 && t2._lastIndexThatFits === -1)
        t2._lastIndexThatFits = t1.i - 1;
    },
    $signature: 15
  };
  A._RenderTextSelectionToolbarItemsLayout__placeChildren_closure.prototype = {
    call$1(renderObjectChild) {
      var t3, t4, fitWidth, overflowHeight,
        t1 = this._box_0,
        t2 = ++t1.i;
      type$.RenderBox._as(renderObjectChild);
      t3 = renderObjectChild.parentData;
      t3.toString;
      type$.ToolbarItemsParentData._as(t3);
      if (renderObjectChild === this.navButton)
        return;
      t4 = this.$this;
      if (!t4._shouldPaintChild$2(renderObjectChild, t2)) {
        t3.shouldPaint = false;
        return;
      }
      t3.shouldPaint = true;
      if (!t4._overflowOpen) {
        t2 = t1.fitWidth;
        t3.offset = new B.Offset(t2, 0);
        t3 = renderObjectChild._size;
        fitWidth = t2 + t3._dx;
        t1.fitWidth = fitWidth;
        t1.nextSize = new B.Size(fitWidth, Math.max(t3._dy, t1.nextSize._dy));
      } else {
        t2 = t1.overflowHeight;
        t3.offset = new B.Offset(0, t2);
        t3 = renderObjectChild._size;
        overflowHeight = t2 + t3._dy;
        t1.overflowHeight = overflowHeight;
        t1.nextSize = new B.Size(Math.max(t3._dx, t1.nextSize._dx), overflowHeight);
      }
    },
    $signature: 15
  };
  A._RenderTextSelectionToolbarItemsLayout_paint_closure.prototype = {
    call$1(renderObjectChild) {
      var t1;
      type$.RenderBox._as(renderObjectChild);
      t1 = renderObjectChild.parentData;
      t1.toString;
      type$.ToolbarItemsParentData._as(t1);
      if (!t1.shouldPaint)
        return;
      this.context.paintChild$2(renderObjectChild, t1.offset.$add(0, this.offset));
    },
    $signature: 15
  };
  A._RenderTextSelectionToolbarItemsLayout_hitTestChildren_closure.prototype = {
    call$2(result, transformed) {
      return this._box_0.child.hitTest$2$position(result, transformed);
    },
    $signature: 12
  };
  A._RenderTextSelectionToolbarItemsLayout_visitChildrenForSemantics_closure.prototype = {
    call$1(renderObjectChild) {
      var t1;
      type$.RenderBox._as(renderObjectChild);
      t1 = renderObjectChild.parentData;
      t1.toString;
      if (type$.ToolbarItemsParentData._as(t1).shouldPaint)
        this.visitor.call$1(renderObjectChild);
    },
    $signature: 15
  };
  A._ShapeDecorationPainter__precache_closure.prototype = {
    call$1(shadow) {
      return type$.BoxShadow._as(shadow).toPaint$0();
    },
    $signature: 390
  };
  A._ShapeDecorationPainter__precache_closure0.prototype = {
    call$1(shadow) {
      type$.BoxShadow._as(shadow);
      return this.rect.shift$1(shadow.offset).inflate$1(shadow.spreadRadius);
    },
    $signature: 391
  };
  A._ShapeDecorationPainter__precache_closure1.prototype = {
    call$1(shadow) {
      type$.BoxShadow._as(shadow);
      return this.$this._shape_decoration$_decoration.shape.getOuterPath$2$textDirection(this.rect.shift$1(shadow.offset).inflate$1(shadow.spreadRadius), this.textDirection);
    },
    $signature: 392
  };
  A.RenderAnimatedSize_closure.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = t1.__RenderAnimatedSize__controller_F;
      t2 === $ && B.throwLateFieldNI("_controller");
      t2 = t2.__AnimationController__value_A;
      t2 === $ && B.throwLateFieldNI("_value");
      if (t2 !== t1._animated_size$_lastValue)
        t1.markNeedsLayout$0();
    },
    $signature: 0
  };
  A.RenderEditable__extractPlaceholderSpans_closure.prototype = {
    call$1(span) {
      var t1;
      if (span instanceof A.PlaceholderSpan) {
        t1 = this.$this.__RenderEditable__placeholderSpans_A;
        t1 === $ && B.throwLateFieldNI("_placeholderSpans");
        C.JSArray_methods.add$1(t1, span);
      }
      return true;
    },
    $signature: 44
  };
  A.RenderEditable_getBoxesForSelection_closure.prototype = {
    call$1(textBox) {
      type$.TextBox._as(textBox);
      return new B.Rect(textBox.left, textBox.top, textBox.right, textBox.bottom).shift$1(this.$this.get$_editable$_paintOffset());
    },
    $signature: 393
  };
  A.RenderEditable_describeSemanticsConfiguration_closure.prototype = {
    call$1(info) {
      type$.InlineSpanSemanticsInformation._as(info);
      return false;
    },
    $signature: 117
  };
  A.RenderEditable__createShowOnScreenFor_closure.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = t1._editable$_cachedChildNodes.$index(0, this.key);
      t2.toString;
      t1.showOnScreen$2$descendant$rect(t1, t2._semantics$_rect);
    },
    $signature: 0
  };
  A.RenderEditable_getRectForComposingRange_closure.prototype = {
    call$2(accum, incoming) {
      var t1;
      type$.nullable_Rect._as(accum);
      type$.TextBox._as(incoming);
      t1 = accum == null ? null : accum.expandToInclude$1(new B.Rect(incoming.left, incoming.top, incoming.right, incoming.bottom));
      return t1 == null ? new B.Rect(incoming.left, incoming.top, incoming.right, incoming.bottom) : t1;
    },
    $signature: 394
  };
  A.RenderEditable_hitTestChildren_closure.prototype = {
    call$2(result, transformed) {
      return this._box_0.child.hitTest$2$position(result, transformed);
    },
    $signature: 12
  };
  A.RenderEditable__paintContents_closure.prototype = {
    call$2(context, offset) {
      var t1 = this._box_0.child;
      t1.toString;
      context.paintChild$2(t1, offset);
    },
    $signature: 11
  };
  A.RenderFollowerLayer_hitTestChildren_closure.prototype = {
    call$2(result, position) {
      return this.$this.super$RenderProxyBoxMixin$hitTestChildren(result, position);
    },
    $signature: 12
  };
  A.FilteringTextInputFormatter__processRegion_adjustIndex.prototype = {
    call$1(originalIndex) {
      var _this = this,
        t1 = _this.regionStart,
        replacedLength = originalIndex <= t1 && originalIndex < _this.regionEnd ? 0 : _this.replacementString.length;
      return replacedLength - (C.JSInt_methods.clamp$2(originalIndex, t1, _this.regionEnd) - t1);
    },
    $signature: 73
  };
  A.Actions_invoke_closure.prototype = {
    call$1(element) {
      var _this = this,
        t1 = _this.intent,
        result = B.Actions__castAction(type$._ActionsMarker._as(element.get$widget()), t1, _this.T),
        t2 = result != null;
      if (t2 && result.isEnabled$1(0, t1))
        _this._box_0.returnValue = B.Actions__findDispatcher(element).invokeAction$3(result, t1, _this.context);
      return t2;
    },
    $signature: 49
  };
  A.ClipPath_shape_closure.prototype = {
    call$1(context) {
      return B.ClipPath$(this.child, this.clipBehavior, new B.ShapeBorderClipper(this.shape, B.Directionality_maybeOf(type$.BuildContext._as(context)), null));
    },
    $signature: 395
  };
  A.ContextMenuController_show_closure.prototype = {
    call$1(context) {
      return new B._CaptureAll(this.capturedThemes._themes, type$.Widget._as(this.contextMenuBuilder.call$1(type$.BuildContext._as(context))), null);
    },
    $signature: 2
  };
  A.EditableTextState_cutSelection_closure.prototype = {
    call$1(_) {
      var t1;
      type$.Duration._as(_);
      t1 = this.$this;
      if (t1._framework$_element != null)
        t1.bringIntoView$1(t1._widget.controller._change_notifier$_value.selection.get$extent());
    },
    $signature: 3
  };
  A.EditableTextState_pasteText_closure.prototype = {
    call$1(_) {
      var t1;
      type$.Duration._as(_);
      t1 = this.$this;
      if (t1._framework$_element != null)
        t1.bringIntoView$1(t1._widget.controller._change_notifier$_value.selection.get$extent());
    },
    $signature: 3
  };
  A.EditableTextState_buttonItemsForToolbarOptions_closure.prototype = {
    call$0() {
      this.$this.selectAll$1(D.SelectionChangedCause_5);
    },
    $signature: 0
  };
  A.EditableTextState_buttonItemsForToolbarOptions_closure0.prototype = {
    call$0() {
      this.$this.copySelection$1(D.SelectionChangedCause_5);
    },
    $signature: 0
  };
  A.EditableTextState_buttonItemsForToolbarOptions_closure1.prototype = {
    call$0() {
      this.$this.selectAll$1(D.SelectionChangedCause_5);
    },
    $signature: 0
  };
  A.EditableTextState_contextMenuButtonItems_closure.prototype = {
    call$0() {
      return this.$this.copySelection$1(D.SelectionChangedCause_5);
    },
    $signature: 0
  };
  A.EditableTextState_contextMenuButtonItems_closure0.prototype = {
    call$0() {
      return this.$this.cutSelection$1(D.SelectionChangedCause_5);
    },
    $signature: 0
  };
  A.EditableTextState_contextMenuButtonItems_closure1.prototype = {
    call$0() {
      return this.$this.pasteText$1(D.SelectionChangedCause_5);
    },
    $signature: 0
  };
  A.EditableTextState_contextMenuButtonItems_closure2.prototype = {
    call$0() {
      return this.$this.selectAll$1(D.SelectionChangedCause_5);
    },
    $signature: 0
  };
  A.EditableTextState__createSelectionOverlay_closure.prototype = {
    call$1(context) {
      var t1 = this.$this;
      return t1._widget.contextMenuBuilder.call$2(context, t1);
    },
    $signature: 2
  };
  A.EditableTextState__scheduleShowCaretOnScreen_closure.prototype = {
    call$1(_) {
      var t1, t2, t3, t4, lineHeight, bottomSpacing, handleHeight, interactiveHandleHeight, caretPadding, targetOffset, selection, rectToReveal, selectionBoxes;
      type$.Duration._as(_);
      t1 = this.$this;
      t1._showCaretOnScreenScheduled = false;
      if (t1._currentCaretRect == null || t1.get$_scrollController()._positions.length === 0)
        return;
      t2 = t1._editableKey;
      t3 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t2).get$renderObject();
      t3.toString;
      t4 = type$.RenderEditable;
      lineHeight = t4._as(t3)._editable$_textPainter.get$preferredLineHeight();
      bottomSpacing = t1._widget.scrollPadding.bottom;
      t3 = t1._selectionOverlay;
      if ((t3 == null ? null : t3.selectionControls) != null) {
        handleHeight = t3.selectionControls.getHandleSize$1(lineHeight)._dy;
        interactiveHandleHeight = Math.max(handleHeight, 48);
        bottomSpacing = Math.max(handleHeight / 2 - t1._selectionOverlay.selectionControls.getHandleAnchor$2(D.TextSelectionHandleType_2, lineHeight)._dy + interactiveHandleHeight / 2, bottomSpacing);
      }
      caretPadding = t1._widget.scrollPadding.copyWith$1$bottom(bottomSpacing);
      t3 = t1._currentCaretRect;
      t3.toString;
      targetOffset = t1._getOffsetToRevealCaret$1(t3);
      selection = t1._widget.controller._change_notifier$_value.selection;
      if (selection.start === selection.end)
        rectToReveal = targetOffset.rect;
      else {
        t3 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t2).get$renderObject();
        t3.toString;
        selectionBoxes = t4._as(t3).getBoxesForSelection$1(selection);
        rectToReveal = selection.baseOffset < selection.extentOffset ? C.JSArray_methods.get$last(selectionBoxes) : C.JSArray_methods.get$first(selectionBoxes);
      }
      t3 = targetOffset.offset;
      if (this.withAnimation) {
        t1.get$_scrollController().animateTo$3$curve$duration(t3, C.Cubic_ifx, C.Duration_100000);
        t1 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t2).get$renderObject();
        t1.toString;
        t4._as(t1).showOnScreen$3$curve$duration$rect(C.Cubic_ifx, C.Duration_100000, caretPadding.inflateRect$1(rectToReveal));
      } else {
        t1.get$_scrollController().jumpTo$1(t3);
        t1 = t1._widget.controller._change_notifier$_value.selection;
        if (t1.start === t1.end) {
          t1 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t2).get$renderObject();
          t1.toString;
          t4._as(t1).showOnScreen$1$rect(caretPadding.inflateRect$1(rectToReveal));
        }
      }
    },
    $signature: 3
  };
  A.EditableTextState_didChangeMetrics_closure.prototype = {
    call$1(_) {
      var t1;
      type$.Duration._as(_);
      t1 = this.$this._selectionOverlay;
      if (t1 != null) {
        t1._updateSelectionOverlay$0();
        t1 = t1.__TextSelectionOverlay__selectionOverlay_F;
        t1 === $ && B.throwLateFieldNI("_selectionOverlay");
        t1.markNeedsBuild$0();
      }
    },
    $signature: 3
  };
  A.EditableTextState__formatAndSetValue_closure.prototype = {
    call$2(newValue, formatter) {
      type$.TextEditingValue._as(newValue);
      return type$.TextInputFormatter._as(formatter).formatEditUpdate$2(this.$this._widget.controller._change_notifier$_value, newValue);
    },
    $signature: typesOffset + 39
  };
  A.EditableTextState__startCursorBlink_closure.prototype = {
    call$1(timer) {
      type$.Timer._as(timer);
      this.$this._onCursorTick$0();
    },
    $signature: 84
  };
  A.EditableTextState__onCursorTick_closure.prototype = {
    call$0() {
    },
    $signature: 0
  };
  A.EditableTextState__onCursorTick_closure0.prototype = {
    call$0() {
      var t1 = this.$this;
      return t1.get$_cursorBlinkOpacityController().animateWith$1(t1.get$_iosBlinkCursorSimulation())._primaryCompleter.future.whenComplete$1(type$.dynamic_Function._as(t1.get$_onCursorTick()));
    },
    $signature: 0
  };
  A.EditableTextState__onCursorTick_closure1.prototype = {
    call$1(timer) {
      type$.Timer._as(timer);
      this.$this._onCursorTick$0();
    },
    $signature: 84
  };
  A.EditableTextState__didChangeTextEditingValue_closure.prototype = {
    call$0() {
    },
    $signature: 0
  };
  A.EditableTextState__handleFocusChanged_closure.prototype = {
    call$0() {
      this.$this._currentPromptRectRange = null;
    },
    $signature: 0
  };
  A.EditableTextState__updateSizeAndTransform_closure.prototype = {
    call$1(_) {
      type$.Duration._as(_);
      return this.$this._updateSizeAndTransform$0();
    },
    $signature: 3
  };
  A.EditableTextState__updateComposingRectIfNeeded_closure.prototype = {
    call$1(_) {
      type$.Duration._as(_);
      return this.$this._updateComposingRectIfNeeded$0();
    },
    $signature: 3
  };
  A.EditableTextState__updateCaretRectIfNeeded_closure.prototype = {
    call$1(_) {
      type$.Duration._as(_);
      return this.$this._updateCaretRectIfNeeded$0();
    },
    $signature: 3
  };
  A.EditableTextState_insertTextPlaceholder_closure.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = t1._widget.controller._change_notifier$_value;
      t1._placeholderLocation = t2.text.length - t2.selection.end;
    },
    $signature: 0
  };
  A.EditableTextState_removeTextPlaceholder_closure.prototype = {
    call$0() {
      this.$this._placeholderLocation = -1;
    },
    $signature: 0
  };
  A.EditableTextState_showAutocorrectionPromptRect_closure.prototype = {
    call$0() {
      this.$this._currentPromptRectRange = new B.TextRange(this.start, this.end);
    },
    $signature: 0
  };
  A.EditableTextState__semanticsOnCopy_closure.prototype = {
    call$0() {
      this.$this.copySelection$1(D.SelectionChangedCause_5);
    },
    $signature: 0
  };
  A.EditableTextState__semanticsOnCut_closure.prototype = {
    call$0() {
      this.$this.cutSelection$1(D.SelectionChangedCause_5);
    },
    $signature: 0
  };
  A.EditableTextState__semanticsOnPaste_closure.prototype = {
    call$0() {
      var t1 = this.controls;
      if (t1 != null)
        t1.handlePaste$1(this.$this);
      this.$this.pasteText$1(D.SelectionChangedCause_5);
    },
    $signature: 0
  };
  A.EditableTextState__actions_closure.prototype = {
    call$1(intent) {
      type$.PasteTextIntent._as(intent);
      return this.$this.pasteText$1(C.SelectionChangedCause_4);
    },
    $signature: 396
  };
  A.EditableTextState_build_closure0.prototype = {
    call$1(value) {
      this.$this.userUpdateTextEditingValue$2(value, C.SelectionChangedCause_4);
    },
    $signature: 397
  };
  A.EditableTextState_build_closure.prototype = {
    call$2(context, offset) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t30, t31, t32, _null = null;
      type$.BuildContext._as(context);
      type$.ViewportOffset._as(offset);
      t1 = this.$this;
      t2 = this.controls;
      t3 = t1._semanticsOnCopy$1(t2);
      t4 = t1._semanticsOnCut$1(t2);
      t2 = t1._semanticsOnPaste$1(t2);
      t5 = t1._widget.focusNode;
      t6 = t1._editableKey;
      t7 = t1.buildTextSpan$0();
      t8 = t1._widget;
      t9 = t8.controller._change_notifier$_value;
      t8 = t8.cursorColor;
      t10 = t1.get$_cursorBlinkOpacityController().__AnimationController__value_A;
      t10 === $ && B.throwLateFieldNI("_value");
      t8 = B.Color$fromARGB(C.JSNumber_methods.round$0(255 * t10), t8.get$value(t8) >>> 16 & 255, t8.get$value(t8) >>> 8 & 255, t8.get$value(t8) & 255);
      t10 = t1._widget;
      t11 = t10.backgroundCursorColor;
      t12 = t10.readOnly;
      t10 = t10.focusNode.get$hasFocus();
      t13 = t1._widget;
      t14 = t13.maxLines;
      t15 = t13.minLines;
      t13 = t13.get$strutStyle();
      t16 = t1._widget.selectionColor;
      t17 = B.MediaQuery_textScaleFactorOf(context);
      t18 = t1._widget.textAlign;
      t19 = t1.get$_editable_text$_textDirection();
      t1._widget.toString;
      t20 = B.DefaultTextHeightBehavior_maybeOf(context);
      t21 = t1._widget;
      t22 = t21.obscuringCharacter;
      t23 = t21.cursorWidth;
      t24 = t21.cursorHeight;
      t25 = t21.cursorRadius;
      t26 = t21.cursorOffset;
      if (t26 == null)
        t26 = C.Offset_0_0;
      t27 = t21.selectionHeightStyle;
      t28 = t21.selectionWidthStyle;
      t29 = t21.paintCursorAboveText;
      if (t21.enableInteractiveSelection)
        t21 = true;
      else
        t21 = false;
      t30 = t1._framework$_element.dependOnInheritedWidgetOfExactType$1$0(type$.MediaQuery).data;
      t31 = t1._currentPromptRectRange;
      t32 = t1._widget;
      return new A.CompositedTransformTarget(t1._toolbarLayerLink, B.Semantics$(_null, _null, new A._ScribbleFocusable(new A._Editable(t7, t9, t8, t1._editable_text$_startHandleLayerLink, t1._editable_text$_endHandleLayerLink, t11, t1._cursorVisibilityNotifier, true, t12, t10, t14, t15, false, t13, t16, t17, t18, t19, _null, t22, false, t20, C.TextWidthBasis_0, offset, t1.get$_handleCaretChanged(), true, t23, t24, t25, t26, t29, t27, t28, t21, t1, t30.devicePixelRatio, t31, t32.autocorrectionTextRectColor, t32.clipBehavior, A._Editable__extractChildren(t7), t6), t5, t6, new A.EditableTextState_build__closure(t1), true, _null), false, _null, _null, false, _null, _null, _null, _null, _null, _null, _null, _null, _null, t3, t4, _null, _null, _null, t2, _null, _null, _null, _null, _null, _null, _null, _null), _null);
    },
    $signature: typesOffset + 31
  };
  A.EditableTextState_build__closure.prototype = {
    call$0() {
      var t1 = this.$this;
      t1._openInputConnection$0();
      t1._updateSelectionRects$1$force(true);
    },
    $signature: 0
  };
  A._Editable__extractChildren_closure.prototype = {
    call$1(span) {
      if (span instanceof A.WidgetSpan)
        C.JSArray_methods.add$1(this.result, span.child);
      return true;
    },
    $signature: 44
  };
  A._ScribbleFocusableState_isInScribbleRect_closure.prototype = {
    call$1(entry) {
      return type$.HitTestEntry_HitTestTarget._as(entry).target.$eq(0, this.$this.get$renderEditable());
    },
    $signature: 398
  };
  A._UpdateTextSelectionAction_invoke_collapse.prototype = {
    call$1(selection) {
      var t1 = this.intent.forward,
        t2 = t1 ? selection.end : selection.start;
      return selection.copyWith$2$baseOffset$extentOffset(t2, t1 ? selection.end : selection.start);
    },
    $signature: 399
  };
  A._throttle_closure.prototype = {
    call$1(currentArg) {
      var t2, t3, _this = this,
        t1 = _this.arg;
      t1.__late_helper$_value = _this.T._as(currentArg);
      t2 = _this._box_0;
      t3 = t2.timer;
      if (t3 != null) {
        t2.calledDuringTimer = true;
        return t3;
      }
      t2.calledDuringTimer = false;
      return t2.timer = B.Timer_Timer(_this.duration, new A._throttle__closure(t2, _this.leadingEdge, _this.$function, t1));
    },
    $signature() {
      return this.T._eval$1("Timer(0)");
    }
  };
  A._throttle__closure.prototype = {
    call$0() {
      this.$function.call$1(this.arg._readLocal$0());
      this._box_0.timer = null;
    },
    $signature: 0
  };
  A._AnimatedPositionedState_forEachTween_closure.prototype = {
    call$1(value) {
      return new B.Tween(B._asDouble(value), null, type$.Tween_double);
    },
    $signature: 32
  };
  A._AnimatedPositionedState_forEachTween_closure0.prototype = {
    call$1(value) {
      return new B.Tween(B._asDouble(value), null, type$.Tween_double);
    },
    $signature: 32
  };
  A._AnimatedPositionedState_forEachTween_closure1.prototype = {
    call$1(value) {
      return new B.Tween(B._asDouble(value), null, type$.Tween_double);
    },
    $signature: 32
  };
  A._AnimatedPositionedState_forEachTween_closure2.prototype = {
    call$1(value) {
      return new B.Tween(B._asDouble(value), null, type$.Tween_double);
    },
    $signature: 32
  };
  A._AnimatedPositionedState_forEachTween_closure3.prototype = {
    call$1(value) {
      return new B.Tween(B._asDouble(value), null, type$.Tween_double);
    },
    $signature: 32
  };
  A._AnimatedPositionedState_forEachTween_closure4.prototype = {
    call$1(value) {
      return new B.Tween(B._asDouble(value), null, type$.Tween_double);
    },
    $signature: 32
  };
  A.TextMagnifierConfiguration_magnifierBuilder_closure.prototype = {
    call$3(_, __, ___) {
      type$.BuildContext._as(_);
      type$.MagnifierController._as(__);
      type$.ValueNotifier_MagnifierInfo._as(___);
      return null;
    },
    "call*": "call$3",
    $requiredArgCount: 3,
    $signature: typesOffset + 35
  };
  A.MagnifierController_show_closure.prototype = {
    call$1(context) {
      return new B._CaptureAll(this.capturedThemes._themes, type$.Widget._as(this.builder.call$1(type$.BuildContext._as(context))), null);
    },
    $signature: 2
  };
  A.DefaultTextStyle_merge_closure.prototype = {
    call$1(context) {
      var t2, t3, _this = this,
        t1 = type$.BuildContext._as(context).dependOnInheritedWidgetOfExactType$1$0(type$.DefaultTextStyle);
      if (t1 == null)
        t1 = C.DefaultTextStyle_MTi;
      t2 = t1.style.merge$1(_this.style);
      t3 = _this.overflow;
      if (t3 == null)
        t3 = t1.overflow;
      return B.DefaultTextStyle$(_this.child, _this.key, t1.maxLines, t3, t1.softWrap, t2, t1.textAlign, null, t1.textWidthBasis);
    },
    $signature: 400
  };
  A.SelectionOverlay_showMagnifier_closure.prototype = {
    call$1(_) {
      return this.builtMagnifier;
    },
    $signature: 2
  };
  A.SelectionOverlay_showToolbar_closure.prototype = {
    call$1(context) {
      var t1 = B.MatrixUtils_transformPoint(this.renderBox.getTransformTo$1(0, null), C.Offset_0_0);
      return new A._SelectionToolbarWrapper(this.contextMenuBuilder.call$1(context), new B.Offset(-t1._dx, -t1._dy), this.$this.toolbarLayerLink, null, null);
    },
    $signature: typesOffset + 40
  };
  A.SelectionOverlay_markNeedsBuild_closure.prototype = {
    call$1(duration) {
      var t1, t2;
      type$.Duration._as(duration);
      t1 = this.$this;
      t1._buildScheduled = false;
      t2 = t1._handles;
      if (t2 != null) {
        t2[0].markNeedsBuild$0();
        t1._handles[1].markNeedsBuild$0();
      }
      t2 = t1._toolbar;
      if (t2 != null)
        t2.markNeedsBuild$0();
      if ($.ContextMenuController__shownInstance === t1._contextMenuController) {
        t1 = $.ContextMenuController__menuOverlayEntry;
        if (t1 != null)
          t1.markNeedsBuild$0();
      }
    },
    $signature: 3
  };
  A.SelectionOverlay__buildToolbar_closure.prototype = {
    call$1(context) {
      var t1 = this.$this;
      return t1.selectionControls.buildToolbar$8(type$.BuildContext._as(context), this.editingRegion, t1._lineHeightAtStart, this.midpoint, t1._selectionEndpoints, t1.selectionDelegate, t1.clipboardStatus, t1._toolbarLocation);
    },
    $signature: 2
  };
  A._SelectionHandleOverlayState_build_closure.prototype = {
    call$0() {
      return B.PanGestureRecognizer$(this.$this, B.LinkedHashSet_LinkedHashSet$_literal([C.PointerDeviceKind_0, C.PointerDeviceKind_2, C.PointerDeviceKind_5], type$.PointerDeviceKind));
    },
    $signature: 63
  };
  A._SelectionHandleOverlayState_build_closure0.prototype = {
    call$1(instance) {
      var t1, t2;
      type$.PanGestureRecognizer._as(instance);
      t1 = this.$this;
      t2 = t1._widget;
      instance.dragStartBehavior = t2.dragStartBehavior;
      instance.set$onStart(0, t2.onSelectionHandleDragStart);
      instance.set$onUpdate(t1._widget.onSelectionHandleDragUpdate);
      instance.set$onEnd(0, t1._widget.onSelectionHandleDragEnd);
    },
    $signature: 58
  };
  A._TextSelectionGestureDetectorState_build_closure.prototype = {
    call$0() {
      return B.TapGestureRecognizer$(this.$this, null);
    },
    $signature: 78
  };
  A._TextSelectionGestureDetectorState_build_closure0.prototype = {
    call$1(instance) {
      var t1;
      type$.TapGestureRecognizer._as(instance);
      t1 = this.$this;
      instance.set$onSecondaryTap(t1._widget.onSecondaryTap);
      instance.set$onSecondaryTapDown(t1._widget.onSecondaryTapDown);
      instance.set$onTapDown(t1.get$_text_selection$_handleTapDown());
      instance.set$onTapUp(t1.get$_text_selection$_handleTapUp());
      instance.set$onTapCancel(t1.get$_text_selection$_handleTapCancel());
    },
    $signature: 81
  };
  A._TextSelectionGestureDetectorState_build_closure1.prototype = {
    call$0() {
      return B.LongPressGestureRecognizer$(this.$this, null, C.PointerDeviceKind_0, null);
    },
    $signature: 83
  };
  A._TextSelectionGestureDetectorState_build_closure2.prototype = {
    call$1(instance) {
      var t1;
      type$.LongPressGestureRecognizer._as(instance);
      t1 = this.$this;
      instance.set$onLongPressStart(t1.get$_handleLongPressStart());
      instance.set$onLongPressMoveUpdate(t1.get$_handleLongPressMoveUpdate());
      instance.set$onLongPressEnd(t1.get$_handleLongPressEnd());
    },
    $signature: 82
  };
  A._TextSelectionGestureDetectorState_build_closure3.prototype = {
    call$0() {
      return B.PanGestureRecognizer$(this.$this, B.LinkedHashSet_LinkedHashSet$_literal([C.PointerDeviceKind_1], type$.PointerDeviceKind));
    },
    $signature: 63
  };
  A._TextSelectionGestureDetectorState_build_closure4.prototype = {
    call$1(instance) {
      var t1;
      type$.PanGestureRecognizer._as(instance);
      instance.dragStartBehavior = C.DragStartBehavior_0;
      t1 = this.$this;
      instance.set$onStart(0, t1.get$_handleDragStart());
      instance.set$onUpdate(t1.get$_handleDragUpdate());
      instance.set$onEnd(0, t1.get$_handleDragEnd());
    },
    $signature: 58
  };
  A._TextSelectionGestureDetectorState_build_closure5.prototype = {
    call$0() {
      return B.ForcePressGestureRecognizer$(this.$this, null);
    },
    $signature: 136
  };
  A._TextSelectionGestureDetectorState_build_closure6.prototype = {
    call$1(instance) {
      var t1;
      type$.ForcePressGestureRecognizer._as(instance);
      t1 = this.$this;
      instance.set$onStart(0, t1._widget.onForcePressStart != null ? t1.get$_forcePressStarted() : null);
      instance.set$onEnd(0, t1._widget.onForcePressEnd != null ? t1.get$_forcePressEnded() : null);
    },
    $signature: 137
  };
  (function aliases() {
    var _ = A.__CupertinoButtonState_State_SingleTickerProviderStateMixin.prototype;
    _.super$__CupertinoButtonState_State_SingleTickerProviderStateMixin$dispose = _.dispose$0;
    _ = A.__CupertinoTextMagnifierState_State_SingleTickerProviderStateMixin.prototype;
    _.super$__CupertinoTextMagnifierState_State_SingleTickerProviderStateMixin$dispose = _.dispose$0;
    _ = A.__CupertinoTextSelectionToolbarContentState_State_TickerProviderStateMixin.prototype;
    _.super$__CupertinoTextSelectionToolbarContentState_State_TickerProviderStateMixin$dispose = _.dispose$0;
    _ = A.__RenderCupertinoTextSelectionToolbarItems_RenderBox_ContainerRenderObjectMixin.prototype;
    _.super$__RenderCupertinoTextSelectionToolbarItems_RenderBox_ContainerRenderObjectMixin$attach = _.attach$1;
    _.super$__RenderCupertinoTextSelectionToolbarItems_RenderBox_ContainerRenderObjectMixin$detach = _.detach$0;
    _ = A.__BorderContainerState_State_TickerProviderStateMixin.prototype;
    _.super$__BorderContainerState_State_TickerProviderStateMixin$dispose = _.dispose$0;
    _ = A.__HelperErrorState_State_SingleTickerProviderStateMixin.prototype;
    _.super$__HelperErrorState_State_SingleTickerProviderStateMixin$dispose = _.dispose$0;
    _ = A.__InputDecoratorState_State_TickerProviderStateMixin.prototype;
    _.super$__InputDecoratorState_State_TickerProviderStateMixin$dispose = _.dispose$0;
    _ = A.__TextFieldState_State_RestorationMixin.prototype;
    _.super$__TextFieldState_State_RestorationMixin$didUpdateWidget = _.didUpdateWidget$1;
    _.super$__TextFieldState_State_RestorationMixin$didChangeDependencies = _.didChangeDependencies$0;
    _.super$__TextFieldState_State_RestorationMixin$dispose = _.dispose$0;
    _ = A.ShapeDecoration.prototype;
    _.super$ShapeDecoration$$eq = _.$eq;
    _ = A._RenderEditable_RenderBox_RelayoutWhenSystemFontsChangeMixin.prototype;
    _.super$_RenderEditable_RenderBox_RelayoutWhenSystemFontsChangeMixin$attach = _.attach$1;
    _.super$_RenderEditable_RenderBox_RelayoutWhenSystemFontsChangeMixin$detach = _.detach$0;
    _ = A._RenderEditable_RenderBox_RelayoutWhenSystemFontsChangeMixin_ContainerRenderObjectMixin.prototype;
    _.super$_RenderEditable_RenderBox_RelayoutWhenSystemFontsChangeMixin_ContainerRenderObjectMixin$attach = _.attach$1;
    _.super$_RenderEditable_RenderBox_RelayoutWhenSystemFontsChangeMixin_ContainerRenderObjectMixin$detach = _.detach$0;
    _ = A._EditableTextState_State_AutomaticKeepAliveClientMixin.prototype;
    _.super$_EditableTextState_State_AutomaticKeepAliveClientMixin$initState = _.initState$0;
    _ = A._EditableTextState_State_AutomaticKeepAliveClientMixin_WidgetsBindingObserver_TickerProviderStateMixin.prototype;
    _.super$_EditableTextState_State_AutomaticKeepAliveClientMixin_WidgetsBindingObserver_TickerProviderStateMixin$dispose = _.dispose$0;
    _ = A.RestorableListenable.prototype;
    _.super$RestorableListenable$initWithValue = _.initWithValue$1;
    _.super$RestorableListenable$dispose = _.dispose$0;
    _ = A.TextSelectionGestureDetectorBuilder.prototype;
    _.super$TextSelectionGestureDetectorBuilder$onForcePressStart = _.onForcePressStart$1;
    _.super$TextSelectionGestureDetectorBuilder$onSingleTapUp = _.onSingleTapUp$1;
    _.super$TextSelectionGestureDetectorBuilder$onSingleLongTapStart = _.onSingleLongTapStart$1;
    _ = A.__SelectionHandleOverlayState_State_SingleTickerProviderStateMixin.prototype;
    _.super$__SelectionHandleOverlayState_State_SingleTickerProviderStateMixin$dispose = _.dispose$0;
    _ = A.__SelectionToolbarWrapperState_State_SingleTickerProviderStateMixin.prototype;
    _.super$__SelectionToolbarWrapperState_State_SingleTickerProviderStateMixin$dispose = _.dispose$0;
  })();
  (function installTearOffs() {
    var _instance_1_u = hunkHelpers._instance_1u,
      _instance_0_u = hunkHelpers._instance_0u,
      _static = hunkHelpers.installStaticTearOff,
      _instance_2_u = hunkHelpers._instance_2u,
      _static_2 = hunkHelpers._static_2;
    var _;
    _instance_1_u(_ = A._CupertinoButtonState.prototype, "get$_handleTapDown", "_handleTapDown$1", 1);
    _instance_1_u(_, "get$_handleTapUp", "_handleTapUp$1", 7);
    _instance_0_u(_, "get$_handleTapCancel", "_handleTapCancel$0", 0);
    _instance_1_u(_ = A._CupertinoDesktopTextSelectionToolbarButtonState.prototype, "get$_onEnter", "_onEnter$1", 19);
    _instance_1_u(_, "get$_onExit", "_onExit$1", 23);
    _instance_0_u(A._CupertinoTextMagnifierState.prototype, "get$_magnifier0$_determineMagnifierPositionAndFocalPoint", "_magnifier0$_determineMagnifierPositionAndFocalPoint$0", 0);
    _static(A, "text_selection_toolbar0_CupertinoTextSelectionToolbar__defaultToolbarBuilder$closure", 4, null, ["call$4"], ["CupertinoTextSelectionToolbar__defaultToolbarBuilder"], 44, 0);
    _instance_0_u(_ = A._CupertinoTextSelectionToolbarContentState.prototype, "get$_handleNextPage", "_handleNextPage$0", 0);
    _instance_0_u(_, "get$_handlePreviousPage", "_handlePreviousPage$0", 0);
    _instance_1_u(_, "get$_statusListener", "_statusListener$1", 42);
    _instance_0_u(A._HelperErrorState.prototype, "get$_input_decorator$_handleChange", "_input_decorator$_handleChange$0", 0);
    _instance_2_u(A._RenderDecoration.prototype, "get$_paintLabel", "_paintLabel$2", 14);
    _instance_0_u(A._InputDecoratorState.prototype, "get$_input_decorator$_handleChange", "_input_decorator$_handleChange$0", 0);
    _instance_0_u(A._TextMagnifierState.prototype, "get$_determineMagnifierPositionAndFocalPoint", "_determineMagnifierPositionAndFocalPoint$0", 0);
    _static_2(A, "text_field_TextField__defaultContextMenuBuilder$closure", "TextField__defaultContextMenuBuilder", 33);
    _instance_1_u(_ = A._TextFieldSelectionGestureDetectorBuilder.prototype, "get$onForcePressStart", "onForcePressStart$1", 4);
    _instance_1_u(_, "get$onForcePressEnd", "onForcePressEnd$1", 4);
    _instance_1_u(_, "get$onSingleTapUp", "onSingleTapUp$1", 7);
    _instance_1_u(_, "get$onSingleLongTapStart", "onSingleLongTapStart$1", 12);
    _instance_0_u(_ = A._TextFieldState.prototype, "get$_text_field$_handleFocusChanged", "_text_field$_handleFocusChanged$0", 0);
    _instance_2_u(_, "get$_handleSelectionChanged", "_handleSelectionChanged$2", 41);
    _instance_0_u(_, "get$_handleSelectionHandleTapped", "_handleSelectionHandleTapped$0", 0);
    _static_2(A, "text_selection_toolbar_TextSelectionToolbar__defaultToolbarBuilder$closure", "TextSelectionToolbar__defaultToolbarBuilder", 30);
    _instance_1_u(_ = A.RenderEditable.prototype, "get$_onCaretChanged", "_onCaretChanged$1", 13);
    _instance_0_u(_, "get$markNeedsPaint", "markNeedsPaint$0", 0);
    _instance_0_u(_, "get$systemFontsDidChange", "systemFontsDidChange$0", 0);
    _instance_0_u(_, "get$_showHideCursor", "_showHideCursor$0", 0);
    _instance_1_u(_, "get$_handleSetText", "_handleSetText$1", 10);
    _instance_1_u(_, "get$_handleSetSelection", "_handleSetSelection$1", 17);
    _instance_1_u(_, "get$_handleMoveCursorForwardByCharacter", "_handleMoveCursorForwardByCharacter$1", 5);
    _instance_1_u(_, "get$_handleMoveCursorBackwardByCharacter", "_handleMoveCursorBackwardByCharacter$1", 5);
    _instance_1_u(_, "get$_handleMoveCursorForwardByWord", "_handleMoveCursorForwardByWord$1", 5);
    _instance_1_u(_, "get$_handleMoveCursorBackwardByWord", "_handleMoveCursorBackwardByWord$1", 5);
    _instance_1_u(_, "get$_editable$_handleTapDown", "_editable$_handleTapDown$1", 1);
    _instance_0_u(_, "get$_editable$_handleTap", "_editable$_handleTap$0", 0);
    _instance_0_u(_, "get$_handleLongPress", "_handleLongPress$0", 0);
    _instance_2_u(_, "get$_editable$_paintContents", "_editable$_paintContents$2", 14);
    _instance_0_u(_ = A.EditableTextState.prototype, "get$_onFloatingCursorResetTick", "_onFloatingCursorResetTick$0", 0);
    _instance_0_u(_, "get$_restartConnectionIfNeeded", "_restartConnectionIfNeeded$0", 0);
    _instance_0_u(_, "get$_onEditableScroll", "_onEditableScroll$0", 0);
    _instance_1_u(_, "get$_handleCaretChanged", "_handleCaretChanged$1", 13);
    _instance_0_u(_, "get$_onCursorColorTick", "_onCursorColorTick$0", 0);
    _instance_0_u(_, "get$_onCursorTick", "_onCursorTick$0", 0);
    _instance_0_u(_, "get$_didChangeTextEditingValue", "_didChangeTextEditingValue$0", 0);
    _instance_0_u(_, "get$_editable_text$_handleFocusChanged", "_editable_text$_handleFocusChanged$0", 0);
    _instance_1_u(_, "get$performSelector", "performSelector$1", 10);
    _instance_1_u(_, "get$_characterBoundary", "_characterBoundary$1", 6);
    _instance_1_u(_, "get$_nextWordBoundary", "_nextWordBoundary$1", 6);
    _instance_1_u(_, "get$_linebreak", "_linebreak$1", 6);
    _instance_1_u(_, "get$_documentBoundary", "_documentBoundary$1", 6);
    _instance_1_u(_, "get$_transposeCharacters", "_transposeCharacters$1", 20);
    _instance_1_u(_, "get$_replaceText", "_replaceText$1", 21);
    _instance_1_u(_, "get$_scrollToDocumentBoundary", "_scrollToDocumentBoundary$1", 22);
    _instance_1_u(_, "get$_scroll", "_scroll$1", 46);
    _instance_1_u(_, "get$_extendSelectionByPage", "_extendSelectionByPage$1", 24);
    _instance_1_u(_, "get$_updateSelection", "_updateSelection$1", 25);
    _instance_1_u(_, "get$_expandSelectionToDocumentBoundary", "_expandSelectionToDocumentBoundary$1", 26);
    _instance_1_u(_, "get$_expandSelectionToLinebreak", "_expandSelectionToLinebreak$1", 27);
    _instance_1_u(_, "get$_hideToolbarIfVisible", "_hideToolbarIfVisible$1", 28);
    _instance_1_u(_, "get$_defaultOnTapOutside", "_defaultOnTapOutside$1", 29);
    _instance_1_u(_ = A._TextEditingHistoryState.prototype, "get$_undo", "_undo$1", 32);
    _instance_1_u(_, "get$_redo", "_redo$1", 45);
    _instance_0_u(_, "get$_push", "_push$0", 0);
    _instance_1_u(A._UndoStack.prototype, "get$push", "push$1", 34);
    _instance_0_u(A.RestorableListenable.prototype, "get$dispose", "dispose$0", 0);
    _instance_0_u(A.RestorableChangeNotifier.prototype, "get$dispose", "dispose$0", 0);
    _instance_0_u(_ = A.TextSelectionOverlay.prototype, "get$_updateTextSelectionOverlayVisibilities", "_updateTextSelectionOverlayVisibilities$0", 0);
    _instance_1_u(_, "get$_handleSelectionEndHandleDragStart", "_handleSelectionEndHandleDragStart$1", 2);
    _instance_1_u(_, "get$_handleSelectionEndHandleDragUpdate", "_handleSelectionEndHandleDragUpdate$1", 9);
    _instance_1_u(_, "get$_handleSelectionStartHandleDragStart", "_handleSelectionStartHandleDragStart$1", 2);
    _instance_1_u(_, "get$_handleSelectionStartHandleDragUpdate", "_handleSelectionStartHandleDragUpdate$1", 9);
    _instance_1_u(_, "get$_handleAnyDragEnd", "_handleAnyDragEnd$1", 3);
    _instance_1_u(_ = A.SelectionOverlay.prototype, "get$_handleStartHandleDragStart", "_handleStartHandleDragStart$1", 2);
    _instance_1_u(_, "get$_handleStartHandleDragEnd", "_handleStartHandleDragEnd$1", 3);
    _instance_1_u(_, "get$_handleEndHandleDragStart", "_handleEndHandleDragStart$1", 2);
    _instance_1_u(_, "get$_handleEndHandleDragEnd", "_handleEndHandleDragEnd$1", 3);
    _instance_1_u(_, "get$_buildStartHandle", "_buildStartHandle$1", 8);
    _instance_1_u(_, "get$_buildEndHandle", "_buildEndHandle$1", 8);
    _instance_1_u(_, "get$_buildToolbar", "_buildToolbar$1", 8);
    _instance_0_u(A._SelectionToolbarWrapperState.prototype, "get$_toolbarVisibilityChanged", "_toolbarVisibilityChanged$0", 0);
    _instance_0_u(A._SelectionHandleOverlayState.prototype, "get$_handleVisibilityChanged", "_handleVisibilityChanged$0", 0);
    _instance_1_u(_ = A.TextSelectionGestureDetectorBuilder.prototype, "get$onTapDown", "onTapDown$1", 1);
    _instance_0_u(_, "get$onSingleTapCancel", "onSingleTapCancel$0", 0);
    _instance_1_u(_, "get$onSingleLongTapMoveUpdate", "onSingleLongTapMoveUpdate$1", 15);
    _instance_1_u(_, "get$onSingleLongTapEnd", "onSingleLongTapEnd$1", 11);
    _instance_0_u(_, "get$onSecondaryTap", "onSecondaryTap$0", 0);
    _instance_1_u(_, "get$onSecondaryTapDown", "onSecondaryTapDown$1", 1);
    _instance_1_u(_, "get$onDoubleTapDown", "onDoubleTapDown$1", 1);
    _instance_1_u(_, "get$onDragSelectionStart", "onDragSelectionStart$1", 2);
    _instance_2_u(_, "get$onDragSelectionUpdate", "onDragSelectionUpdate$2", 43);
    _instance_1_u(_, "get$onDragSelectionEnd", "onDragSelectionEnd$1", 3);
    _instance_1_u(_ = A._TextSelectionGestureDetectorState.prototype, "get$_text_selection$_handleTapDown", "_text_selection$_handleTapDown$1", 1);
    _instance_1_u(_, "get$_text_selection$_handleTapUp", "_text_selection$_handleTapUp$1", 7);
    _instance_0_u(_, "get$_text_selection$_handleTapCancel", "_text_selection$_handleTapCancel$0", 0);
    _instance_1_u(_, "get$_handleDragStart", "_handleDragStart$1", 2);
    _instance_1_u(_, "get$_handleDragUpdate", "_handleDragUpdate$1", 9);
    _instance_0_u(_, "get$_handleDragUpdateThrottled", "_handleDragUpdateThrottled$0", 0);
    _instance_1_u(_, "get$_handleDragEnd", "_handleDragEnd$1", 3);
    _instance_1_u(_, "get$_forcePressStarted", "_forcePressStarted$1", 4);
    _instance_1_u(_, "get$_forcePressEnded", "_forcePressEnded$1", 4);
    _instance_1_u(_, "get$_handleLongPressStart", "_handleLongPressStart$1", 12);
    _instance_1_u(_, "get$_handleLongPressMoveUpdate", "_handleLongPressMoveUpdate$1", 15);
    _instance_1_u(_, "get$_handleLongPressEnd", "_handleLongPressEnd$1", 11);
    _instance_0_u(_, "get$_doubleTapTimeout", "_doubleTapTimeout$0", 0);
  })();
  (function inheritance() {
    var _mixinHard = hunkHelpers.mixinHard,
      _mixin = hunkHelpers.mixin,
      _inheritMany = hunkHelpers.inheritMany,
      _inherit = hunkHelpers.inherit;
    _inheritMany(B.Object, [A._InitializedCell, A.TextSelectionControls, A._Decoration, A._RenderDecorationLayout, A.InputDecoration, A.TextSelectionGestureDetectorBuilder, A.TextAlignVertical, A._StrutStyle_Object_Diagnosticable, A.TextSelectionPoint, A.LayerLink, A.AutofillConfiguration, A.ClipboardData, A.SuggestionSpan, A.SpellCheckResults, A.DefaultSpellCheckService, A.TextInputFormatter, A._MutableTextRange, A._TextEditingValueAccumulator, A.TextInputConfiguration, A.TextSelectionDelegate, A.TextInputClient, A.SelectionRect, A.TextInputConnection, A.ContextMenuButtonItem, A.ContextMenuController, A.ToolbarOptions, A._KeyFrame, A._ScribbleCacheKey, A._UndoStack, A._GlyphHeights, A.MagnifierInfo, A.TextMagnifierConfiguration, A.MagnifierController, A.SlottedMultiChildRenderObjectWidgetMixin, A.SlottedContainerRenderObjectMixin, A.SpellCheckConfiguration, A.TextSelectionOverlay, A.SelectionOverlay, A.TextSelectionHandleControls, A.TextSelectionToolbarAnchors]);
    _inheritMany(B._Enum, [A.PathOperation, A._CupertinoTextSelectionToolbarItemsSlot, A._DecorationSlot, A._TextSelectionToolbarItemPosition, A.RenderAnimatedSizeState, A.MaxLengthEnforcement, A.SmartDashesType, A.SmartQuotesType, A.TextCapitalization0, A.ContextMenuButtonType]);
    _inherit(A.ThreePointCubic, B.Curve);
    _inheritMany(B.Tween, [A.SizeTween, A._InputBorderTween]);
    _inheritMany(B.StatefulWidget, [A.CupertinoButton, A.CupertinoDesktopTextSelectionToolbarButton, A.CupertinoTextMagnifier, A._CupertinoTextSelectionControlsToolbar, A._CupertinoTextSelectionToolbarContent, A._BorderContainer, A._HelperError, A.InputDecorator, A.TextMagnifier, A.TextField, A._TextSelectionToolbarOverflowable, A.AnimatedSize, A.EditableText, A._ScribbleFocusable, A._TextEditingHistory, A._SelectionToolbarWrapper, A._SelectionHandleOverlay, A.TextSelectionGestureDetector]);
    _inheritMany(B.State, [A.__CupertinoButtonState_State_SingleTickerProviderStateMixin, A._CupertinoDesktopTextSelectionToolbarButtonState, A.__CupertinoTextMagnifierState_State_SingleTickerProviderStateMixin, A._CupertinoTextSelectionControlsToolbarState, A.__CupertinoTextSelectionToolbarContentState_State_TickerProviderStateMixin, A.__BorderContainerState_State_TickerProviderStateMixin, A.__HelperErrorState_State_SingleTickerProviderStateMixin, A.__InputDecoratorState_State_TickerProviderStateMixin, A._TextMagnifierState, A.__TextFieldState_State_RestorationMixin, A.__TextSelectionToolbarOverflowableState_State_TickerProviderStateMixin, A.__AnimatedSizeState_State_SingleTickerProviderStateMixin, A._EditableTextState_State_AutomaticKeepAliveClientMixin, A._ScribbleFocusableState, A._TextEditingHistoryState, A.__SelectionToolbarWrapperState_State_SingleTickerProviderStateMixin, A.__SelectionHandleOverlayState_State_SingleTickerProviderStateMixin, A._TextSelectionGestureDetectorState]);
    _inherit(A._CupertinoButtonState, A.__CupertinoButtonState_State_SingleTickerProviderStateMixin);
    _inheritMany(B.Closure, [A._CupertinoButtonState__animate_closure, A._RenderCupertinoTextSelectionToolbarItems_performLayout_closure0, A._RenderCupertinoTextSelectionToolbarItems_paint_closure, A._RenderCupertinoTextSelectionToolbarItems_redepthChildren_closure, A._RenderCupertinoTextSelectionToolbarItems_visitChildrenForSemantics_closure, A.AdaptiveTextSelectionToolbar_getAdaptiveButtons_closure, A.AdaptiveTextSelectionToolbar_getAdaptiveButtons_closure0, A.AdaptiveTextSelectionToolbar_getAdaptiveButtons_closure1, A._RenderDecoration_paint_doPaint, A._InputDecoratorDefaultsM2_hintStyle_closure, A._InputDecoratorDefaultsM2_labelStyle_closure, A._InputDecoratorDefaultsM2_floatingLabelStyle_closure, A._InputDecoratorDefaultsM2_helperStyle_closure, A._InputDecoratorDefaultsM2_errorStyle_closure, A._InputDecoratorDefaultsM2_fillColor_closure, A._InputDecoratorDefaultsM2_iconColor_closure, A._InputDecoratorDefaultsM2_prefixIconColor_closure, A._InputDecoratorDefaultsM2_suffixIconColor_closure, A.TextMagnifier_adaptiveMagnifierConfiguration_closure, A._TextFieldState_build_closure3, A._TextFieldState_build_closure4, A._RenderTextSelectionToolbarItemsLayout__layoutChildren_closure, A._RenderTextSelectionToolbarItemsLayout__placeChildren_closure, A._RenderTextSelectionToolbarItemsLayout_paint_closure, A._RenderTextSelectionToolbarItemsLayout_visitChildrenForSemantics_closure, A._ShapeDecorationPainter__precache_closure, A._ShapeDecorationPainter__precache_closure0, A._ShapeDecorationPainter__precache_closure1, A.RenderEditable__extractPlaceholderSpans_closure, A.RenderEditable_getBoxesForSelection_closure, A.RenderEditable_describeSemanticsConfiguration_closure, A.FilteringTextInputFormatter__processRegion_adjustIndex, A.Actions_invoke_closure, A.ClipPath_shape_closure, A.ContextMenuController_show_closure, A.EditableTextState_cutSelection_closure, A.EditableTextState_pasteText_closure, A.EditableTextState__createSelectionOverlay_closure, A.EditableTextState__scheduleShowCaretOnScreen_closure, A.EditableTextState_didChangeMetrics_closure, A.EditableTextState__startCursorBlink_closure, A.EditableTextState__onCursorTick_closure1, A.EditableTextState__updateSizeAndTransform_closure, A.EditableTextState__updateComposingRectIfNeeded_closure, A.EditableTextState__updateCaretRectIfNeeded_closure, A.EditableTextState__actions_closure, A.EditableTextState_build_closure0, A._Editable__extractChildren_closure, A._ScribbleFocusableState_isInScribbleRect_closure, A._UpdateTextSelectionAction_invoke_collapse, A._throttle_closure, A._AnimatedPositionedState_forEachTween_closure, A._AnimatedPositionedState_forEachTween_closure0, A._AnimatedPositionedState_forEachTween_closure1, A._AnimatedPositionedState_forEachTween_closure2, A._AnimatedPositionedState_forEachTween_closure3, A._AnimatedPositionedState_forEachTween_closure4, A.TextMagnifierConfiguration_magnifierBuilder_closure, A.MagnifierController_show_closure, A.DefaultTextStyle_merge_closure, A.SelectionOverlay_showMagnifier_closure, A.SelectionOverlay_showToolbar_closure, A.SelectionOverlay_markNeedsBuild_closure, A.SelectionOverlay__buildToolbar_closure, A._SelectionHandleOverlayState_build_closure0, A._TextSelectionGestureDetectorState_build_closure0, A._TextSelectionGestureDetectorState_build_closure2, A._TextSelectionGestureDetectorState_build_closure4, A._TextSelectionGestureDetectorState_build_closure6]);
    _inheritMany(A.TextSelectionControls, [A.CupertinoDesktopTextSelectionControls, A.CupertinoTextSelectionControls, A.DesktopTextSelectionControls, A.MaterialTextSelectionControls]);
    _inherit(A.__CupertinoDesktopTextSelectionHandleControls_CupertinoDesktopTextSelectionControls_TextSelectionHandleControls, A.CupertinoDesktopTextSelectionControls);
    _inherit(A._CupertinoDesktopTextSelectionHandleControls, A.__CupertinoDesktopTextSelectionHandleControls_CupertinoDesktopTextSelectionControls_TextSelectionHandleControls);
    _inheritMany(B.StatelessWidget, [A.CupertinoDesktopTextSelectionToolbar, A.CupertinoMagnifier, A._CupertinoToolbarButtonDivider, A.CupertinoTextSelectionToolbar, A.CupertinoTextSelectionToolbarButton, A.AdaptiveTextSelectionToolbar, A.DesktopTextSelectionToolbar, A.DesktopTextSelectionToolbarButton, A.Magnifier, A.TextSelectionToolbar, A._TextSelectionToolbarContainer, A._TextSelectionToolbarOverflowButton, A.TextSelectionToolbarTextButton, A.RawMagnifier, A._MagnifierStyle]);
    _inheritMany(B.Closure0Args, [A._CupertinoDesktopTextSelectionToolbarButtonState__onEnter_closure, A._CupertinoDesktopTextSelectionToolbarButtonState__onExit_closure, A._CupertinoTextMagnifierState_initState_closure, A._CupertinoTextMagnifierState_initState__closure, A._CupertinoTextMagnifierState__determineMagnifierPositionAndFocalPoint_closure, A.CupertinoTextSelectionControls_buildToolbar_closure, A.CupertinoTextSelectionControls_buildToolbar_closure0, A.CupertinoTextSelectionControls_buildToolbar_closure1, A.CupertinoTextSelectionControls_buildToolbar_closure2, A._CupertinoTextSelectionToolbarContentState__statusListener_closure, A._RenderCupertinoTextSelectionToolbarItems_performLayout_closure, A._HelperErrorState__handleChange_closure, A._InputDecoratorState__handleChange_closure, A._TextMagnifierState__determineMagnifierPositionAndFocalPoint_closure, A._TextMagnifierState__determineMagnifierPositionAndFocalPoint__closure, A._TextMagnifierState__determineMagnifierPositionAndFocalPoint_closure0, A._TextFieldState__handleFocusChanged_closure, A._TextFieldState__handleSelectionChanged_closure, A._TextFieldState__handleHover_closure, A._TextFieldState_build_closure, A._TextFieldState_build_closure0, A._TextFieldState_build__closure, A._TextSelectionToolbarOverflowableState_build_closure, A._TextSelectionToolbarOverflowableState_build__closure, A.RenderAnimatedSize_closure, A.RenderEditable__createShowOnScreenFor_closure, A.EditableTextState_buttonItemsForToolbarOptions_closure, A.EditableTextState_buttonItemsForToolbarOptions_closure0, A.EditableTextState_buttonItemsForToolbarOptions_closure1, A.EditableTextState_contextMenuButtonItems_closure, A.EditableTextState_contextMenuButtonItems_closure0, A.EditableTextState_contextMenuButtonItems_closure1, A.EditableTextState_contextMenuButtonItems_closure2, A.EditableTextState__onCursorTick_closure, A.EditableTextState__onCursorTick_closure0, A.EditableTextState__didChangeTextEditingValue_closure, A.EditableTextState__handleFocusChanged_closure, A.EditableTextState_insertTextPlaceholder_closure, A.EditableTextState_removeTextPlaceholder_closure, A.EditableTextState_showAutocorrectionPromptRect_closure, A.EditableTextState__semanticsOnCopy_closure, A.EditableTextState__semanticsOnCut_closure, A.EditableTextState__semanticsOnPaste_closure, A.EditableTextState_build__closure, A._throttle__closure, A._SelectionHandleOverlayState_build_closure, A._TextSelectionGestureDetectorState_build_closure, A._TextSelectionGestureDetectorState_build_closure1, A._TextSelectionGestureDetectorState_build_closure3, A._TextSelectionGestureDetectorState_build_closure5]);
    _inherit(A._CupertinoTextMagnifierState, A.__CupertinoTextMagnifierState_State_SingleTickerProviderStateMixin);
    _inheritMany(B.CustomPainter, [A._TextSelectionHandlePainter0, A._InputBorderPainter, A._TextSelectionHandlePainter]);
    _inherit(A._CupertinoTextSelectionHandleControls_CupertinoTextSelectionControls_TextSelectionHandleControls, A.CupertinoTextSelectionControls);
    _inherit(A.CupertinoTextSelectionHandleControls, A._CupertinoTextSelectionHandleControls_CupertinoTextSelectionControls_TextSelectionHandleControls);
    _inheritMany(B.Closure2Args, [A._CupertinoTextSelectionControlsToolbarState_build_addToolbarButton, A._RenderCupertinoTextSelectionToolbarShape_paint_closure, A._RenderCupertinoTextSelectionToolbarItems_hitTestChild_closure, A._RenderDecoration_performLayout_centerLayout, A._RenderDecoration_performLayout_baselineLayout, A._RenderDecoration_hitTestChildren_closure, A._TextFieldState_build_closure1, A._TextFieldState_build_closure2, A.__TextFieldState_State_RestorationMixin_dispose_closure, A._TextSelectionToolbarTrailingEdgeAlignRenderBox_hitTestChildren_closure, A._RenderTextSelectionToolbarItemsLayout_hitTestChildren_closure, A.RenderEditable_getRectForComposingRange_closure, A.RenderEditable_hitTestChildren_closure, A.RenderEditable__paintContents_closure, A.RenderFollowerLayer_hitTestChildren_closure, A.EditableTextState__formatAndSetValue_closure, A.EditableTextState_build_closure]);
    _inheritMany(B.SingleChildRenderObjectWidget, [A._CupertinoTextSelectionToolbarShape, A._TextSelectionToolbarTrailingEdgeAlign, A._AnimatedSize, A.CompositedTransformTarget, A.CompositedTransformFollower, A._Magnifier, A.TapRegion]);
    _inherit(A._RenderCupertinoTextSelectionToolbarShape, B.RenderShiftedBox);
    _inherit(A._CupertinoTextSelectionToolbarContentState, A.__CupertinoTextSelectionToolbarContentState_State_TickerProviderStateMixin);
    _inheritMany(B.RenderObjectWidget, [A._CupertinoTextSelectionToolbarItems, A.__Decorator_RenderObjectWidget_SlottedMultiChildRenderObjectWidgetMixin]);
    _inheritMany(B.RenderObjectElement, [A._CupertinoTextSelectionToolbarItemsElement, A.SlottedRenderObjectElement]);
    _inheritMany(B.RenderBox, [A.__RenderCupertinoTextSelectionToolbarItems_RenderBox_ContainerRenderObjectMixin, A.__RenderDecoration_RenderBox_SlottedContainerRenderObjectMixin, A.__RenderTextSelectionToolbarItemsLayout_RenderBox_ContainerRenderObjectMixin, A._RenderEditable_RenderBox_RelayoutWhenSystemFontsChangeMixin, A._RenderEditableCustomPaint]);
    _inherit(A.__RenderCupertinoTextSelectionToolbarItems_RenderBox_ContainerRenderObjectMixin_RenderBoxContainerDefaultsMixin, A.__RenderCupertinoTextSelectionToolbarItems_RenderBox_ContainerRenderObjectMixin);
    _inherit(A._RenderCupertinoTextSelectionToolbarItems, A.__RenderCupertinoTextSelectionToolbarItems_RenderBox_ContainerRenderObjectMixin_RenderBoxContainerDefaultsMixin);
    _inherit(A._NullElement0, B.Element);
    _inherit(A._NullWidget3, B.Widget);
    _inherit(A.__DesktopTextSelectionHandleControls_DesktopTextSelectionControls_TextSelectionHandleControls, A.DesktopTextSelectionControls);
    _inherit(A._DesktopTextSelectionHandleControls, A.__DesktopTextSelectionHandleControls_DesktopTextSelectionControls_TextSelectionHandleControls);
    _inherit(A.InputBorder, B.ShapeBorder);
    _inheritMany(A.InputBorder, [A._NoInputBorder, A.UnderlineInputBorder]);
    _inheritMany(B.ChangeNotifier, [A._InputBorderGap, A.RenderEditablePainter]);
    _inherit(A._BorderContainerState, A.__BorderContainerState_State_TickerProviderStateMixin);
    _inherit(A._HelperErrorState, A.__HelperErrorState_State_SingleTickerProviderStateMixin);
    _inherit(A._RenderDecoration, A.__RenderDecoration_RenderBox_SlottedContainerRenderObjectMixin);
    _inherit(A._Decorator, A.__Decorator_RenderObjectWidget_SlottedMultiChildRenderObjectWidgetMixin);
    _inherit(A._InputDecoratorState, A.__InputDecoratorState_State_TickerProviderStateMixin);
    _inherit(A._InputDecoratorDefaultsM2, B.InputDecorationTheme);
    _inherit(A.MaterialStateTextStyle, B.TextStyle);
    _inherit(A._MaterialStateTextStyle, A.MaterialStateTextStyle);
    _inherit(A.TextButton, F.ButtonStyleButton);
    _inherit(A._TextFieldSelectionGestureDetectorBuilder, A.TextSelectionGestureDetectorBuilder);
    _inherit(A._TextFieldState, A.__TextFieldState_State_RestorationMixin);
    _inherit(A._MaterialTextSelectionHandleControls_MaterialTextSelectionControls_TextSelectionHandleControls, A.MaterialTextSelectionControls);
    _inherit(A.MaterialTextSelectionHandleControls, A._MaterialTextSelectionHandleControls_MaterialTextSelectionControls_TextSelectionHandleControls);
    _inherit(A._TextSelectionToolbarOverflowableState, A.__TextSelectionToolbarOverflowableState_State_TickerProviderStateMixin);
    _inheritMany(B.RenderProxyBox, [A._TextSelectionToolbarTrailingEdgeAlignRenderBox, A.RenderLeaderLayer, A.RenderFollowerLayer, A._RenderMagnification]);
    _inheritMany(B.MultiChildRenderObjectWidget, [A._TextSelectionToolbarItemsLayout, A._Editable]);
    _inherit(A._TextSelectionToolbarItemsLayoutElement, B.MultiChildRenderObjectElement);
    _inherit(A._RenderTextSelectionToolbarItemsLayout, A.__RenderTextSelectionToolbarItemsLayout_RenderBox_ContainerRenderObjectMixin);
    _inherit(A.PlaceholderSpan, B.InlineSpan);
    _inherit(A.ShapeDecoration, B.Decoration);
    _inherit(A._ShapeDecorationPainter, B.BoxPainter);
    _inherit(A.StrutStyle, A._StrutStyle_Object_Diagnosticable);
    _inherit(A.RenderAnimatedSize, B.RenderAligningShiftedBox);
    _inherit(A.VerticalCaretMovementRun, B.Iterator);
    _inherit(A._RenderEditable_RenderBox_RelayoutWhenSystemFontsChangeMixin_ContainerRenderObjectMixin, A._RenderEditable_RenderBox_RelayoutWhenSystemFontsChangeMixin);
    _inherit(A._RenderEditable_RenderBox_RelayoutWhenSystemFontsChangeMixin_ContainerRenderObjectMixin_RenderBoxContainerDefaultsMixin, A._RenderEditable_RenderBox_RelayoutWhenSystemFontsChangeMixin_ContainerRenderObjectMixin);
    _inherit(A.RenderEditable, A._RenderEditable_RenderBox_RelayoutWhenSystemFontsChangeMixin_ContainerRenderObjectMixin_RenderBoxContainerDefaultsMixin);
    _inheritMany(A.RenderEditablePainter, [A._TextHighlightPainter, A._FloatingCursorPainter, A._CompositeRenderEditablePainter]);
    _inherit(A.FollowerLayer, B.ContainerLayer);
    _inherit(A.FilteringTextInputFormatter, A.TextInputFormatter);
    _inherit(A._AnimatedSizeState, A.__AnimatedSizeState_State_SingleTickerProviderStateMixin);
    _inheritMany(B.SingleChildLayoutDelegate, [A.DesktopTextSelectionToolbarLayoutDelegate, A.TextSelectionToolbarLayoutDelegate]);
    _inherit(A.TextEditingController, B.ValueNotifier);
    _inherit(A._DiscreteKeyFrameSimulation, B.Simulation);
    _inherit(A._EditableTextState_State_AutomaticKeepAliveClientMixin_WidgetsBindingObserver, A._EditableTextState_State_AutomaticKeepAliveClientMixin);
    _inherit(A._EditableTextState_State_AutomaticKeepAliveClientMixin_WidgetsBindingObserver_TickerProviderStateMixin, A._EditableTextState_State_AutomaticKeepAliveClientMixin_WidgetsBindingObserver);
    _inherit(A._EditableTextState_State_AutomaticKeepAliveClientMixin_WidgetsBindingObserver_TickerProviderStateMixin_TextSelectionDelegate, A._EditableTextState_State_AutomaticKeepAliveClientMixin_WidgetsBindingObserver_TickerProviderStateMixin);
    _inherit(A._EditableTextState_State_AutomaticKeepAliveClientMixin_WidgetsBindingObserver_TickerProviderStateMixin_TextSelectionDelegate_TextInputClient, A._EditableTextState_State_AutomaticKeepAliveClientMixin_WidgetsBindingObserver_TickerProviderStateMixin_TextSelectionDelegate);
    _inherit(A.EditableTextState, A._EditableTextState_State_AutomaticKeepAliveClientMixin_WidgetsBindingObserver_TickerProviderStateMixin_TextSelectionDelegate_TextInputClient);
    _inherit(A.WidgetSpan, A.PlaceholderSpan);
    _inherit(A._ScribblePlaceholder, A.WidgetSpan);
    _inherit(A._MixedBoundary, B.TextBoundary);
    _inheritMany(B.ContextAction, [A._DeleteTextAction, A._UpdateTextSelectionAction, A._ExtendSelectionOrCaretPositionAction, A._UpdateTextSelectionVerticallyAction, A._SelectAllAction, A._CopySelectionAction]);
    _inherit(A.AnimatedPositioned, B.ImplicitlyAnimatedWidget);
    _inherit(A._AnimatedPositionedState, B.AnimatedWidgetBaseState);
    _inherit(A.MagnifierDecoration, A.ShapeDecoration);
    _inherit(A._DonutClip, B.CustomClipper);
    _inherit(A.RestorableListenable, B.RestorableProperty);
    _inherit(A.RestorableChangeNotifier, A.RestorableListenable);
    _inherit(A.RestorableTextEditingController, A.RestorableChangeNotifier);
    _inherit(A.RenderTapRegion, B.RenderProxyBoxWithHitTestBehavior);
    _inherit(A.TextFieldTapRegion, A.TapRegion);
    _inheritMany(B.Intent, [A.ReplaceTextIntent, A.UpdateSelectionIntent]);
    _inherit(A.ToolbarItemsParentData, B.ContainerBoxParentData);
    _inherit(A._SelectionToolbarWrapperState, A.__SelectionToolbarWrapperState_State_SingleTickerProviderStateMixin);
    _inherit(A._SelectionHandleOverlayState, A.__SelectionHandleOverlayState_State_SingleTickerProviderStateMixin);
    _mixinHard(A.__CupertinoButtonState_State_SingleTickerProviderStateMixin, B.SingleTickerProviderStateMixin);
    _mixin(A.__CupertinoDesktopTextSelectionHandleControls_CupertinoDesktopTextSelectionControls_TextSelectionHandleControls, A.TextSelectionHandleControls);
    _mixinHard(A.__CupertinoTextMagnifierState_State_SingleTickerProviderStateMixin, B.SingleTickerProviderStateMixin);
    _mixin(A._CupertinoTextSelectionHandleControls_CupertinoTextSelectionControls_TextSelectionHandleControls, A.TextSelectionHandleControls);
    _mixinHard(A.__CupertinoTextSelectionToolbarContentState_State_TickerProviderStateMixin, B.TickerProviderStateMixin);
    _mixinHard(A.__RenderCupertinoTextSelectionToolbarItems_RenderBox_ContainerRenderObjectMixin, B.ContainerRenderObjectMixin);
    _mixin(A.__RenderCupertinoTextSelectionToolbarItems_RenderBox_ContainerRenderObjectMixin_RenderBoxContainerDefaultsMixin, B.RenderBoxContainerDefaultsMixin);
    _mixin(A.__DesktopTextSelectionHandleControls_DesktopTextSelectionControls_TextSelectionHandleControls, A.TextSelectionHandleControls);
    _mixinHard(A.__BorderContainerState_State_TickerProviderStateMixin, B.TickerProviderStateMixin);
    _mixinHard(A.__Decorator_RenderObjectWidget_SlottedMultiChildRenderObjectWidgetMixin, A.SlottedMultiChildRenderObjectWidgetMixin);
    _mixinHard(A.__HelperErrorState_State_SingleTickerProviderStateMixin, B.SingleTickerProviderStateMixin);
    _mixinHard(A.__InputDecoratorState_State_TickerProviderStateMixin, B.TickerProviderStateMixin);
    _mixinHard(A.__RenderDecoration_RenderBox_SlottedContainerRenderObjectMixin, A.SlottedContainerRenderObjectMixin);
    _mixinHard(A.__TextFieldState_State_RestorationMixin, B.RestorationMixin);
    _mixin(A._MaterialTextSelectionHandleControls_MaterialTextSelectionControls_TextSelectionHandleControls, A.TextSelectionHandleControls);
    _mixinHard(A.__RenderTextSelectionToolbarItemsLayout_RenderBox_ContainerRenderObjectMixin, B.ContainerRenderObjectMixin);
    _mixinHard(A.__TextSelectionToolbarOverflowableState_State_TickerProviderStateMixin, B.TickerProviderStateMixin);
    _mixin(A._StrutStyle_Object_Diagnosticable, B.Diagnosticable);
    _mixinHard(A._RenderEditable_RenderBox_RelayoutWhenSystemFontsChangeMixin, B.RelayoutWhenSystemFontsChangeMixin);
    _mixinHard(A._RenderEditable_RenderBox_RelayoutWhenSystemFontsChangeMixin_ContainerRenderObjectMixin, B.ContainerRenderObjectMixin);
    _mixin(A._RenderEditable_RenderBox_RelayoutWhenSystemFontsChangeMixin_ContainerRenderObjectMixin_RenderBoxContainerDefaultsMixin, B.RenderBoxContainerDefaultsMixin);
    _mixinHard(A.__AnimatedSizeState_State_SingleTickerProviderStateMixin, B.SingleTickerProviderStateMixin);
    _mixinHard(A._EditableTextState_State_AutomaticKeepAliveClientMixin, B.AutomaticKeepAliveClientMixin);
    _mixin(A._EditableTextState_State_AutomaticKeepAliveClientMixin_WidgetsBindingObserver, B.WidgetsBindingObserver);
    _mixinHard(A._EditableTextState_State_AutomaticKeepAliveClientMixin_WidgetsBindingObserver_TickerProviderStateMixin, B.TickerProviderStateMixin);
    _mixin(A._EditableTextState_State_AutomaticKeepAliveClientMixin_WidgetsBindingObserver_TickerProviderStateMixin_TextSelectionDelegate, A.TextSelectionDelegate);
    _mixin(A._EditableTextState_State_AutomaticKeepAliveClientMixin_WidgetsBindingObserver_TickerProviderStateMixin_TextSelectionDelegate_TextInputClient, A.TextInputClient);
    _mixinHard(A.__SelectionHandleOverlayState_State_SingleTickerProviderStateMixin, B.SingleTickerProviderStateMixin);
    _mixinHard(A.__SelectionToolbarWrapperState_State_SingleTickerProviderStateMixin, B.SingleTickerProviderStateMixin);
  })();
  B._Universe_addRules(init.typeUniverse, JSON.parse('{"PathOperation":{"Enum":[]},"ThreePointCubic":{"Curve":[],"ParametricCurve":["double"]},"SizeTween":{"Tween":["Size?"],"Animatable":["Size?"],"Animatable.T":"Size?","Tween.T":"Size?"},"CupertinoButton":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"_CupertinoButtonState":{"State":["CupertinoButton"],"TickerProvider":[],"State.T":"CupertinoButton"},"_CupertinoDesktopTextSelectionHandleControls":{"TextSelectionHandleControls":[],"TextSelectionControls":[]},"CupertinoDesktopTextSelectionControls":{"TextSelectionControls":[]},"CupertinoDesktopTextSelectionToolbar":{"StatelessWidget":[],"Widget":[],"DiagnosticableTree":[]},"CupertinoDesktopTextSelectionToolbarButton":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"_CupertinoDesktopTextSelectionToolbarButtonState":{"State":["CupertinoDesktopTextSelectionToolbarButton"],"State.T":"CupertinoDesktopTextSelectionToolbarButton"},"CupertinoTextMagnifier":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"_CupertinoTextMagnifierState":{"State":["CupertinoTextMagnifier"],"TickerProvider":[],"State.T":"CupertinoTextMagnifier"},"CupertinoMagnifier":{"StatelessWidget":[],"Widget":[],"DiagnosticableTree":[]},"_CupertinoTextSelectionControlsToolbar":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"_TextSelectionHandlePainter0":{"CustomPainter":[],"Listenable":[]},"CupertinoTextSelectionHandleControls":{"TextSelectionHandleControls":[],"TextSelectionControls":[]},"CupertinoTextSelectionControls":{"TextSelectionControls":[]},"_CupertinoTextSelectionControlsToolbarState":{"State":["_CupertinoTextSelectionControlsToolbar"],"State.T":"_CupertinoTextSelectionControlsToolbar"},"_CupertinoTextSelectionToolbarContent":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"_CupertinoTextSelectionToolbarItemsSlot":{"Enum":[]},"_CupertinoToolbarButtonDivider":{"StatelessWidget":[],"Widget":[],"DiagnosticableTree":[]},"CupertinoTextSelectionToolbar":{"StatelessWidget":[],"Widget":[],"DiagnosticableTree":[]},"_CupertinoTextSelectionToolbarShape":{"SingleChildRenderObjectWidget":[],"RenderObjectWidget":[],"Widget":[],"DiagnosticableTree":[]},"_RenderCupertinoTextSelectionToolbarShape":{"RenderBox":[],"RenderObjectWithChildMixin":["RenderBox"],"RenderObject":[],"DiagnosticableTree":[],"AbstractNode":[],"HitTestTarget":[],"RenderObjectWithChildMixin.0":"RenderBox"},"_CupertinoTextSelectionToolbarContentState":{"TickerProviderStateMixin":["_CupertinoTextSelectionToolbarContent"],"State":["_CupertinoTextSelectionToolbarContent"],"TickerProvider":[],"State.T":"_CupertinoTextSelectionToolbarContent"},"_CupertinoTextSelectionToolbarItems":{"RenderObjectWidget":[],"Widget":[],"DiagnosticableTree":[]},"_CupertinoTextSelectionToolbarItemsElement":{"RenderObjectElement":[],"Element":[],"DiagnosticableTree":[],"BuildContext":[]},"_RenderCupertinoTextSelectionToolbarItems":{"RenderBoxContainerDefaultsMixin":["RenderBox","ToolbarItemsParentData"],"RenderBox":[],"ContainerRenderObjectMixin":["RenderBox","ToolbarItemsParentData"],"RenderObject":[],"DiagnosticableTree":[],"AbstractNode":[],"HitTestTarget":[],"ContainerRenderObjectMixin.1":"ToolbarItemsParentData","ContainerRenderObjectMixin.0":"RenderBox","RenderBoxContainerDefaultsMixin.1":"ToolbarItemsParentData"},"_NullElement0":{"Element":[],"DiagnosticableTree":[],"BuildContext":[]},"_NullWidget3":{"Widget":[],"DiagnosticableTree":[]},"CupertinoTextSelectionToolbarButton":{"StatelessWidget":[],"Widget":[],"DiagnosticableTree":[]},"AdaptiveTextSelectionToolbar":{"StatelessWidget":[],"Widget":[],"DiagnosticableTree":[]},"_DesktopTextSelectionHandleControls":{"TextSelectionHandleControls":[],"TextSelectionControls":[]},"DesktopTextSelectionControls":{"TextSelectionControls":[]},"DesktopTextSelectionToolbar":{"StatelessWidget":[],"Widget":[],"DiagnosticableTree":[]},"DesktopTextSelectionToolbarButton":{"StatelessWidget":[],"Widget":[],"DiagnosticableTree":[]},"InputBorder":{"ShapeBorder":[]},"_NoInputBorder":{"InputBorder":[],"ShapeBorder":[]},"UnderlineInputBorder":{"InputBorder":[],"ShapeBorder":[]},"_BorderContainer":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"_HelperError":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"_DecorationSlot":{"Enum":[]},"InputDecorator":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"_InputBorderGap":{"ChangeNotifier":[],"Listenable":[]},"_InputBorderTween":{"Tween":["InputBorder"],"Animatable":["InputBorder"],"Animatable.T":"InputBorder","Tween.T":"InputBorder"},"_InputBorderPainter":{"CustomPainter":[],"Listenable":[]},"_BorderContainerState":{"TickerProviderStateMixin":["_BorderContainer"],"State":["_BorderContainer"],"TickerProvider":[],"State.T":"_BorderContainer"},"_HelperErrorState":{"State":["_HelperError"],"TickerProvider":[],"State.T":"_HelperError"},"_RenderDecoration":{"SlottedContainerRenderObjectMixin":["_DecorationSlot"],"RenderBox":[],"RenderObject":[],"DiagnosticableTree":[],"AbstractNode":[],"HitTestTarget":[],"SlottedContainerRenderObjectMixin.S":"_DecorationSlot"},"_Decorator":{"SlottedMultiChildRenderObjectWidgetMixin":["_DecorationSlot"],"RenderObjectWidget":[],"Widget":[],"DiagnosticableTree":[],"SlottedMultiChildRenderObjectWidgetMixin.S":"_DecorationSlot"},"_InputDecoratorState":{"TickerProviderStateMixin":["InputDecorator"],"State":["InputDecorator"],"TickerProvider":[],"State.T":"InputDecorator"},"_InputDecoratorDefaultsM2":{"InputDecorationTheme":[]},"TextMagnifier":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"_TextMagnifierState":{"State":["TextMagnifier"],"State.T":"TextMagnifier"},"Magnifier":{"StatelessWidget":[],"Widget":[],"DiagnosticableTree":[]},"MaterialStateTextStyle":{"TextStyle":[],"MaterialStateProperty":["TextStyle"]},"_MaterialStateTextStyle":{"TextStyle":[],"MaterialStateProperty":["TextStyle"]},"TextButton":{"ButtonStyleButton":[],"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"TextField":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"_TextFieldState":{"RestorationMixin":["TextField"],"State":["TextField"],"TextSelectionGestureDetectorBuilderDelegate":[],"AutofillClient":[],"State.T":"TextField"},"MaterialTextSelectionHandleControls":{"TextSelectionHandleControls":[],"TextSelectionControls":[]},"MaterialTextSelectionControls":{"TextSelectionControls":[]},"_TextSelectionHandlePainter":{"CustomPainter":[],"Listenable":[]},"_TextSelectionToolbarOverflowable":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"TextSelectionToolbar":{"StatelessWidget":[],"Widget":[],"DiagnosticableTree":[]},"_TextSelectionToolbarOverflowableState":{"TickerProviderStateMixin":["_TextSelectionToolbarOverflowable"],"State":["_TextSelectionToolbarOverflowable"],"TickerProvider":[],"State.T":"_TextSelectionToolbarOverflowable"},"_TextSelectionToolbarTrailingEdgeAlign":{"SingleChildRenderObjectWidget":[],"RenderObjectWidget":[],"Widget":[],"DiagnosticableTree":[]},"_TextSelectionToolbarTrailingEdgeAlignRenderBox":{"RenderBox":[],"RenderObjectWithChildMixin":["RenderBox"],"RenderObject":[],"DiagnosticableTree":[],"AbstractNode":[],"HitTestTarget":[],"RenderObjectWithChildMixin.0":"RenderBox"},"_TextSelectionToolbarItemsLayout":{"MultiChildRenderObjectWidget":[],"RenderObjectWidget":[],"Widget":[],"DiagnosticableTree":[]},"_TextSelectionToolbarItemsLayoutElement":{"RenderObjectElement":[],"Element":[],"DiagnosticableTree":[],"BuildContext":[]},"_RenderTextSelectionToolbarItemsLayout":{"RenderBox":[],"ContainerRenderObjectMixin":["RenderBox","ToolbarItemsParentData"],"RenderObject":[],"DiagnosticableTree":[],"AbstractNode":[],"HitTestTarget":[],"ContainerRenderObjectMixin.1":"ToolbarItemsParentData","ContainerRenderObjectMixin.0":"RenderBox"},"_TextSelectionToolbarContainer":{"StatelessWidget":[],"Widget":[],"DiagnosticableTree":[]},"_TextSelectionToolbarOverflowButton":{"StatelessWidget":[],"Widget":[],"DiagnosticableTree":[]},"_TextSelectionToolbarItemPosition":{"Enum":[]},"TextSelectionToolbarTextButton":{"StatelessWidget":[],"Widget":[],"DiagnosticableTree":[]},"PlaceholderSpan":{"InlineSpan":[],"DiagnosticableTree":[]},"ShapeDecoration":{"Decoration":[]},"_ShapeDecorationPainter":{"BoxPainter":[]},"RenderAnimatedSizeState":{"Enum":[]},"RenderAnimatedSize":{"RenderBox":[],"RenderObjectWithChildMixin":["RenderBox"],"RenderObject":[],"DiagnosticableTree":[],"AbstractNode":[],"HitTestTarget":[],"RenderObjectWithChildMixin.0":"RenderBox"},"RenderEditablePainter":{"ChangeNotifier":[],"Listenable":[]},"VerticalCaretMovementRun":{"Iterator":["TextPosition"]},"RenderEditable":{"RenderBoxContainerDefaultsMixin":["RenderBox","TextParentData"],"RenderBox":[],"ContainerRenderObjectMixin":["RenderBox","TextParentData"],"RenderObject":[],"DiagnosticableTree":[],"AbstractNode":[],"HitTestTarget":[],"TextLayoutMetrics":[],"ContainerRenderObjectMixin.1":"TextParentData","ContainerRenderObjectMixin.0":"RenderBox","RenderBoxContainerDefaultsMixin.1":"TextParentData"},"_RenderEditableCustomPaint":{"RenderBox":[],"RenderObject":[],"DiagnosticableTree":[],"AbstractNode":[],"HitTestTarget":[]},"_TextHighlightPainter":{"RenderEditablePainter":[],"ChangeNotifier":[],"Listenable":[]},"_FloatingCursorPainter":{"RenderEditablePainter":[],"ChangeNotifier":[],"Listenable":[]},"_CompositeRenderEditablePainter":{"RenderEditablePainter":[],"ChangeNotifier":[],"Listenable":[]},"FollowerLayer":{"ContainerLayer":[],"Layer0":[],"DiagnosticableTree":[],"AbstractNode":[]},"RenderLeaderLayer":{"RenderBox":[],"RenderObjectWithChildMixin":["RenderBox"],"RenderObject":[],"DiagnosticableTree":[],"AbstractNode":[],"HitTestTarget":[],"RenderObjectWithChildMixin.0":"RenderBox"},"RenderFollowerLayer":{"RenderBox":[],"RenderObjectWithChildMixin":["RenderBox"],"RenderObject":[],"DiagnosticableTree":[],"AbstractNode":[],"HitTestTarget":[],"RenderObjectWithChildMixin.0":"RenderBox"},"DefaultSpellCheckService":{"SpellCheckService":[]},"MaxLengthEnforcement":{"Enum":[]},"FilteringTextInputFormatter":{"TextInputFormatter":[]},"SmartDashesType":{"Enum":[]},"SmartQuotesType":{"Enum":[]},"TextCapitalization0":{"Enum":[]},"AnimatedSize":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"_AnimatedSizeState":{"State":["AnimatedSize"],"TickerProvider":[],"State.T":"AnimatedSize"},"_AnimatedSize":{"SingleChildRenderObjectWidget":[],"RenderObjectWidget":[],"Widget":[],"DiagnosticableTree":[]},"CompositedTransformTarget":{"SingleChildRenderObjectWidget":[],"RenderObjectWidget":[],"Widget":[],"DiagnosticableTree":[]},"CompositedTransformFollower":{"SingleChildRenderObjectWidget":[],"RenderObjectWidget":[],"Widget":[],"DiagnosticableTree":[]},"ContextMenuButtonType":{"Enum":[]},"DesktopTextSelectionToolbarLayoutDelegate":{"SingleChildLayoutDelegate":[]},"TextEditingController":{"ValueNotifier":["TextEditingValue"],"ChangeNotifier":[],"ValueListenable":["TextEditingValue"],"Listenable":[],"ValueNotifier.T":"TextEditingValue"},"EditableText":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"EditableTextState":{"TickerProviderStateMixin":["EditableText"],"State":["EditableText"],"WidgetsBindingObserver":[],"TickerProvider":[],"TextSelectionDelegate":[],"TextInputClient":[],"AutofillClient":[],"State.T":"EditableText"},"_ScribbleFocusable":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"_ScribblePlaceholder":{"WidgetSpan":[],"PlaceholderSpan":[],"InlineSpan":[],"DiagnosticableTree":[]},"_TextEditingHistory":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"_DiscreteKeyFrameSimulation":{"Simulation":[]},"_Editable":{"MultiChildRenderObjectWidget":[],"RenderObjectWidget":[],"Widget":[],"DiagnosticableTree":[]},"_ScribbleFocusableState":{"State":["_ScribbleFocusable"],"ScribbleClient":[],"State.T":"_ScribbleFocusable"},"_MixedBoundary":{"TextBoundary":[]},"_DeleteTextAction":{"ContextAction":["1"],"Action":["1"],"Action.T":"1","ContextAction.T":"1"},"_UpdateTextSelectionAction":{"ContextAction":["1"],"Action":["1"],"Action.T":"1","ContextAction.T":"1"},"_ExtendSelectionOrCaretPositionAction":{"ContextAction":["ExtendSelectionToNextWordBoundaryOrCaretLocationIntent"],"Action":["ExtendSelectionToNextWordBoundaryOrCaretLocationIntent"],"Action.T":"ExtendSelectionToNextWordBoundaryOrCaretLocationIntent","ContextAction.T":"ExtendSelectionToNextWordBoundaryOrCaretLocationIntent"},"_UpdateTextSelectionVerticallyAction":{"ContextAction":["1"],"Action":["1"],"Action.T":"1","ContextAction.T":"1"},"_SelectAllAction":{"ContextAction":["SelectAllTextIntent"],"Action":["SelectAllTextIntent"],"Action.T":"SelectAllTextIntent","ContextAction.T":"SelectAllTextIntent"},"_CopySelectionAction":{"ContextAction":["CopySelectionTextIntent"],"Action":["CopySelectionTextIntent"],"Action.T":"CopySelectionTextIntent","ContextAction.T":"CopySelectionTextIntent"},"_TextEditingHistoryState":{"State":["_TextEditingHistory"],"State.T":"_TextEditingHistory"},"AnimatedPositioned":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"_AnimatedPositionedState":{"ImplicitlyAnimatedWidgetState":["AnimatedPositioned"],"State":["AnimatedPositioned"],"TickerProvider":[],"State.T":"AnimatedPositioned","ImplicitlyAnimatedWidgetState.T":"AnimatedPositioned"},"MagnifierDecoration":{"ShapeDecoration":[],"Decoration":[]},"RawMagnifier":{"StatelessWidget":[],"Widget":[],"DiagnosticableTree":[]},"_MagnifierStyle":{"StatelessWidget":[],"Widget":[],"DiagnosticableTree":[]},"_DonutClip":{"CustomClipper":["Path"],"Listenable":[]},"_Magnifier":{"SingleChildRenderObjectWidget":[],"RenderObjectWidget":[],"Widget":[],"DiagnosticableTree":[]},"_RenderMagnification":{"RenderBox":[],"RenderObjectWithChildMixin":["RenderBox"],"RenderObject":[],"DiagnosticableTree":[],"AbstractNode":[],"HitTestTarget":[],"RenderObjectWithChildMixin.0":"RenderBox"},"RestorableListenable":{"RestorableProperty":["1"],"ChangeNotifier":[],"Listenable":[]},"RestorableChangeNotifier":{"RestorableListenable":["1"],"RestorableProperty":["1"],"ChangeNotifier":[],"Listenable":[]},"RestorableTextEditingController":{"RestorableChangeNotifier":["TextEditingController"],"RestorableListenable":["TextEditingController"],"RestorableProperty":["TextEditingController"],"ChangeNotifier":[],"Listenable":[],"RestorableListenable.T":"TextEditingController","RestorableChangeNotifier.T":"TextEditingController"},"SlottedRenderObjectElement":{"RenderObjectElement":[],"Element":[],"DiagnosticableTree":[],"BuildContext":[]},"TapRegion":{"SingleChildRenderObjectWidget":[],"RenderObjectWidget":[],"Widget":[],"DiagnosticableTree":[]},"RenderTapRegion":{"RenderProxyBoxWithHitTestBehavior":[],"RenderBox":[],"RenderObjectWithChildMixin":["RenderBox"],"RenderObject":[],"DiagnosticableTree":[],"AbstractNode":[],"HitTestTarget":[],"RenderObjectWithChildMixin.0":"RenderBox"},"TextFieldTapRegion":{"SingleChildRenderObjectWidget":[],"RenderObjectWidget":[],"Widget":[],"DiagnosticableTree":[]},"ExtendSelectionByPageIntent":{"DirectionalTextEditingIntent":[],"Intent":[]},"ReplaceTextIntent":{"Intent":[]},"UpdateSelectionIntent":{"Intent":[]},"ToolbarItemsParentData":{"BoxParentData":[],"ContainerParentDataMixin":["RenderBox"],"ParentData":[],"ContainerParentDataMixin.0":"RenderBox"},"_SelectionToolbarWrapper":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"_SelectionHandleOverlay":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"TextSelectionGestureDetector":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"ClipboardStatus":{"Enum":[]},"_SelectionToolbarWrapperState":{"State":["_SelectionToolbarWrapper"],"TickerProvider":[],"State.T":"_SelectionToolbarWrapper"},"_SelectionHandleOverlayState":{"State":["_SelectionHandleOverlay"],"TickerProvider":[],"State.T":"_SelectionHandleOverlay"},"_TextSelectionGestureDetectorState":{"State":["TextSelectionGestureDetector"],"State.T":"TextSelectionGestureDetector"},"TextSelectionToolbarLayoutDelegate":{"SingleChildLayoutDelegate":[]},"WidgetSpan":{"PlaceholderSpan":[],"InlineSpan":[],"DiagnosticableTree":[]},"TextSelectionTheme":{"InheritedTheme":[],"InheritedWidget":[],"ProxyWidget":[],"Widget":[],"DiagnosticableTree":[]},"_AutofillScope":{"InheritedWidget":[],"ProxyWidget":[],"Widget":[],"DiagnosticableTree":[]}}'));
  var type$ = (function rtii() {
    var findType = B.findType;
    return {
      Action_Intent: findType("Action<Intent>"),
      Action_ReplaceTextIntent: findType("Action<ReplaceTextIntent>"),
      Action_TransposeCharactersIntent: findType("Action<TransposeCharactersIntent>"),
      Action_UpdateSelectionIntent: findType("Action<UpdateSelectionIntent>"),
      Animatable_double: findType("Animatable<double>"),
      AnimationStatus: findType("AnimationStatus"),
      Animation_double: findType("Animation<double>"),
      BoxConstraints: findType("BoxConstraints"),
      BoxHitTestEntry: findType("BoxHitTestEntry"),
      BoxParentData: findType("BoxParentData"),
      BoxShadow: findType("BoxShadow"),
      BuildContext: findType("BuildContext"),
      CallbackAction_DismissIntent: findType("CallbackAction<DismissIntent>"),
      CallbackAction_ExpandSelectionToDocumentBoundaryIntent: findType("CallbackAction<ExpandSelectionToDocumentBoundaryIntent>"),
      CallbackAction_ExpandSelectionToLineBreakIntent: findType("CallbackAction<ExpandSelectionToLineBreakIntent>"),
      CallbackAction_ExtendSelectionByPageIntent: findType("CallbackAction<ExtendSelectionByPageIntent>"),
      CallbackAction_PasteTextIntent: findType("CallbackAction<PasteTextIntent>"),
      CallbackAction_RedoTextIntent: findType("CallbackAction<RedoTextIntent>"),
      CallbackAction_ReplaceTextIntent: findType("CallbackAction<ReplaceTextIntent>"),
      CallbackAction_ScrollIntent: findType("CallbackAction<ScrollIntent>"),
      CallbackAction_ScrollToDocumentBoundaryIntent: findType("CallbackAction<ScrollToDocumentBoundaryIntent>"),
      CallbackAction_TransposeCharactersIntent: findType("CallbackAction<TransposeCharactersIntent>"),
      CallbackAction_UndoTextIntent: findType("CallbackAction<UndoTextIntent>"),
      CallbackAction_UpdateSelectionIntent: findType("CallbackAction<UpdateSelectionIntent>"),
      ClipPathLayer: findType("ClipPathLayer"),
      ClipRectLayer: findType("ClipRectLayer"),
      Color: findType("Color"),
      Constraints: findType("Constraints"),
      ContainerLayer: findType("ContainerLayer"),
      ContextMenuButtonItem: findType("ContextMenuButtonItem"),
      CopySelectionTextIntent: findType("CopySelectionTextIntent"),
      CupertinoButton: findType("CupertinoButton"),
      CupertinoLocalizations: findType("CupertinoLocalizations"),
      CupertinoTextMagnifier: findType("CupertinoTextMagnifier"),
      DefaultSelectionStyle: findType("DefaultSelectionStyle"),
      DefaultTextStyle: findType("DefaultTextStyle"),
      DesktopTextSelectionToolbarLayoutDelegate: findType("DesktopTextSelectionToolbarLayoutDelegate"),
      Directionality: findType("Directionality"),
      DismissIntent: findType("DismissIntent"),
      Duration: findType("Duration"),
      EditableText: findType("EditableText"),
      Element: findType("Element"),
      ExpandSelectionToDocumentBoundaryIntent: findType("ExpandSelectionToDocumentBoundaryIntent"),
      ExpandSelectionToLineBreakIntent: findType("ExpandSelectionToLineBreakIntent"),
      ExtendSelectionByPageIntent: findType("ExtendSelectionByPageIntent"),
      ExtendSelectionToNextWordBoundaryOrCaretLocationIntent: findType("ExtendSelectionToNextWordBoundaryOrCaretLocationIntent"),
      ForcePressGestureRecognizer: findType("ForcePressGestureRecognizer"),
      GestureRecognizerFactoryWithHandlers_ForcePressGestureRecognizer: findType("GestureRecognizerFactoryWithHandlers<ForcePressGestureRecognizer>"),
      GestureRecognizerFactoryWithHandlers_LongPressGestureRecognizer: findType("GestureRecognizerFactoryWithHandlers<LongPressGestureRecognizer>"),
      GestureRecognizerFactoryWithHandlers_PanGestureRecognizer: findType("GestureRecognizerFactoryWithHandlers<PanGestureRecognizer>"),
      GestureRecognizerFactoryWithHandlers_TapGestureRecognizer: findType("GestureRecognizerFactoryWithHandlers<TapGestureRecognizer>"),
      GestureRecognizerFactory_GestureRecognizer: findType("GestureRecognizerFactory<GestureRecognizer>"),
      HitTestEntry_HitTestTarget: findType("HitTestEntry<HitTestTarget>"),
      HitTestTarget: findType("HitTestTarget"),
      IndexedSlot_Element: findType("IndexedSlot<Element>"),
      IndexedSlot_nullable_Element: findType("IndexedSlot<Element?>"),
      InlineSpanSemanticsInformation: findType("InlineSpanSemanticsInformation"),
      InputBorder: findType("InputBorder"),
      InputDecorator: findType("InputDecorator"),
      Intent: findType("Intent"),
      Iterable_SemanticsNode: findType("Iterable<SemanticsNode>"),
      JSArray_BoxShadow: findType("JSArray<BoxShadow>"),
      JSArray_ContainerLayer: findType("JSArray<ContainerLayer>"),
      JSArray_ContextMenuButtonItem: findType("JSArray<ContextMenuButtonItem>"),
      JSArray_InlineSpan: findType("JSArray<InlineSpan>"),
      JSArray_InlineSpanSemanticsInformation: findType("JSArray<InlineSpanSemanticsInformation>"),
      JSArray_Listenable: findType("JSArray<Listenable>"),
      JSArray_OverlayEntry: findType("JSArray<OverlayEntry>"),
      JSArray_PlaceholderDimensions: findType("JSArray<PlaceholderDimensions>"),
      JSArray_PlaceholderSpan: findType("JSArray<PlaceholderSpan>"),
      JSArray_RenderBox: findType("JSArray<RenderBox>"),
      JSArray_RenderEditablePainter: findType("JSArray<RenderEditablePainter>"),
      JSArray_SelectionRect: findType("JSArray<SelectionRect>"),
      JSArray_SemanticsNode: findType("JSArray<SemanticsNode>"),
      JSArray_String: findType("JSArray<String>"),
      JSArray_StringAttribute: findType("JSArray<StringAttribute>"),
      JSArray_SuggestionSpan: findType("JSArray<SuggestionSpan>"),
      JSArray_TextBox: findType("JSArray<TextBox>"),
      JSArray_TextEditingValue: findType("JSArray<TextEditingValue>"),
      JSArray_TextInputFormatter: findType("JSArray<TextInputFormatter>"),
      JSArray_TextSelectionPoint: findType("JSArray<TextSelectionPoint>"),
      JSArray_TextSpan: findType("JSArray<TextSpan>"),
      JSArray_Widget: findType("JSArray<Widget>"),
      JSArray__ScribblePlaceholder: findType("JSArray<_ScribblePlaceholder>"),
      JSArray_of_void_Function_Action_Intent: findType("JSArray<~(Action<Intent>)>"),
      Key: findType("Key"),
      LabeledGlobalKey_EditableTextState: findType("LabeledGlobalKey<EditableTextState>"),
      LabeledGlobalKey_State_StatefulWidget: findType("LabeledGlobalKey<State<StatefulWidget>>"),
      Layer: findType("Layer0"),
      LeaderLayer: findType("LeaderLayer"),
      List_Element: findType("List<Element>"),
      List_InlineSpanSemanticsInformation: findType("List<InlineSpanSemanticsInformation>"),
      List_LineMetrics: findType("List<LineMetrics>"),
      List_Paint: findType("List<Paint>"),
      List_Path: findType("List<Path>"),
      List_PlaceholderSpan: findType("List<PlaceholderSpan>"),
      List_Rect: findType("List<Rect>"),
      List_SelectionRect: findType("List<SelectionRect>"),
      List_TextSelectionPoint: findType("List<TextSelectionPoint>"),
      List_dynamic: findType("List<@>"),
      LogicalKeyboardKey: findType("LogicalKeyboardKey"),
      LongPressGestureRecognizer: findType("LongPressGestureRecognizer"),
      MagnifierController: findType("MagnifierController"),
      MagnifierInfo: findType("MagnifierInfo"),
      MapEntry_Offset_TextPosition: findType("MapEntry<Offset,TextPosition>"),
      MapEntry_int_Offset: findType("MapEntry<int,Offset>"),
      Map_Key_Element: findType("Map<Key,Element>"),
      Map_String_dynamic: findType("Map<String,@>"),
      Map_dynamic_dynamic: findType("Map<@,@>"),
      Map_of_Type_and_Action_Intent: findType("Map<Type,Action<Intent>>"),
      MaterialLocalizations: findType("MaterialLocalizations"),
      MaterialState: findType("MaterialState"),
      MediaQuery: findType("MediaQuery"),
      MouseCursor: findType("MouseCursor0"),
      NavigatorState: findType("NavigatorState"),
      Object: findType("Object"),
      ObserverList_of_void_Function_Action_Intent: findType("ObserverList<~(Action<Intent>)>"),
      Offset: findType("Offset"),
      OverlayState: findType("OverlayState"),
      Paint: findType("Paint"),
      PanGestureRecognizer: findType("PanGestureRecognizer"),
      PasteTextIntent: findType("PasteTextIntent"),
      Path: findType("Path"),
      PipelineOwner: findType("PipelineOwner"),
      PlaceholderDimensions: findType("PlaceholderDimensions"),
      PointerDeviceKind: findType("PointerDeviceKind"),
      PointerDownEvent: findType("PointerDownEvent"),
      PointerEnterEvent: findType("PointerEnterEvent"),
      PointerExitEvent: findType("PointerExitEvent"),
      Rect: findType("Rect"),
      RedoTextIntent: findType("RedoTextIntent"),
      RenderAnimatedSize: findType("RenderAnimatedSize"),
      RenderBox: findType("RenderBox"),
      RenderEditable: findType("RenderEditable"),
      RenderFollowerLayer: findType("RenderFollowerLayer"),
      RenderLeaderLayer: findType("RenderLeaderLayer"),
      RenderTapRegion: findType("RenderTapRegion"),
      RenderTapRegionSurface: findType("RenderTapRegionSurface"),
      ReplaceTextIntent: findType("ReplaceTextIntent"),
      RestorableProperty_nullable_Object: findType("RestorableProperty<Object?>"),
      ScrollIntent: findType("ScrollIntent"),
      ScrollToDocumentBoundaryIntent: findType("ScrollToDocumentBoundaryIntent"),
      SelectAllTextIntent: findType("SelectAllTextIntent"),
      SelectionRect: findType("SelectionRect"),
      SemanticsNode: findType("SemanticsNode"),
      Set_MaterialState: findType("Set<MaterialState>"),
      String: findType("String"),
      SuggestionSpan: findType("SuggestionSpan"),
      TapGestureRecognizer: findType("TapGestureRecognizer"),
      TextBox: findType("TextBox"),
      TextButtonTheme: findType("TextButtonTheme"),
      TextEditingValue: findType("TextEditingValue"),
      TextField: findType("TextField"),
      TextInputFormatter: findType("TextInputFormatter"),
      TextMagnifier: findType("TextMagnifier"),
      TextParentData: findType("TextParentData"),
      TextPosition: findType("TextPosition"),
      TextSelectionHandleControls: findType("TextSelectionHandleControls"),
      TextSelectionHandleType: findType("TextSelectionHandleType"),
      TextSelectionPoint: findType("TextSelectionPoint"),
      TextSelectionTheme: findType("TextSelectionTheme"),
      TextSelectionToolbarLayoutDelegate: findType("TextSelectionToolbarLayoutDelegate"),
      TextStyle: findType("TextStyle"),
      Timer: findType("Timer"),
      Timer_Function_TextEditingValue: findType("Timer(TextEditingValue)"),
      ToolbarItemsParentData: findType("ToolbarItemsParentData"),
      TransposeCharactersIntent: findType("TransposeCharactersIntent"),
      Tween_Offset: findType("Tween<Offset>"),
      Tween_double: findType("Tween<double>"),
      Type: findType("Type"),
      UndoTextIntent: findType("UndoTextIntent"),
      UpdateSelectionIntent: findType("UpdateSelectionIntent"),
      ValueNotifier_MagnifierInfo: findType("ValueNotifier<MagnifierInfo>"),
      ValueNotifier_bool: findType("ValueNotifier<bool>"),
      ViewportOffset: findType("ViewportOffset"),
      Widget: findType("Widget"),
      WidgetSpan: findType("WidgetSpan"),
      Widget_Function_BuildContext: findType("Widget(BuildContext)"),
      _ActionsMarker: findType("_ActionsMarker"),
      _AutofillScope: findType("_AutofillScope"),
      _BorderContainer: findType("_BorderContainer"),
      _CupertinoTextSelectionControlsToolbar: findType("_CupertinoTextSelectionControlsToolbar"),
      _CupertinoTextSelectionToolbarContent: findType("_CupertinoTextSelectionToolbarContent"),
      _CupertinoTextSelectionToolbarItems: findType("_CupertinoTextSelectionToolbarItems"),
      _CupertinoTextSelectionToolbarItemsSlot: findType("_CupertinoTextSelectionToolbarItemsSlot"),
      _DecorationSlot: findType("_DecorationSlot"),
      _DeleteTextAction_DeleteCharacterIntent: findType("_DeleteTextAction<DeleteCharacterIntent>"),
      _DeleteTextAction_DeleteToLineBreakIntent: findType("_DeleteTextAction<DeleteToLineBreakIntent>"),
      _DeleteTextAction_DeleteToNextWordBoundaryIntent: findType("_DeleteTextAction<DeleteToNextWordBoundaryIntent>"),
      _DonutClip: findType("_DonutClip"),
      _FocusTraversalGroupMarker: findType("_FocusTraversalGroupMarker"),
      _HelperError: findType("_HelperError"),
      _InheritedCupertinoTheme: findType("_InheritedCupertinoTheme"),
      _InputBorderPainter: findType("_InputBorderPainter"),
      _RenderCupertinoTextSelectionToolbarItems: findType("_RenderCupertinoTextSelectionToolbarItems"),
      _RenderCupertinoTextSelectionToolbarShape: findType("_RenderCupertinoTextSelectionToolbarShape"),
      _RenderDecoration: findType("_RenderDecoration"),
      _RenderMagnification: findType("_RenderMagnification"),
      _RenderTextSelectionToolbarItemsLayout: findType("_RenderTextSelectionToolbarItemsLayout"),
      _ScribbleFocusable: findType("_ScribbleFocusable"),
      _SelectionHandleOverlay: findType("_SelectionHandleOverlay"),
      _SelectionToolbarWrapper: findType("_SelectionToolbarWrapper"),
      _TextEditingHistory: findType("_TextEditingHistory"),
      _TextSelectionHandlePainter: findType("_TextSelectionHandlePainter0"),
      _TextSelectionHandlePainter_2: findType("_TextSelectionHandlePainter"),
      _TextSelectionToolbarOverflowable: findType("_TextSelectionToolbarOverflowable"),
      _TextSelectionToolbarTrailingEdgeAlignRenderBox: findType("_TextSelectionToolbarTrailingEdgeAlignRenderBox"),
      _UndoStack_TextEditingValue: findType("_UndoStack<TextEditingValue>"),
      _UpdateTextSelectionAction_ExtendSelectionByCharacterIntent: findType("_UpdateTextSelectionAction<ExtendSelectionByCharacterIntent>"),
      _UpdateTextSelectionAction_ExtendSelectionToDocumentBoundaryIntent: findType("_UpdateTextSelectionAction<ExtendSelectionToDocumentBoundaryIntent>"),
      _UpdateTextSelectionAction_ExtendSelectionToLineBreakIntent: findType("_UpdateTextSelectionAction<ExtendSelectionToLineBreakIntent>"),
      _UpdateTextSelectionAction_ExtendSelectionToNextWordBoundaryIntent: findType("_UpdateTextSelectionAction<ExtendSelectionToNextWordBoundaryIntent>"),
      _UpdateTextSelectionVerticallyAction_DirectionalCaretMovementIntent: findType("_UpdateTextSelectionVerticallyAction<DirectionalCaretMovementIntent>"),
      bool: findType("bool"),
      bool_Function_InlineSpan: findType("bool(InlineSpan)"),
      double: findType("double"),
      dynamic: findType("@"),
      dynamic_Function: findType("@()"),
      int: findType("int"),
      nullable_BackdropFilterLayer: findType("BackdropFilterLayer?"),
      nullable_ClipboardData: findType("ClipboardData?"),
      nullable_ContainerLayer: findType("ContainerLayer?"),
      nullable_FollowerLayer: findType("FollowerLayer?"),
      nullable_InputBorder: findType("InputBorder?"),
      nullable_LinkedHashMap_Key_SemanticsNode: findType("LinkedHashMap<Key,SemanticsNode>?"),
      nullable_List_InlineSpanSemanticsInformation: findType("List<InlineSpanSemanticsInformation>?"),
      nullable_List_OverlayEntry: findType("List<OverlayEntry>?"),
      nullable_List_PlaceholderDimensions: findType("List<PlaceholderDimensions>?"),
      nullable_List_SuggestionSpan: findType("List<SuggestionSpan>?"),
      nullable_Object: findType("Object?"),
      nullable_Rect: findType("Rect?"),
      nullable_RenderBox: findType("RenderBox?"),
      nullable_RenderEditable: findType("RenderEditable?"),
      nullable_ScrollableState: findType("ScrollableState?"),
      nullable_ShapeDecoration: findType("ShapeDecoration?"),
      nullable_TextStyle: findType("TextStyle?"),
      nullable_Timer: findType("Timer?"),
      nullable_TransformEngineLayer: findType("TransformEngineLayer0?"),
      nullable_TransformLayer: findType("TransformLayer?"),
      nullable_Tween_double: findType("Tween<double>?"),
      nullable_Tween_dynamic_Function_3_nullable_Tween_dynamic_and_dynamic_and_Tween_dynamic_Function_dynamic: findType("Tween<@>?(Tween<@>?,@,Tween<@>(@))"),
      nullable_ValueNotifier_ClipboardStatus: findType("ValueNotifier<ClipboardStatus>?"),
      nullable_Widget: findType("Widget?"),
      nullable_Widget_Function_BuildContext: findType("Widget(BuildContext)?"),
      nullable_void_Function: findType("~()?"),
      nullable_void_Function_PointerDownEvent: findType("~(PointerDownEvent)?"),
      nullable_void_Function_Rect: findType("~(Rect)?"),
      void: findType("~"),
      void_Function: findType("~()"),
      void_Function_AnimationStatus: findType("~(AnimationStatus)"),
      void_Function_Duration: findType("~(Duration)"),
      void_Function_Element: findType("~(Element)"),
      void_Function_RenderObject: findType("~(RenderObject)"),
      void_Function_TextEditingValue: findType("~(TextEditingValue)")
    };
  })();
  (function constants() {
    var makeConstList = hunkHelpers.makeConstList;
    D.TextEditingValue_li8 = new B.TextEditingValue("", C.TextSelection_ke5, C.TextRange_m1_m1);
    D.AutofillConfiguration_lYx = new A.AutofillConfiguration(false, "", C.List_empty0, D.TextEditingValue_li8, null);
    D.BorderRadius_tLn2 = new B.BorderRadius(C.Radius_4_4, C.Radius_4_4, C.Radius_0_0, C.Radius_0_0);
    D.Radius_7_7 = new B.Radius(7, 7);
    D.BorderRadius_tLn1 = new B.BorderRadius(D.Radius_7_7, D.Radius_7_7, D.Radius_7_7, D.Radius_7_7);
    D.BorderRadius_tLn7 = new B.BorderRadius(C.Radius_8_8, C.Radius_8_8, C.Radius_8_8, C.Radius_8_8);
    D.Radius_40_40 = new B.Radius(40, 40);
    D.BorderRadius_tLn3 = new B.BorderRadius(D.Radius_40_40, D.Radius_40_40, D.Radius_40_40, D.Radius_40_40);
    D.Radius_60_50 = new B.Radius(60, 50);
    D.BorderRadius_tLn4 = new B.BorderRadius(D.Radius_60_50, D.Radius_60_50, D.Radius_60_50, D.Radius_60_50);
    D.Color_4293454056 = new B.Color(4293454056);
    D.BorderSide_2Vu = new B.BorderSide(D.Color_4293454056, 1, C.BorderStyle_1, -1);
    D.Border_bWW = new B.Border(C.BorderSide_8xm, C.BorderSide_8xm, C.BorderSide_8xm, C.BorderSide_8xm);
    D.Color_4286611584 = new B.Color(4286611584);
    D.BoxDecoration_c0h = new B.BoxDecoration(D.Color_4286611584, null, null, null, null, null, null, C.BoxShape_0);
    D.Offset_ILV = new B.Offset(0.05, 0);
    D.Offset_dGA = new B.Offset(0.133333, 0.06);
    D.Offset_GNx = new B.Offset(0.166666, 0.4);
    D.Offset_Muk = new B.Offset(0.208333, 0.82);
    D.Offset_chs0 = new B.Offset(0.25, 1);
    D.C_ThreePointCubic = new A.ThreePointCubic();
    D.Color_144613022 = new B.Color(144613022);
    D.Color_1929379840 = new B.Color(1929379840);
    D.Color_234881023 = new B.Color(234881023);
    D.Color_3944751136 = new B.Color(3944751136);
    D.Color_452984831 = new B.Color(452984831);
    D.Color_83886080 = new B.Color(83886080);
    D.ContextMenuButtonType_0 = new A.ContextMenuButtonType(0, "cut");
    D.ContextMenuButtonType_1 = new A.ContextMenuButtonType(1, "copy");
    D.ContextMenuButtonType_2 = new A.ContextMenuButtonType(2, "paste");
    D.ContextMenuButtonType_3 = new A.ContextMenuButtonType(3, "selectAll");
    D.Color_4293716198 = new B.Color(4293716198);
    D.Color_4281346344 = new B.Color(4281346344);
    D.CupertinoDynamicColor_AOy = new B.CupertinoDynamicColor(D.Color_4293716198, null, null, D.Color_4293716198, D.Color_4281346344, D.Color_4293716198, D.Color_4281346344, D.Color_4293716198, D.Color_4281346344, D.Color_4293716198, D.Color_4281346344, 0);
    D.Color_4290493371 = new B.Color(4290493371);
    D.Color_4283453778 = new B.Color(4283453778);
    D.CupertinoDynamicColor_Hla = new B.CupertinoDynamicColor(D.Color_4290493371, null, null, D.Color_4290493371, D.Color_4283453778, D.Color_4290493371, D.Color_4283453778, D.Color_4290493371, D.Color_4283453778, D.Color_4290493371, D.Color_4283453778, 0);
    D.CupertinoDynamicColor_aTW = new B.CupertinoDynamicColor(C.Color_4278190080, null, null, C.Color_4278190080, C.Color_4294967295, C.Color_4278190080, C.Color_4294967295, C.Color_4278190080, C.Color_4294967295, C.Color_4278190080, C.Color_4294967295, 0);
    D.Color_1279016003 = new B.Color(1279016003);
    D.Color_1290529781 = new B.Color(1290529781);
    D.Color_1614560323 = new B.Color(1614560323);
    D.Color_1626074101 = new B.Color(1626074101);
    D.CupertinoDynamicColor_oxt = new B.CupertinoDynamicColor(D.Color_1279016003, "placeholderText", null, D.Color_1279016003, D.Color_1290529781, D.Color_1614560323, D.Color_1626074101, D.Color_1279016003, D.Color_1290529781, D.Color_1614560323, D.Color_1626074101, 0);
    D.Color_343176320 = new B.Color(343176320);
    D.Color_762738304 = new B.Color(762738304);
    D.Color_678720640 = new B.Color(678720640);
    D.Color_1115059840 = new B.Color(1115059840);
    D.CupertinoDynamicColor_xDe = new B.CupertinoDynamicColor(D.Color_343176320, "quaternarySystemFill", null, D.Color_343176320, D.Color_762738304, D.Color_678720640, D.Color_1115059840, D.Color_343176320, D.Color_762738304, D.Color_678720640, D.Color_1115059840, 0);
    D.Duration_120000 = new B.Duration(120000);
    D.Duration_125000 = new B.Duration(125000);
    D.Duration_140000 = new B.Duration(140000);
    D.Duration_15000 = new B.Duration(15000);
    D.Duration_180000 = new B.Duration(180000);
    D.Duration_45000 = new B.Duration(45000);
    D.Duration_70000 = new B.Duration(70000);
    D.EdgeInsets_0_12_0_12 = new B.EdgeInsets(0, 12, 0, 12);
    D.EdgeInsets_0_3_0_3 = new B.EdgeInsets(0, 3, 0, 3);
    D.EdgeInsets_0_8_0_8 = new B.EdgeInsets(0, 8, 0, 8);
    D.EdgeInsets_12_12_12_12 = new B.EdgeInsets(12, 12, 12, 12);
    D.EdgeInsets_12_8_12_8 = new B.EdgeInsets(12, 8, 12, 8);
    D.EdgeInsets_18_16_18_16 = new B.EdgeInsets(18, 16, 18, 16);
    D.EdgeInsets_20_0_20_3 = new B.EdgeInsets(20, 0, 20, 3);
    D.EdgeInsets_4_0_4_0 = new B.EdgeInsets(4, 0, 4, 0);
    D.EdgeInsets_4_4_4_5 = new B.EdgeInsets(4, 4, 4, 5);
    D.EdgeInsets_8_0_8_0 = new B.EdgeInsets(8, 0, 8, 0);
    D.EdgeInsets_Otk = new B.EdgeInsets(0.5, 1, 0.5, 1);
    D.FloatingLabelBehavior_0 = new B.FloatingLabelBehavior(0, "never");
    D.FloatingLabelBehavior_2 = new B.FloatingLabelBehavior(2, "always");
    D.IconData_58372_MaterialIcons_null_false = new B.IconData(58372, "MaterialIcons", null, false);
    D.InlineSpanSemanticsInformation_o8k = new B.InlineSpanSemanticsInformation("\ufffc", null, null, true, true, C.List_empty1);
    D._NoInputBorder_uXA = new A._NoInputBorder(C.BorderSide_8xm);
    D.InputDecoration_C4W = new A.InputDecoration(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, false, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, true, null, null, null);
    D.Color_419430400 = new B.Color(419430400);
    D.BoxShadow_gEU0 = new B.BoxShadow(0.2, C.BlurStyle_0, D.Color_419430400, C.Offset_0_0, 11);
    D.List_GFk = B._setArrayType(makeConstList([D.BoxShadow_gEU0]), type$.JSArray_BoxShadow);
    D._DecorationSlot_0 = new A._DecorationSlot(0, "icon");
    D._DecorationSlot_1 = new A._DecorationSlot(1, "input");
    D._DecorationSlot_2 = new A._DecorationSlot(2, "label");
    D._DecorationSlot_3 = new A._DecorationSlot(3, "hint");
    D._DecorationSlot_4 = new A._DecorationSlot(4, "prefix");
    D._DecorationSlot_5 = new A._DecorationSlot(5, "suffix");
    D._DecorationSlot_6 = new A._DecorationSlot(6, "prefixIcon");
    D._DecorationSlot_7 = new A._DecorationSlot(7, "suffixIcon");
    D._DecorationSlot_8 = new A._DecorationSlot(8, "helperError");
    D._DecorationSlot_9 = new A._DecorationSlot(9, "counter");
    D._DecorationSlot_10 = new A._DecorationSlot(10, "container");
    D.List_UUO = B._setArrayType(makeConstList([D._DecorationSlot_0, D._DecorationSlot_1, D._DecorationSlot_2, D._DecorationSlot_3, D._DecorationSlot_4, D._DecorationSlot_5, D._DecorationSlot_6, D._DecorationSlot_7, D._DecorationSlot_8, D._DecorationSlot_9, D._DecorationSlot_10]), B.findType("JSArray<_DecorationSlot>"));
    D._KeyFrame_0_1 = new A._KeyFrame(0, 1);
    D._KeyFrame_WUF = new A._KeyFrame(0.5, 1);
    D._KeyFrame_ckA = new A._KeyFrame(0.5375, 0.75);
    D._KeyFrame_EKj = new A._KeyFrame(0.575, 0.5);
    D._KeyFrame_kqe = new A._KeyFrame(0.6125, 0.25);
    D._KeyFrame_wLM = new A._KeyFrame(0.65, 0);
    D._KeyFrame_j0s = new A._KeyFrame(0.85, 0);
    D._KeyFrame_DbH = new A._KeyFrame(0.8875, 0.25);
    D._KeyFrame_7BT = new A._KeyFrame(0.925, 0.5);
    D._KeyFrame_AKu = new A._KeyFrame(0.9625, 0.75);
    D._KeyFrame_1_1 = new A._KeyFrame(1, 1);
    D.List_WUp = B._setArrayType(makeConstList([D._KeyFrame_0_1, D._KeyFrame_WUF, D._KeyFrame_ckA, D._KeyFrame_EKj, D._KeyFrame_kqe, D._KeyFrame_wLM, D._KeyFrame_j0s, D._KeyFrame_DbH, D._KeyFrame_7BT, D._KeyFrame_AKu, D._KeyFrame_1_1]), B.findType("JSArray<_KeyFrame>"));
    D.List_empty10 = B._setArrayType(makeConstList([]), type$.JSArray_TextSelectionPoint);
    D.Offset_0_2 = new B.Offset(0, 2);
    D.BoxShadow_cJC = new B.BoxShadow(0.75, C.BlurStyle_0, D.Color_419430400, D.Offset_0_2, 1.5);
    D.List_yzp = B._setArrayType(makeConstList([D.BoxShadow_cJC]), type$.JSArray_BoxShadow);
    D.MagnifierInfo_Rjn = new A.MagnifierInfo(C.Offset_0_0, C.Rect_0_0_0_0, C.Rect_0_0_0_0, C.Rect_0_0_0_0);
    D.Offset_0_8 = new B.Offset(0, 8);
    D.List_iL9 = B._setArrayType(makeConstList(["deleteBackward:", "deleteWordBackward:", "deleteToBeginningOfLine:", "deleteForward:", "deleteWordForward:", "deleteToEndOfLine:", "moveLeft:", "moveRight:", "moveForward:", "moveBackward:", "moveUp:", "moveDown:", "moveLeftAndModifySelection:", "moveRightAndModifySelection:", "moveUpAndModifySelection:", "moveDownAndModifySelection:", "moveWordLeft:", "moveWordRight:", "moveToBeginningOfParagraph:", "moveToEndOfParagraph:", "moveWordLeftAndModifySelection:", "moveWordRightAndModifySelection:", "moveParagraphBackwardAndModifySelection:", "moveParagraphForwardAndModifySelection:", "moveToLeftEndOfLine:", "moveToRightEndOfLine:", "moveToBeginningOfDocument:", "moveToEndOfDocument:", "moveToLeftEndOfLineAndModifySelection:", "moveToRightEndOfLineAndModifySelection:", "moveToBeginningOfDocumentAndModifySelection:", "moveToEndOfDocumentAndModifySelection:", "transpose:", "scrollToBeginningOfDocument:", "scrollToEndOfDocument:", "scrollPageUp:", "scrollPageDown:", "pageUpAndModifySelection:", "pageDownAndModifySelection:", "cancelOperation:", "insertTab:", "insertBacktab:"]), type$.JSArray_String);
    D.ExtendSelectionToLineBreakIntent_false_true_false_false = new B.ExtendSelectionToLineBreakIntent(false, true, false, false);
    D.ExtendSelectionToLineBreakIntent_false_true_false_true = new B.ExtendSelectionToLineBreakIntent(false, true, false, true);
    D.Map_iLREK = new B.ConstantStringMap(42, {"deleteBackward:": C.DeleteCharacterIntent_false, "deleteWordBackward:": C.DeleteToNextWordBoundaryIntent_false, "deleteToBeginningOfLine:": C.DeleteToLineBreakIntent_false, "deleteForward:": C.DeleteCharacterIntent_true, "deleteWordForward:": C.DeleteToNextWordBoundaryIntent_true, "deleteToEndOfLine:": C.DeleteToLineBreakIntent_true, "moveLeft:": C.ExtendSelectionByCharacterIntent_true_false_false_false, "moveRight:": C.ExtendSelectionByCharacterIntent_true_false_false_true, "moveForward:": C.ExtendSelectionByCharacterIntent_true_false_false_true, "moveBackward:": C.ExtendSelectionByCharacterIntent_true_false_false_false, "moveUp:": C.ExtendSelectionVerticallyToAdjacentLineIntent_true_false_false_false, "moveDown:": C.ExtendSelectionVerticallyToAdjacentLineIntent_true_false_false_true, "moveLeftAndModifySelection:": C.ExtendSelectionByCharacterIntent_false_false_false_false, "moveRightAndModifySelection:": C.ExtendSelectionByCharacterIntent_false_false_false_true, "moveUpAndModifySelection:": C.ExtendSelectionVerticallyToAdjacentLineIntent_false_false_false_false, "moveDownAndModifySelection:": C.ExtendSelectionVerticallyToAdjacentLineIntent_false_false_false_true, "moveWordLeft:": C.ExtendSelectionToNextWordBoundaryIntent_true_false_false_false, "moveWordRight:": C.ExtendSelectionToNextWordBoundaryIntent_true_false_false_true, "moveToBeginningOfParagraph:": C.ExtendSelectionToLineBreakIntent_true_false_false_false, "moveToEndOfParagraph:": C.ExtendSelectionToLineBreakIntent_true_false_false_true, "moveWordLeftAndModifySelection:": C.ExtendSelectionToNextWordBoundaryOrCaretLocationIntent_false, "moveWordRightAndModifySelection:": C.ExtendSelectionToNextWordBoundaryOrCaretLocationIntent_true, "moveParagraphBackwardAndModifySelection:": D.ExtendSelectionToLineBreakIntent_false_true_false_false, "moveParagraphForwardAndModifySelection:": D.ExtendSelectionToLineBreakIntent_false_true_false_true, "moveToLeftEndOfLine:": C.ExtendSelectionToLineBreakIntent_true_false_false_false, "moveToRightEndOfLine:": C.ExtendSelectionToLineBreakIntent_true_false_false_true, "moveToBeginningOfDocument:": C.ExtendSelectionToDocumentBoundaryIntent_true_false_false_false, "moveToEndOfDocument:": C.ExtendSelectionToDocumentBoundaryIntent_true_false_false_true, "moveToLeftEndOfLineAndModifySelection:": C.ExpandSelectionToLineBreakIntent_false, "moveToRightEndOfLineAndModifySelection:": C.ExpandSelectionToLineBreakIntent_true, "moveToBeginningOfDocumentAndModifySelection:": C.ExpandSelectionToDocumentBoundaryIntent_false, "moveToEndOfDocumentAndModifySelection:": C.ExpandSelectionToDocumentBoundaryIntent_true, "transpose:": C.C_TransposeCharactersIntent, "scrollToBeginningOfDocument:": C.ScrollToDocumentBoundaryIntent_false, "scrollToEndOfDocument:": C.ScrollToDocumentBoundaryIntent_true, "scrollPageUp:": C.ScrollIntent_qxw, "scrollPageDown:": C.ScrollIntent_KrF, "pageUpAndModifySelection:": C.ExtendSelectionVerticallyToAdjacentPageIntent_false_false_false_false, "pageDownAndModifySelection:": C.ExtendSelectionVerticallyToAdjacentPageIntent_false_false_false_true, "cancelOperation:": C.C_DismissIntent, "insertTab:": C.C_NextFocusIntent, "insertBacktab:": C.C_PreviousFocusIntent}, D.List_iL9, B.findType("ConstantStringMap<String,Intent>"));
    D.MaterialState_7 = new B.MaterialState(7, "error");
    D.MaxLengthEnforcement_0 = new A.MaxLengthEnforcement(0, "none");
    D.MaxLengthEnforcement_2 = new A.MaxLengthEnforcement(2, "truncateAfterCompositionEnds");
    D.Offset_0_20 = new B.Offset(0, 20);
    D.Offset_0_26 = new B.Offset(0, 26);
    D.Offset_11_m4 = new B.Offset(11, -4);
    D.Offset_22_0 = new B.Offset(22, 0);
    D.Offset_6_6 = new B.Offset(6, 6);
    D.Offset_6pl = new B.Offset(5, 10.5);
    D.Offset_MNd = new B.Offset(0, -0.25);
    D.OptionalMethodChannel_CGY = new B.OptionalMethodChannel("flutter/spellcheck", C.C_StandardMethodCodec0);
    D.PathOperation_2 = new A.PathOperation(2, "union");
    D.Radius_1_1 = new B.Radius(1, 1);
    D.Rect_Vy7 = new B.Rect(-1 / 0, -1 / 0, 1 / 0, 1 / 0);
    D.RenderAnimatedSizeState_0 = new A.RenderAnimatedSizeState(0, "start");
    D.RenderAnimatedSizeState_1 = new A.RenderAnimatedSizeState(1, "stable");
    D.RenderAnimatedSizeState_2 = new A.RenderAnimatedSizeState(2, "changed");
    D.RenderAnimatedSizeState_3 = new A.RenderAnimatedSizeState(3, "unstable");
    D.SelectionChangedCause_0 = new B.SelectionChangedCause(0, "tap");
    D.SelectionChangedCause_1 = new B.SelectionChangedCause(1, "doubleTap");
    D.SelectionChangedCause_2 = new B.SelectionChangedCause(2, "longPress");
    D.SelectionChangedCause_3 = new B.SelectionChangedCause(3, "forcePress");
    D.SelectionChangedCause_5 = new B.SelectionChangedCause(5, "toolbar");
    D.SelectionChangedCause_6 = new B.SelectionChangedCause(6, "drag");
    D.SelectionChangedCause_7 = new B.SelectionChangedCause(7, "scribble");
    D.Size_22_22 = new B.Size(22, 22);
    D.Size_48_36 = new B.Size(48, 36);
    D.Size_48_48 = new B.Size(48, 48);
    D.Size_64_36 = new B.Size(64, 36);
    D.Size_6v8 = new B.Size(80, 47.5);
    D.Size_Q8J = new B.Size(77.37, 37.9);
    D.SmartDashesType_1 = new A.SmartDashesType(1, "enabled");
    D.SmartQuotesType_1 = new A.SmartQuotesType(1, "enabled");
    D.SpellCheckConfiguration_null_null_false = new A.SpellCheckConfiguration(null, null, false);
    D.StrutStyle_yfz = new A.StrutStyle(null, null, null, 0, null, null, 0, null, null);
    D.TextAlignVertical_0 = new A.TextAlignVertical(0);
    D.TextAlignVertical_m1 = new A.TextAlignVertical(-1);
    D.TextCapitalization_3 = new A.TextCapitalization0(3, "none");
    D.TextInputType_0_null_null = new B.TextInputType(0, null, null);
    D.TextHeightBehavior_TextLeadingDistribution_0 = new B.TextHeightBehavior(C.TextLeadingDistribution_0);
    D.TextInputType_1_null_null = new B.TextInputType(1, null, null);
    D.TextMagnifierConfiguration_null_true = new A.TextMagnifierConfiguration(null, true);
    D.TextSelectionHandleType_2 = new B.TextSelectionHandleType(2, "collapsed");
    D.TextSelection_3Ex1 = new B.TextSelection(0, 0, C.TextAffinity_1, false, 0, 0);
    D.TextStyle_9Zz = new B.TextStyle(true, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, C.TextDecoration_1, null, null, null, null, null, null, null, null);
    D.TextStyle_Ybt = new B.TextStyle(false, null, null, null, null, null, 14, C.FontWeight_3, null, -0.15, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    D.ToolbarOptions_false_false_false_false = new A.ToolbarOptions(false, false, false, false);
    D.ToolbarOptions_true_true_true_true = new A.ToolbarOptions(true, true, true, true);
    D.Type_0Jp0 = B.typeLiteral("ExtendSelectionToDocumentBoundaryIntent");
    D.Type_0Jp = B.typeLiteral("ExtendSelectionToNextWordBoundaryIntent");
    D.Type_23B = B.typeLiteral("ExtendSelectionToLineBreakIntent");
    D.Type_3dk = B.typeLiteral("ExtendSelectionByCharacterIntent");
    D.Type_46c = B.typeLiteral("ScrollToDocumentBoundaryIntent");
    D.Type_CopySelectionTextIntent_T5o = B.typeLiteral("CopySelectionTextIntent");
    D.Type_CupertinoLocalizations_10U = B.typeLiteral("CupertinoLocalizations");
    D.Type_DeleteCharacterIntent_NYh = B.typeLiteral("DeleteCharacterIntent");
    D.Type_DeleteToLineBreakIntent_MEg = B.typeLiteral("DeleteToLineBreakIntent");
    D.Type_EditableText_C3e = B.typeLiteral("EditableText");
    D.Type_ExtendSelectionByPageIntent_gMT = B.typeLiteral("ExtendSelectionByPageIntent");
    D.Type_PasteTextIntent_i6t = B.typeLiteral("PasteTextIntent");
    D.Type_RedoTextIntent_yzJ = B.typeLiteral("RedoTextIntent");
    D.Type_ReplaceTextIntent_S40 = B.typeLiteral("ReplaceTextIntent");
    D.Type_SelectAllTextIntent_5TD = B.typeLiteral("SelectAllTextIntent");
    D.Type_TransposeCharactersIntent_a66 = B.typeLiteral("TransposeCharactersIntent");
    D.Type_UndoTextIntent_yzJ = B.typeLiteral("UndoTextIntent");
    D.Type_UpdateSelectionIntent_RH1 = B.typeLiteral("UpdateSelectionIntent");
    D.Type_ejq = B.typeLiteral("ExtendSelectionVerticallyToAdjacentLineIntent");
    D.Type_ejq0 = B.typeLiteral("ExtendSelectionVerticallyToAdjacentPageIntent");
    D.Type_kr3 = B.typeLiteral("ExpandSelectionToDocumentBoundaryIntent");
    D.Type_muk = B.typeLiteral("DoNothingAndStopPropagationTextIntent");
    D.Type_mya = B.typeLiteral("ExtendSelectionToNextWordBoundaryOrCaretLocationIntent");
    D.Type_oyU = B.typeLiteral("ExpandSelectionToLineBreakIntent");
    D.Type_wu8 = B.typeLiteral("DeleteToNextWordBoundaryIntent");
    D.BorderSide_tAf0 = new B.BorderSide(C.Color_4278190080, 1, C.BorderStyle_1, -1);
    D.UnderlineInputBorder_7hp = new A.UnderlineInputBorder(D.BorderRadius_tLn2, D.BorderSide_tAf0);
    D._CupertinoTextSelectionToolbarItemsSlot_0 = new A._CupertinoTextSelectionToolbarItemsSlot(0, "backButton");
    D._CupertinoTextSelectionToolbarItemsSlot_1 = new A._CupertinoTextSelectionToolbarItemsSlot(1, "nextButton");
    D._CupertinoTextSelectionToolbarItemsSlot_2 = new A._CupertinoTextSelectionToolbarItemsSlot(2, "nextButtonDisabled");
    D._EnabledAndDisabledMouseCursor_SystemMouseCursor_text_textable = new B._EnabledAndDisabledMouseCursor(C.SystemMouseCursor_text, "textable");
    D._NullWidget_null1 = new A._NullWidget3(null);
    D._ScribblePlaceholder_IBZ = new A._ScribblePlaceholder(C.Size_0_0, C.SizedBox_0_0_null_null, C.PlaceholderAlignment_4, null, null);
    D.Size_100_0 = new B.Size(100, 0);
    D._ScribblePlaceholder_IBZ0 = new A._ScribblePlaceholder(D.Size_100_0, C.SizedBox_0_0_null_null, C.PlaceholderAlignment_4, null, null);
    D._TextSelectionToolbarItemPosition_0 = new A._TextSelectionToolbarItemPosition(0, "first");
    D._TextSelectionToolbarItemPosition_1 = new A._TextSelectionToolbarItemPosition(1, "middle");
    D._TextSelectionToolbarItemPosition_2 = new A._TextSelectionToolbarItemPosition(2, "last");
    D._TextSelectionToolbarItemPosition_3 = new A._TextSelectionToolbarItemPosition(3, "only");
  })();
  (function staticFields() {
    $.TextInputConnection__nextId = 1;
    $.ContextMenuController__shownInstance = null;
    $.ContextMenuController__menuOverlayEntry = null;
    $._ScribbleFocusableState__nextElementIdentifier = 1;
  })();
  (function lazyInitializers() {
    var _lazyFinal = hunkHelpers.lazyFinal,
      _lazy = hunkHelpers.lazy;
    _lazyFinal($, "cupertinoDesktopTextSelectionHandleControls", "$get$cupertinoDesktopTextSelectionHandleControls", () => new A._CupertinoDesktopTextSelectionHandleControls());
    _lazyFinal($, "cupertinoTextSelectionHandleControls", "$get$cupertinoTextSelectionHandleControls", () => new A.CupertinoTextSelectionHandleControls());
    _lazy($, "_NullElement_instance0", "$get$_NullElement_instance0", () => {
      var t1 = new A._NullElement0(D._NullWidget_null1, C._ElementLifecycle_0);
      t1.Element$1(D._NullWidget_null1);
      return t1;
    });
    _lazyFinal($, "desktopTextSelectionHandleControls", "$get$desktopTextSelectionHandleControls", () => new A._DesktopTextSelectionHandleControls());
    _lazy($, "TextMagnifier_adaptiveMagnifierConfiguration", "$get$TextMagnifier_adaptiveMagnifierConfiguration", () => new A.TextMagnifierConfiguration(new A.TextMagnifier_adaptiveMagnifierConfiguration_closure(), B.defaultTargetPlatform() === C.TargetPlatform_2));
    _lazyFinal($, "materialTextSelectionHandleControls", "$get$materialTextSelectionHandleControls", () => new A.MaterialTextSelectionHandleControls());
    _lazyFinal($, "FilteringTextInputFormatter_singleLineFormatter", "$get$FilteringTextInputFormatter_singleLineFormatter", () => new A.FilteringTextInputFormatter("\n", false, ""));
  })();
};

$__dart_deferred_initializers__["d7zU3eIlc9GxlH59/YcYCsSyXjc="] = $__dart_deferred_initializers__.current
