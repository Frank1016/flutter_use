// Generated by dart2js (NullSafetyMode.sound, csp, deferred-serialization, intern-composite-values), the Dart to JavaScript compiler version: 2.19.6.
self.$__dart_deferred_initializers__ = self.$__dart_deferred_initializers__ || Object.create(null);
$__dart_deferred_initializers__.current = function(hunkHelpers, init, holdersList, $) {
  var A = {SliverLogicalContainerParentData: function SliverLogicalContainerParentData(t0, t1) {
      this.ContainerParentDataMixin_previousSibling = t0;
      this.ContainerParentDataMixin_nextSibling = t1;
      this.layoutOffset = null;
    }, _SliverLogicalContainerParentData_SliverLogicalParentData_ContainerParentDataMixin: function _SliverLogicalContainerParentData_SliverLogicalParentData_ContainerParentDataMixin() {
    }, RenderSliverPadding: function RenderSliverPadding(t0, t1, t2, t3) {
      var _ = this;
      _._sliver_padding$_resolvedPadding = null;
      _._sliver_padding$_padding = t0;
      _._sliver_padding$_textDirection = t1;
      _.RenderObjectWithChildMixin__child = t2;
      _._geometry = null;
      _._debugDisposed = false;
      _.debugCreator = _.parentData = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _._debugDoingThisPaint = false;
      _.__RenderObject__wasRepaintBoundary_A = $;
      _._layerHandle = t3;
      _._needsCompositingBitsUpdate = false;
      _.__RenderObject__needsCompositing_A = $;
      _._needsPaint = true;
      _._needsCompositedLayerUpdate = false;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._depth = 0;
      _._node$_parent = _._node$_owner = null;
    }, RenderShrinkWrappingViewport: function RenderShrinkWrappingViewport(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10) {
      var _ = this;
      _.__RenderShrinkWrappingViewport__shrinkWrapExtent_A = _.__RenderShrinkWrappingViewport__maxScrollExtent_A = $;
      _._viewport$_hasVisualOverflow = false;
      _._viewport$_axisDirection = t0;
      _._crossAxisDirection = t1;
      _._viewport$_offset = t2;
      _._cacheExtent = t3;
      _._calculatedCacheExtent = null;
      _._cacheExtentStyle = t4;
      _._viewport$_clipBehavior = t5;
      _._viewport$_clipRectLayer = t6;
      _.ContainerRenderObjectMixin__childCount = t7;
      _.ContainerRenderObjectMixin__firstChild = t8;
      _.ContainerRenderObjectMixin__lastChild = t9;
      _._cachedDryLayoutSizes = _._cachedIntrinsicDimensions = null;
      _._computingThisDryLayout = false;
      _._cachedBaselines = _._size = null;
      _._debugActivePointers = 0;
      _._debugDisposed = false;
      _.debugCreator = _.parentData = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _._debugDoingThisPaint = false;
      _.__RenderObject__wasRepaintBoundary_A = $;
      _._layerHandle = t10;
      _._needsCompositingBitsUpdate = false;
      _.__RenderObject__needsCompositing_A = $;
      _._needsPaint = true;
      _._needsCompositedLayerUpdate = false;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._depth = 0;
      _._node$_parent = _._node$_owner = null;
    }, SliverPadding: function SliverPadding(t0, t1, t2) {
      this.padding = t0;
      this.child = t1;
      this.key = t2;
    }, AlwaysScrollableScrollPhysics: function AlwaysScrollableScrollPhysics(t0) {
      this.parent = t0;
    }, ScrollView: function ScrollView() {
    }, ScrollView_build_closure: function ScrollView_build_closure(t0, t1, t2) {
      this.$this = t0;
      this.axisDirection = t1;
      this.slivers = t2;
    }, ScrollView_build_closure0: function ScrollView_build_closure0(t0) {
      this.context = t0;
    }, BoxScrollView: function BoxScrollView() {
    },
    SliverChildListDelegate$(children, addAutomaticKeepAlives, addRepaintBoundaries, addSemanticIndexes) {
      return new A.SliverChildListDelegate(true, true, true, children, B.LinkedHashMap_LinkedHashMap$_literal([null, 0], type$.nullable_Key, type$.int));
    },
    SliverChildListDelegate: function SliverChildListDelegate(t0, t1, t2, t3, t4) {
      var _ = this;
      _.addAutomaticKeepAlives = t0;
      _.addRepaintBoundaries = t1;
      _.addSemanticIndexes = t2;
      _.children = t3;
      _._keyToIndex = t4;
    },
    ShrinkWrappingViewport: function ShrinkWrappingViewport(t0, t1, t2, t3, t4) {
      var _ = this;
      _.axisDirection = t0;
      _.offset = t1;
      _.clipBehavior = t2;
      _.children = t3;
      _.key = t4;
    },
    KeepAlivePage: function KeepAlivePage(t0, t1) {
      this.child = t0;
      this.key = t1;
    },
    _KeepAliveState: function _KeepAliveState(t0, t1) {
      var _ = this;
      _.AutomaticKeepAliveClientMixin__keepAliveHandle = t0;
      _._widget = null;
      _._debugLifecycleState = t1;
      _._framework$_element = null;
    },
    __KeepAliveState_State_AutomaticKeepAliveClientMixin: function __KeepAliveState_State_AutomaticKeepAliveClientMixin() {
    },
    jsonDecode(source, reviver) {
      return D.C_JsonCodec.decode$2$reviver(0, B._asString(source), type$.nullable_nullable_Object_Function_2_nullable_Object_and_nullable_Object._as(reviver));
    }
  },
  B, D, C, G, F, H, I, J, E;
  A = hunkHelpers.updateHolder(holdersList[38], A);
  B = holdersList[0];
  D = holdersList[2];
  C = holdersList[43];
  G = holdersList[77];
  F = holdersList[49];
  H = holdersList[53];
  I = holdersList[86];
  J = holdersList[1];
  E = holdersList[81];
  A.SliverLogicalContainerParentData.prototype = {};
  A._SliverLogicalContainerParentData_SliverLogicalParentData_ContainerParentDataMixin.prototype = {
    detach$0(_) {
      this.super$ParentData$detach(0);
    }
  };
  A.RenderSliverPadding.prototype = {
    get$resolvedPadding() {
      return this._sliver_padding$_resolvedPadding;
    },
    _sliver_padding$_resolve$0() {
      if (this._sliver_padding$_resolvedPadding != null)
        return;
      this._sliver_padding$_resolvedPadding = this._sliver_padding$_padding;
    },
    set$padding(_, value) {
      var _this = this;
      if (_this._sliver_padding$_padding.$eq(0, value))
        return;
      _this._sliver_padding$_padding = value;
      _this._sliver_padding$_resolvedPadding = null;
      _this.markNeedsLayout$0();
    },
    set$textDirection(value) {
      var _this = this;
      if (_this._sliver_padding$_textDirection === value)
        return;
      _this._sliver_padding$_textDirection = value;
      _this._sliver_padding$_resolvedPadding = null;
      _this.markNeedsLayout$0();
    },
    performLayout$0() {
      this._sliver_padding$_resolve$0();
      this.super$RenderSliverEdgeInsetsPadding$performLayout();
    }
  };
  A.RenderShrinkWrappingViewport.prototype = {
    setupParentData$1(child) {
      if (!(child.parentData instanceof A.SliverLogicalContainerParentData))
        child.parentData = new A.SliverLogicalContainerParentData(null, null);
    },
    performLayout$0() {
      var mainAxisExtent, crossAxisExtent, t1, t2, t3, t4, t5, effectiveExtent, t6, t7, t8, t9, t10, correction, didAcceptViewportDimension, didAcceptContentDimension, _this = this,
        constraints = type$.BoxConstraints._as(B.RenderObject.prototype.get$constraints.call(_this));
      if (_this.ContainerRenderObjectMixin__firstChild == null) {
        switch (B.axisDirectionToAxis(_this._viewport$_axisDirection).index) {
          case 1:
            _this._size = new B.Size(constraints.maxWidth, constraints.minHeight);
            break;
          case 0:
            _this._size = new B.Size(constraints.minWidth, constraints.maxHeight);
            break;
        }
        _this._viewport$_offset.applyViewportDimension$1(0);
        _this.__RenderShrinkWrappingViewport__shrinkWrapExtent_A = _this.__RenderShrinkWrappingViewport__maxScrollExtent_A = 0;
        _this._viewport$_hasVisualOverflow = false;
        _this._viewport$_offset.applyContentDimensions$2(0, 0);
        return;
      }
      switch (B.axisDirectionToAxis(_this._viewport$_axisDirection).index) {
        case 1:
          mainAxisExtent = constraints.maxHeight;
          crossAxisExtent = constraints.maxWidth;
          break;
        case 0:
          mainAxisExtent = constraints.maxWidth;
          crossAxisExtent = constraints.maxHeight;
          break;
        default:
          mainAxisExtent = null;
          crossAxisExtent = null;
      }
      t1 = _this.get$childAfter();
      t2 = constraints.minWidth;
      t3 = constraints.maxWidth;
      t4 = constraints.minHeight;
      t5 = constraints.maxHeight;
      effectiveExtent = null;
      do {
        t6 = _this._viewport$_offset._pixels;
        t6.toString;
        B._asDouble(mainAxisExtent);
        B._asDouble(crossAxisExtent);
        _this.__RenderShrinkWrappingViewport__shrinkWrapExtent_A = _this.__RenderShrinkWrappingViewport__maxScrollExtent_A = 0;
        _this._viewport$_hasVisualOverflow = t6 < 0;
        switch (_this._cacheExtentStyle.index) {
          case 0:
            _this._calculatedCacheExtent = _this._cacheExtent;
            break;
          case 1:
            _this._calculatedCacheExtent = mainAxisExtent * _this._cacheExtent;
            break;
        }
        t7 = _this.ContainerRenderObjectMixin__firstChild;
        t8 = Math.max(0, t6);
        t9 = Math.min(0, t6);
        t6 = Math.max(0, -t6);
        t10 = _this._calculatedCacheExtent;
        t10.toString;
        correction = _this.layoutChildSequence$11$advance$cacheOrigin$child$crossAxisExtent$growthDirection$layoutOffset$mainAxisExtent$overlap$remainingCacheExtent$remainingPaintExtent$scrollOffset(t1, -t10, t7, crossAxisExtent, D.GrowthDirection_0, t6, mainAxisExtent, t9, mainAxisExtent + 2 * t10, mainAxisExtent + t9, t8);
        if (correction !== 0)
          _this._viewport$_offset.correctBy$1(correction);
        else {
          switch (B.axisDirectionToAxis(_this._viewport$_axisDirection).index) {
            case 1:
              effectiveExtent = B.clampDouble(_this.__RenderShrinkWrappingViewport__shrinkWrapExtent_A, t4, t5);
              break;
            case 0:
              effectiveExtent = B.clampDouble(_this.__RenderShrinkWrappingViewport__shrinkWrapExtent_A, t2, t3);
              break;
          }
          didAcceptViewportDimension = _this._viewport$_offset.applyViewportDimension$1(effectiveExtent);
          t6 = _this._viewport$_offset;
          t7 = _this.__RenderShrinkWrappingViewport__maxScrollExtent_A;
          if (typeof effectiveExtent !== "number")
            return B.iae(effectiveExtent);
          didAcceptContentDimension = t6.applyContentDimensions$2(0, Math.max(0, t7 - effectiveExtent));
          if (didAcceptViewportDimension && didAcceptContentDimension)
            break;
        }
      } while (true);
      switch (B.axisDirectionToAxis(_this._viewport$_axisDirection).index) {
        case 1:
          B._asDouble(effectiveExtent);
          _this._size = new B.Size(B.clampDouble(crossAxisExtent, t2, t3), B.clampDouble(effectiveExtent, t4, t5));
          break;
        case 0:
          _this._size = new B.Size(B.clampDouble(B._asDouble(effectiveExtent), t2, t3), B.clampDouble(crossAxisExtent, t4, t5));
          break;
      }
    },
    get$hasVisualOverflow() {
      return this._viewport$_hasVisualOverflow;
    },
    updateOutOfBandData$2(growthDirection, childLayoutGeometry) {
      var _this = this,
        t1 = _this.__RenderShrinkWrappingViewport__maxScrollExtent_A;
      t1 === $ && B.throwLateFieldNI("_maxScrollExtent");
      _this.__RenderShrinkWrappingViewport__maxScrollExtent_A = t1 + childLayoutGeometry.scrollExtent;
      if (childLayoutGeometry.hasVisualOverflow)
        _this._viewport$_hasVisualOverflow = true;
      t1 = _this.__RenderShrinkWrappingViewport__shrinkWrapExtent_A;
      t1 === $ && B.throwLateFieldNI("_shrinkWrapExtent");
      _this.__RenderShrinkWrappingViewport__shrinkWrapExtent_A = t1 + childLayoutGeometry.maxPaintExtent;
    },
    updateChildLayoutOffset$3(child, layoutOffset, growthDirection) {
      var t1 = child.parentData;
      t1.toString;
      type$.SliverLogicalParentData._as(t1).layoutOffset = layoutOffset;
    },
    paintOffsetOf$1(child) {
      var t1 = child.parentData;
      t1.toString;
      t1 = type$.SliverLogicalParentData._as(t1).layoutOffset;
      t1.toString;
      return this.computeAbsolutePaintOffset$3(child, t1, D.GrowthDirection_0);
    },
    scrollOffsetOf$2(child, scrollOffsetWithinChild) {
      var t1, t2, scrollOffsetToChild, t3,
        current = this.ContainerRenderObjectMixin__firstChild;
      for (t1 = B._instanceType(this), t2 = t1._eval$1("ContainerRenderObjectMixin.0"), t1 = t1._eval$1("ContainerRenderObjectMixin.1"), scrollOffsetToChild = 0; current !== child;) {
        scrollOffsetToChild += current._geometry.scrollExtent;
        t3 = t2._as(current).parentData;
        t3.toString;
        current = t1._as(t3).ContainerParentDataMixin_nextSibling;
      }
      return scrollOffsetToChild + scrollOffsetWithinChild;
    },
    maxScrollObstructionExtentBefore$1(child) {
      var t1, t2, t3,
        current = this.ContainerRenderObjectMixin__firstChild;
      for (t1 = B._instanceType(this), t2 = t1._eval$1("ContainerRenderObjectMixin.0"), t1 = t1._eval$1("ContainerRenderObjectMixin.1"); current !== child;) {
        current._geometry.toString;
        t3 = t2._as(current).parentData;
        t3.toString;
        current = t1._as(t3).ContainerParentDataMixin_nextSibling;
      }
      return 0;
    },
    applyPaintTransform$2(child, transform) {
      var offset = this.paintOffsetOf$1(type$.RenderSliver._as(child));
      transform.translate$2(0, offset._dx, offset._dy);
    },
    computeChildMainAxisPosition$2(child, parentMainAxisPosition) {
      var t2,
        t1 = child.parentData;
      t1.toString;
      type$.SliverLogicalParentData._as(t1);
      t2 = type$.SliverConstraints;
      switch (B.applyGrowthDirectionToAxisDirection(t2._as(B.RenderObject.prototype.get$constraints.call(child)).axisDirection, t2._as(B.RenderObject.prototype.get$constraints.call(child)).growthDirection)) {
        case D.AxisDirection_2:
        case D.AxisDirection_1:
          t1 = t1.layoutOffset;
          t1.toString;
          return parentMainAxisPosition - t1;
        case D.AxisDirection_0:
          t2 = this._size._dy;
          t1 = t1.layoutOffset;
          t1.toString;
          return t2 - parentMainAxisPosition - t1;
        case D.AxisDirection_3:
          t2 = this._size._dx;
          t1 = t1.layoutOffset;
          t1.toString;
          return t2 - parentMainAxisPosition - t1;
      }
    },
    get$childrenInPaintOrder() {
      var t1, t2, t3,
        children = B._setArrayType([], type$.JSArray_RenderSliver),
        child = this.ContainerRenderObjectMixin__lastChild;
      for (t1 = B._instanceType(this), t2 = t1._eval$1("ContainerRenderObjectMixin.0"), t1 = t1._eval$1("ContainerRenderObjectMixin.1"); child != null;) {
        D.JSArray_methods.add$1(children, child);
        t3 = t2._as(child).parentData;
        t3.toString;
        child = t1._as(t3).ContainerParentDataMixin_previousSibling;
      }
      return children;
    },
    get$childrenInHitTestOrder() {
      var t1, t2, t3,
        children = B._setArrayType([], type$.JSArray_RenderSliver),
        child = this.ContainerRenderObjectMixin__firstChild;
      for (t1 = B._instanceType(this), t2 = t1._eval$1("ContainerRenderObjectMixin.0"), t1 = t1._eval$1("ContainerRenderObjectMixin.1"); child != null;) {
        D.JSArray_methods.add$1(children, child);
        t3 = t2._as(child).parentData;
        t3.toString;
        child = t1._as(t3).ContainerParentDataMixin_nextSibling;
      }
      return children;
    }
  };
  A.SliverPadding.prototype = {
    createRenderObject$1(context) {
      var t1 = context.dependOnInheritedWidgetOfExactType$1$0(type$.Directionality);
      t1.toString;
      t1 = new A.RenderSliverPadding(this.padding, t1.textDirection, null, B.LayerHandle$(type$.ContainerLayer));
      t1.RenderObject$0();
      t1.set$child(null);
      return t1;
    },
    updateRenderObject$2(context, renderObject) {
      var t1;
      type$.RenderSliverPadding._as(renderObject);
      renderObject.set$padding(0, this.padding);
      t1 = context.dependOnInheritedWidgetOfExactType$1$0(type$.Directionality);
      t1.toString;
      renderObject.set$textDirection(t1.textDirection);
    }
  };
  A.AlwaysScrollableScrollPhysics.prototype = {
    applyTo$1(ancestor) {
      return new A.AlwaysScrollableScrollPhysics(this.buildParent$1(ancestor));
    },
    shouldAcceptUserOffset$1(position) {
      return true;
    }
  };
  A.ScrollView.prototype = {
    buildViewport$4(context, offset, axisDirection, slivers) {
      var _this = this;
      type$.List_Widget._as(slivers);
      if (_this.shrinkWrap)
        return new A.ShrinkWrappingViewport(axisDirection, offset, _this.clipBehavior, slivers, null);
      return C.Viewport$(0, axisDirection, _this.cacheExtent, G.CacheExtentStyle_0, null, _this.clipBehavior, offset, slivers);
    },
    build$1(context) {
      var mediaQuery, t1, mediaQueryHorizontalPadding, mediaQueryVerticalPadding, slivers, t2, effectivePrimary, scrollController, scrollable, scrollableResult, _this = this, _null = null,
        sliver = _this.buildChildLayout$1(context),
        effectivePadding = _this.padding;
      if (effectivePadding == null) {
        mediaQuery = B.MediaQuery_maybeOf(context);
        if (mediaQuery != null) {
          t1 = mediaQuery.padding;
          mediaQueryHorizontalPadding = t1.copyWith$2$bottom$top(0, 0);
          mediaQueryVerticalPadding = t1.copyWith$2$left$right(0, 0);
          t1 = _this.scrollDirection === D.Axis_1;
          effectivePadding = t1 ? mediaQueryVerticalPadding : mediaQueryHorizontalPadding;
          sliver = new B.MediaQuery(mediaQuery.copyWith$1$padding(t1 ? mediaQueryHorizontalPadding : mediaQueryVerticalPadding), sliver, _null);
        }
      }
      slivers = B._setArrayType([effectivePadding != null ? new A.SliverPadding(effectivePadding, sliver, _null) : sliver], type$.JSArray_Widget);
      t1 = _this.scrollDirection;
      t2 = F.getAxisDirectionFromAxisReverseAndDirectionality(context, t1, false);
      effectivePrimary = _this.primary;
      if (effectivePrimary == null)
        effectivePrimary = F.PrimaryScrollController_shouldInherit(context, t1);
      scrollController = effectivePrimary ? B.PrimaryScrollController_maybeOf(context) : _this.controller;
      scrollable = H.Scrollable$(t2, _this.clipBehavior, scrollController, _this.dragStartBehavior, false, _null, _this.physics, _this.restorationId, _null, _this.semanticChildCount, new A.ScrollView_build_closure(_this, t2, slivers));
      scrollableResult = effectivePrimary && scrollController != null ? F.PrimaryScrollController$none(scrollable) : scrollable;
      if (_this.keyboardDismissBehavior === I.ScrollViewKeyboardDismissBehavior_1)
        return new B.NotificationListener(new A.ScrollView_build_closure0(context), scrollableResult, _null, type$.NotificationListener_ScrollUpdateNotification);
      else
        return scrollableResult;
    }
  };
  A.BoxScrollView.prototype = {};
  A.SliverChildListDelegate.prototype = {
    _findChildIndex$1(key) {
      var t2, t3, index, _null = null,
        t1 = this._keyToIndex;
      if (!t1.containsKey$1(0, key)) {
        t2 = t1.$index(0, _null);
        t2.toString;
        for (t3 = this.children, index = t2; index < t3.length;) {
          t2 = t3[index].key;
          if (t2 != null)
            t1.$indexSet(0, t2, index);
          if (J.$eq$(t2, key)) {
            t1.$indexSet(0, _null, index + 1);
            return index;
          }
          ++index;
        }
        t1.$indexSet(0, _null, index);
      } else
        return t1.$index(0, key);
      return _null;
    },
    findIndexByKey$1(key) {
      return this._findChildIndex$1(key instanceof C._SaltedValueKey ? key.value : key);
    },
    build$2(context, index) {
      var t1, child, key, semanticIndex, _null = null;
      if (index < 0 || index >= this.children.length)
        return _null;
      t1 = this.children;
      if (!(index >= 0 && index < t1.length))
        return B.ioore(t1, index);
      child = t1[index];
      t1 = child.key;
      key = t1 != null ? new C._SaltedValueKey(t1) : _null;
      child = new B.RepaintBoundary(child, _null);
      semanticIndex = C._kDefaultSemanticIndexCallback(child, index);
      child = semanticIndex != null ? new C.IndexedSemantics(semanticIndex, child, _null) : child;
      return new B.KeyedSubtree(new C.AutomaticKeepAlive(new C._SelectionKeepAlive(child, _null), _null), key);
    },
    get$estimatedChildCount() {
      return this.children.length;
    },
    shouldRebuild$1(oldDelegate) {
      return this.children !== type$.SliverChildListDelegate._as(oldDelegate).children;
    }
  };
  A.ShrinkWrappingViewport.prototype = {
    createRenderObject$1(context) {
      var t1 = this.axisDirection,
        t2 = C.Viewport_getDefaultCrossAxisDirection(context, t1),
        t3 = B.LayerHandle$(type$.ClipRectLayer);
      t1 = new A.RenderShrinkWrappingViewport(t1, t2, this.offset, 250, G.CacheExtentStyle_0, this.clipBehavior, t3, 0, null, null, B.LayerHandle$(type$.ContainerLayer));
      t1.RenderObject$0();
      t1.addAll$1(0, null);
      return t1;
    },
    updateRenderObject$2(context, renderObject) {
      var t1;
      type$.RenderShrinkWrappingViewport._as(renderObject);
      t1 = this.axisDirection;
      renderObject.set$axisDirection(t1);
      t1 = C.Viewport_getDefaultCrossAxisDirection(context, t1);
      renderObject.set$crossAxisDirection(t1);
      renderObject.set$offset(0, this.offset);
      renderObject.set$clipBehavior(this.clipBehavior);
    }
  };
  A.KeepAlivePage.prototype = {
    createState$0() {
      return new A._KeepAliveState(null, D._StateLifecycle_0);
    }
  };
  A._KeepAliveState.prototype = {
    get$wantKeepAlive() {
      return true;
    },
    build$1(context) {
      this.super$AutomaticKeepAliveClientMixin$build(context);
      return this._widget.child;
    }
  };
  A.__KeepAliveState_State_AutomaticKeepAliveClientMixin.prototype = {
    initState$0() {
      this.super$State$initState();
      this._ensureKeepAlive$0();
    },
    deactivate$0() {
      var t1 = this.AutomaticKeepAliveClientMixin__keepAliveHandle;
      if (t1 != null) {
        t1.notifyListeners$0();
        t1.super$ChangeNotifier$dispose();
        this.AutomaticKeepAliveClientMixin__keepAliveHandle = null;
      }
      this.super$State$deactivate();
    }
  };
  var typesOffset = hunkHelpers.updateTypes(["@(String{reviver:Object?(Object?,Object?)?})"]);
  A.ScrollView_build_closure.prototype = {
    call$2(context, offset) {
      return this.$this.buildViewport$4(type$.BuildContext._as(context), type$.ViewportOffset._as(offset), this.axisDirection, this.slivers);
    },
    $signature: 492
  };
  A.ScrollView_build_closure0.prototype = {
    call$1(notification) {
      var focusScope;
      type$.ScrollUpdateNotification._as(notification);
      focusScope = B.FocusScope_of(this.context);
      if (notification.dragDetails != null && focusScope.get$hasFocus())
        focusScope.unfocus$0();
      return false;
    },
    $signature: 493
  };
  (function installTearOffs() {
    var _static = hunkHelpers.installStaticTearOff;
    _static(A, "convert__jsonDecode$closure", 1, function() {
      return {reviver: null};
    }, ["call$2$reviver", "call$1"], ["jsonDecode", function(source) {
      return A.jsonDecode(source, null);
    }], 0, 0);
  })();
  (function inheritance() {
    var _mixinHard = hunkHelpers.mixinHard,
      _inherit = hunkHelpers.inherit;
    _inherit(A._SliverLogicalContainerParentData_SliverLogicalParentData_ContainerParentDataMixin, C.SliverLogicalParentData);
    _inherit(A.SliverLogicalContainerParentData, A._SliverLogicalContainerParentData_SliverLogicalParentData_ContainerParentDataMixin);
    _inherit(A.RenderSliverPadding, C.RenderSliverEdgeInsetsPadding);
    _inherit(A.RenderShrinkWrappingViewport, C.RenderViewportBase);
    _inherit(A.SliverPadding, B.SingleChildRenderObjectWidget);
    _inherit(A.AlwaysScrollableScrollPhysics, B.ScrollPhysics);
    _inherit(A.ScrollView, B.StatelessWidget);
    _inherit(A.ScrollView_build_closure, B.Closure2Args);
    _inherit(A.ScrollView_build_closure0, B.Closure);
    _inherit(A.BoxScrollView, A.ScrollView);
    _inherit(A.SliverChildListDelegate, C.SliverChildDelegate);
    _inherit(A.ShrinkWrappingViewport, B.MultiChildRenderObjectWidget);
    _inherit(A.KeepAlivePage, B.StatefulWidget);
    _inherit(A.__KeepAliveState_State_AutomaticKeepAliveClientMixin, B.State);
    _inherit(A._KeepAliveState, A.__KeepAliveState_State_AutomaticKeepAliveClientMixin);
    _mixinHard(A._SliverLogicalContainerParentData_SliverLogicalParentData_ContainerParentDataMixin, B.ContainerParentDataMixin);
    _mixinHard(A.__KeepAliveState_State_AutomaticKeepAliveClientMixin, B.AutomaticKeepAliveClientMixin);
  })();
  B._Universe_addRules(init.typeUniverse, JSON.parse('{"SliverLogicalContainerParentData":{"SliverLogicalParentData":[],"ContainerParentDataMixin":["RenderSliver"],"ParentData":[],"ContainerParentDataMixin.0":"RenderSliver"},"RenderSliverPadding":{"RenderSliver":[],"RenderObjectWithChildMixin":["RenderSliver"],"RenderObject":[],"DiagnosticableTree":[],"AbstractNode":[],"HitTestTarget":[],"RenderObjectWithChildMixin.0":"RenderSliver"},"RenderShrinkWrappingViewport":{"_RenderViewportBase_RenderBox_ContainerRenderObjectMixin":["SliverLogicalContainerParentData"],"RenderBox":[],"ContainerRenderObjectMixin":["RenderSliver","SliverLogicalContainerParentData"],"RenderAbstractViewport":[],"RenderObject":[],"DiagnosticableTree":[],"AbstractNode":[],"HitTestTarget":[],"ContainerRenderObjectMixin.1":"SliverLogicalContainerParentData","ContainerRenderObjectMixin.0":"RenderSliver","_RenderViewportBase_RenderBox_ContainerRenderObjectMixin.0":"SliverLogicalContainerParentData"},"SliverPadding":{"SingleChildRenderObjectWidget":[],"RenderObjectWidget":[],"Widget":[],"DiagnosticableTree":[]},"AlwaysScrollableScrollPhysics":{"ScrollPhysics":[]},"ScrollView":{"StatelessWidget":[],"Widget":[],"DiagnosticableTree":[]},"BoxScrollView":{"StatelessWidget":[],"Widget":[],"DiagnosticableTree":[]},"SliverChildListDelegate":{"SliverChildDelegate":[]},"ShrinkWrappingViewport":{"MultiChildRenderObjectWidget":[],"RenderObjectWidget":[],"Widget":[],"DiagnosticableTree":[]},"KeepAlivePage":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"_KeepAliveState":{"State":["KeepAlivePage"],"State.T":"KeepAlivePage"}}'));
  var type$ = (function rtii() {
    var findType = B.findType;
    return {
      BoxConstraints: findType("BoxConstraints"),
      BuildContext: findType("BuildContext"),
      ClipRectLayer: findType("ClipRectLayer"),
      ContainerLayer: findType("ContainerLayer"),
      Directionality: findType("Directionality"),
      JSArray_RenderSliver: findType("JSArray<RenderSliver>"),
      JSArray_Widget: findType("JSArray<Widget>"),
      List_Widget: findType("List<Widget>"),
      NotificationListener_ScrollUpdateNotification: findType("NotificationListener<ScrollUpdateNotification>"),
      RenderShrinkWrappingViewport: findType("RenderShrinkWrappingViewport"),
      RenderSliver: findType("RenderSliver"),
      RenderSliverPadding: findType("RenderSliverPadding"),
      ScrollUpdateNotification: findType("ScrollUpdateNotification"),
      SliverChildListDelegate: findType("SliverChildListDelegate"),
      SliverConstraints: findType("SliverConstraints"),
      SliverLogicalParentData: findType("SliverLogicalParentData"),
      ViewportOffset: findType("ViewportOffset"),
      int: findType("int"),
      nullable_Key: findType("Key?"),
      nullable_nullable_Object_Function_2_nullable_Object_and_nullable_Object: findType("Object?(Object?,Object?)?")
    };
  })();
  (function constants() {
    E.AlwaysScrollableScrollPhysics_null = new A.AlwaysScrollableScrollPhysics(null);
    E.EdgeInsets_0_20_0_0 = new B.EdgeInsets(0, 20, 0, 0);
    E.EdgeInsets_8_10_8_10 = new B.EdgeInsets(8, 10, 8, 10);
    E.Offset_0_3 = new B.Offset(0, 3);
    E.SizedBox_8_null_null_null = new B.SizedBox(8, null, null, null);
  })();
};

$__dart_deferred_initializers__["DszN/jdEc3v7XG6SgEYrWZh+/7A="] = $__dart_deferred_initializers__.current
