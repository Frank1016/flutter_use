// Generated by dart2js (NullSafetyMode.sound, csp, deferred-serialization, intern-composite-values), the Dart to JavaScript compiler version: 2.19.6.
self.$__dart_deferred_initializers__ = self.$__dart_deferred_initializers__ || Object.create(null);
$__dart_deferred_initializers__.current = function(hunkHelpers, init, holdersList, $) {
  var A = {GetStream: function GetStream(t0, t1) {
      this._rx_stream$_onData = t0;
      this._isBusy = false;
      this.$ti = t1;
    }, LightSubscription: function LightSubscription(t0, t1, t2, t3, t4) {
      var _ = this;
      _._removeSubscription = t0;
      _.onPause = t1;
      _.onResume = t2;
      _.onCancel = t3;
      _._rx_stream$_onDone = _._rx_stream$_data = null;
      _._isPaused = false;
      _.$ti = t4;
    },
    RxNotifier$($T) {
      return new A.RxNotifier(new A.GetStream(B._setArrayType([], $T._eval$1("JSArray<LightSubscription<0>>")), $T._eval$1("GetStream<0>")), B.LinkedHashMap_LinkedHashMap$_empty(type$.GetStream_dynamic, type$.List_StreamSubscription_dynamic), $T._eval$1("RxNotifier<0>"));
    },
    RxInt$(initial) {
      var t1 = new A.RxInt0($, true, false, new A.GetStream(B._setArrayType([], type$.JSArray_LightSubscription_int), type$.GetStream_int), B.LinkedHashMap_LinkedHashMap$_empty(type$.GetStream_dynamic, type$.List_StreamSubscription_dynamic));
      t1.set$__RxObjectMixin__value_A(type$.RxInt._eval$1("RxObjectMixin.T")._as(initial));
      return t1;
    },
    RxObjectMixin: function RxObjectMixin() {
    },
    RxNotifier: function RxNotifier(t0, t1, t2) {
      this.NotifyManager_subject = t0;
      this.NotifyManager__subscriptions = t1;
      this.$ti = t2;
    },
    NotifyManager: function NotifyManager() {
    },
    NotifyManager_addListener_closure: function NotifyManager_addListener_closure(t0) {
      this.$this = t0;
    },
    NotifyManager_close_closure: function NotifyManager_close_closure() {
    },
    _RxImpl: function _RxImpl() {
    },
    Rx0: function Rx0() {
    },
    RxInterface: function RxInterface() {
    },
    RxInt0: function RxInt0(t0, t1, t2, t3, t4) {
      var _ = this;
      _.RxObjectMixin___RxObjectMixin__value_A = t0;
      _.RxObjectMixin_firstRebuild = t1;
      _.RxObjectMixin_sentToStream = t2;
      _.NotifyManager_subject = t3;
      _.NotifyManager__subscriptions = t4;
    },
    __RxImpl_RxNotifier_RxObjectMixin: function __RxImpl_RxNotifier_RxObjectMixin() {
    },
    ObxWidget: function ObxWidget() {
    },
    _ObxState: function _ObxState(t0, t1) {
      var _ = this;
      _._observer = t0;
      _.___ObxState_subs_A = $;
      _._widget = null;
      _._debugLifecycleState = t1;
      _._framework$_element = null;
    },
    _ObxState__updateTree_closure: function _ObxState__updateTree_closure() {
    },
    Obx: function Obx(t0, t1) {
      this.builder = t0;
      this.key = t1;
    }
  },
  B, C, J;
  A = hunkHelpers.updateHolder(holdersList[31], A);
  B = holdersList[0];
  C = holdersList[2];
  J = holdersList[1];
  A.GetStream.prototype = {
    removeSubscription$1(subs) {
      return this.removeSubscription$body$GetStream(this.$ti._eval$1("LightSubscription<1>")._as(subs));
    },
    removeSubscription$body$GetStream(subs) {
      var $async$goto = 0,
        $async$completer = B._makeAsyncAwaitCompleter(type$.nullable_bool),
        $async$returnValue, $async$self = this, t1;
      var $async$removeSubscription$1 = B._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return B._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._isBusy;
              t1.toString;
              $async$goto = !t1 ? 3 : 5;
              break;
            case 3:
              // then
              t1 = $async$self._rx_stream$_onData;
              t1.toString;
              $async$returnValue = C.JSArray_methods.remove$1(t1, subs);
              // goto return
              $async$goto = 1;
              break;
              // goto join
              $async$goto = 4;
              break;
            case 5:
              // else
              $async$goto = 6;
              return B._asyncAwait(B.Future_Future$delayed(C.Duration_0, null, type$.dynamic), $async$removeSubscription$1);
            case 6:
              // returning from await.
              t1 = $async$self._rx_stream$_onData;
              $async$returnValue = t1 == null ? null : C.JSArray_methods.remove$1(t1, subs);
              // goto return
              $async$goto = 1;
              break;
            case 4:
              // join
            case 1:
              // return
              return B._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return B._asyncStartSync($async$removeSubscription$1, $async$completer);
    },
    addSubscription$1(subs) {
      return this.addSubscription$body$GetStream(this.$ti._eval$1("LightSubscription<1>")._as(subs));
    },
    addSubscription$body$GetStream(subs) {
      var $async$goto = 0,
        $async$completer = B._makeAsyncAwaitCompleter(type$.dynamic),
        $async$returnValue, $async$self = this, t1;
      var $async$addSubscription$1 = B._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return B._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._isBusy;
              t1.toString;
              $async$goto = !t1 ? 3 : 5;
              break;
            case 3:
              // then
              t1 = $async$self._rx_stream$_onData;
              t1.toString;
              $async$returnValue = C.JSArray_methods.add$1(t1, subs);
              // goto return
              $async$goto = 1;
              break;
              // goto join
              $async$goto = 4;
              break;
            case 5:
              // else
              $async$goto = 6;
              return B._asyncAwait(B.Future_Future$delayed(C.Duration_0, null, type$.dynamic), $async$addSubscription$1);
            case 6:
              // returning from await.
              t1 = $async$self._rx_stream$_onData;
              t1.toString;
              $async$returnValue = C.JSArray_methods.add$1(t1, subs);
              // goto return
              $async$goto = 1;
              break;
            case 4:
              // join
            case 1:
              // return
              return B._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return B._asyncStartSync($async$addSubscription$1, $async$completer);
    },
    get$length(_) {
      var t1 = this._rx_stream$_onData;
      return t1 == null ? null : t1.length;
    },
    _notifyData$1(data) {
      var t2, t3, _i, item, t4, _this = this,
        t1 = _this.$ti;
      t1._precomputed1._as(data);
      _this._isBusy = true;
      for (t2 = _this._rx_stream$_onData, t3 = t2.length, t1 = t1._eval$1("~(1)?"), _i = 0; _i < t2.length; t2.length === t3 || (0, B.throwConcurrentModificationError)(t2), ++_i) {
        item = t2[_i];
        if (!item._isPaused) {
          t4 = t1._as(item._rx_stream$_data);
          if (t4 != null)
            t4.call$1(data);
        }
      }
      _this._isBusy = false;
    },
    _notifyDone$0() {
      var t1, t2, _i, item, t3;
      this._isBusy = true;
      for (t1 = this._rx_stream$_onData, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, B.throwConcurrentModificationError)(t1), ++_i) {
        item = t1[_i];
        if (!item._isPaused) {
          t3 = item._rx_stream$_onDone;
          if (t3 != null)
            t3.call$0();
        }
      }
      this._isBusy = false;
    },
    listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError) {
      var subs,
        t1 = this.$ti;
      t1._eval$1("~(1)")._as(onData);
      type$.nullable_void_Function._as(onDone);
      subs = new A.LightSubscription(this.get$removeSubscription(), null, null, null, t1._eval$1("LightSubscription<1>"));
      subs.set$_rx_stream$_data(t1._eval$1("~(1)?")._as(onData));
      subs.set$_rx_stream$_onDone(onDone);
      this.addSubscription$1(subs);
      return subs;
    },
    listen$1(onData) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
    },
    set$_rx_stream$_onData(_onData) {
      this._rx_stream$_onData = this.$ti._eval$1("List<LightSubscription<1>>?")._as(_onData);
    },
    set$_rx_stream$_value(_value) {
      this.$ti._eval$1("1?")._as(_value);
    }
  };
  A.LightSubscription.prototype = {
    cancel$0(_) {
      this._removeSubscription.call$1(this);
      return B.Future_Future$value(null, type$.void);
    },
    onData$1(handleData) {
      this.$ti._eval$1("~(1)?")._as(handleData);
      this.set$_rx_stream$_data(handleData);
      return handleData;
    },
    onError$1(_, handleError) {
      return handleError;
    },
    onDone$1(handleDone) {
      type$.nullable_void_Function._as(handleDone);
      this.set$_rx_stream$_onDone(handleDone);
      return handleDone;
    },
    pause$1(_, resumeSignal) {
      this._isPaused = true;
    },
    pause$0($receiver) {
      return this.pause$1($receiver, null);
    },
    resume$0(_) {
      this._isPaused = false;
    },
    set$_rx_stream$_data(_data) {
      this._rx_stream$_data = this.$ti._eval$1("~(1)?")._as(_data);
    },
    set$_rx_stream$_onDone(_onDone) {
      this._rx_stream$_onDone = type$.nullable_void_Function._as(_onDone);
    }
  };
  A.RxObjectMixin.prototype = {
    call$1(v) {
      var _this = this;
      B._instanceType(_this)._eval$1("RxObjectMixin.T?")._as(v);
      if (v != null)
        _this.set$value(0, v);
      return _this.get$value(_this);
    },
    call$0() {
      return this.call$1(null);
    },
    toString$0(_) {
      return J.toString$0$(this.get$value(this));
    },
    toJson$0() {
      return this.get$value(this);
    },
    $eq(_, o) {
      var t1, _this = this;
      if (o == null)
        return false;
      t1 = B._instanceType(_this);
      if (t1._eval$1("RxObjectMixin.T")._is(o))
        return J.$eq$(_this.get$value(_this), o);
      if (t1._eval$1("RxObjectMixin<RxObjectMixin.T>")._is(o))
        return J.$eq$(_this.get$value(_this), o.get$value(o));
      return false;
    },
    get$hashCode(_) {
      var t1 = this.RxObjectMixin___RxObjectMixin__value_A;
      t1 === $ && B.throwLateFieldNI("_value");
      return J.get$hashCode$(t1);
    },
    set$value(_, val) {
      var t1, t2, _this = this;
      B._instanceType(_this)._eval$1("RxObjectMixin.T")._as(val);
      t1 = _this.NotifyManager_subject;
      if (t1._rx_stream$_onData == null)
        return;
      _this.RxObjectMixin_sentToStream = false;
      t2 = _this.RxObjectMixin___RxObjectMixin__value_A;
      t2 === $ && B.throwLateFieldNI("_value");
      if (J.$eq$(t2, val) && !_this.RxObjectMixin_firstRebuild)
        return;
      _this.RxObjectMixin_firstRebuild = false;
      _this.set$__RxObjectMixin__value_A(val);
      _this.RxObjectMixin_sentToStream = true;
      t2 = t1.$ti._precomputed1._as(_this.RxObjectMixin___RxObjectMixin__value_A);
      t1.set$_rx_stream$_value(t2);
      t1._notifyData$1(t2);
    },
    get$value(_) {
      var t1 = $.RxInterface_proxy;
      if (t1 != null)
        t1.addListener$1(0, this.NotifyManager_subject);
      t1 = this.RxObjectMixin___RxObjectMixin__value_A;
      t1 === $ && B.throwLateFieldNI("_value");
      return t1;
    },
    set$__RxObjectMixin__value_A(__RxObjectMixin__value_A) {
      this.RxObjectMixin___RxObjectMixin__value_A = B._instanceType(this)._eval$1("RxObjectMixin.T")._as(__RxObjectMixin__value_A);
    }
  };
  A.RxNotifier.prototype = {};
  A.NotifyManager.prototype = {
    addListener$1(_, rxGetx) {
      var t1, subs, listSubscriptions;
      B._instanceType(this)._eval$1("GetStream<NotifyManager.T>")._as(rxGetx);
      t1 = this.NotifyManager__subscriptions;
      if (!t1.containsKey$1(0, rxGetx)) {
        subs = rxGetx.listen$1(new A.NotifyManager_addListener_closure(this));
        listSubscriptions = t1.$index(0, rxGetx);
        if (listSubscriptions == null) {
          listSubscriptions = B._setArrayType([], type$.JSArray_StreamSubscription_dynamic);
          t1.$indexSet(0, rxGetx, listSubscriptions);
        }
        C.JSArray_methods.add$1(listSubscriptions, subs);
      }
    },
    close$0(_) {
      var t1 = this.NotifyManager__subscriptions;
      t1.forEach$1(0, new A.NotifyManager_close_closure());
      t1.clear$0(0);
      t1 = this.NotifyManager_subject;
      t1._notifyDone$0();
      t1.set$_rx_stream$_onData(null);
      t1._isBusy = null;
      t1.set$_rx_stream$_value(null);
    }
  };
  A._RxImpl.prototype = {};
  A.Rx0.prototype = {
    toJson$0() {
      var t1, exception;
      try {
        t1 = this.get$value(this).toJson$0();
        return t1;
      } catch (exception) {
        if (type$.Exception._is(B.unwrapException(exception)))
          throw B.wrapException(B.createRuntimeType(B._instanceType(this)._eval$1("Rx0.T")).toString$0(0) + " has not method [toJson]");
        else
          throw exception;
      }
    }
  };
  A.RxInterface.prototype = {};
  A.RxInt0.prototype = {
    $add(_, other) {
      var t1, _this = this;
      B._asInt(other);
      t1 = _this.get$value(_this);
      if (typeof t1 !== "number")
        return t1.$add();
      _this.set$value(0, t1 + other);
      return _this;
    },
    $sub(_, other) {
      var t1, _this = this;
      B._asInt(other);
      t1 = _this.get$value(_this);
      if (typeof t1 !== "number")
        return t1.$sub();
      _this.set$value(0, t1 - other);
      return _this;
    }
  };
  A.__RxImpl_RxNotifier_RxObjectMixin.prototype = {};
  A.ObxWidget.prototype = {
    createState$0() {
      return new A._ObxState(A.RxNotifier$(type$.dynamic), C._StateLifecycle_0);
    }
  };
  A._ObxState.prototype = {
    initState$0() {
      var t1, t2, _this = this;
      _this.super$State$initState();
      t1 = _this._observer;
      t2 = t1.$ti._eval$1("~(NotifyManager.T)")._as(_this.get$_updateTree());
      type$.nullable_void_Function._as(null);
      _this.___ObxState_subs_A = t1.NotifyManager_subject.listen$4$cancelOnError$onDone$onError(t2, false, null, null);
    },
    _updateTree$1(_) {
      if (this._framework$_element != null)
        this.setState$1(new A._ObxState__updateTree_closure());
    },
    dispose$0() {
      var t1 = this.___ObxState_subs_A;
      t1 === $ && B.throwLateFieldNI("subs");
      t1.cancel$0(0);
      this._observer.close$0(0);
      this.super$State$dispose();
    },
    build$1(context) {
      var result,
        t1 = this._observer,
        t2 = this._widget.get$build(),
        _observer = $.RxInterface_proxy;
      $.RxInterface_proxy = t1;
      result = t2.call$0();
      if (t1.NotifyManager__subscriptions._length === 0) {
        $.RxInterface_proxy = _observer;
        B.throwExpression("      [Get] the improper use of a GetX has been detected. \n      You should only use GetX or Obx for the specific widget that will be updated.\n      If you are seeing this error, you probably did not insert any observable variables into GetX/Obx \n      or insert them outside the scope that GetX considers suitable for an update \n      (example: GetX => HeavyWidget => variableObservable).\n      If you need to update a parent widget and a child widget, wrap each one in an Obx/GetX.\n      ");
      }
      $.RxInterface_proxy = _observer;
      return result;
    }
  };
  A.Obx.prototype = {
    build$0() {
      return this.builder.call$0();
    }
  };
  var typesOffset = hunkHelpers.updateTypes(["bool?/(Object?)", "~(GetStream<@>,List<StreamSubscription<@>>)", "~(@)", "Widget()"]);
  A.NotifyManager_addListener_closure.prototype = {
    call$1(data) {
      var t1 = this.$this;
      B._instanceType(t1)._eval$1("NotifyManager.T")._as(data);
      t1 = t1.NotifyManager_subject;
      if (t1._rx_stream$_onData != null) {
        t1.$ti._precomputed1._as(data);
        t1.set$_rx_stream$_value(data);
        t1._notifyData$1(data);
      }
    },
    $signature() {
      return B._instanceType(this.$this)._eval$1("~(NotifyManager.T)");
    }
  };
  A.NotifyManager_close_closure.prototype = {
    call$2(getStream, _subscriptions) {
      var t1;
      type$.GetStream_dynamic._as(getStream);
      for (t1 = J.get$iterator$ax(type$.List_StreamSubscription_dynamic._as(_subscriptions)); t1.moveNext$0();)
        t1.get$current(t1).cancel$0(0);
    },
    $signature: typesOffset + 1
  };
  A._ObxState__updateTree_closure.prototype = {
    call$0() {
    },
    $signature: 0
  };
  (function installTearOffs() {
    var _instance_1_u = hunkHelpers._instance_1u,
      _instance_0_u = hunkHelpers._instance_0u;
    _instance_1_u(A.GetStream.prototype, "get$removeSubscription", "removeSubscription$1", 0);
    _instance_1_u(A._ObxState.prototype, "get$_updateTree", "_updateTree$1", 2);
    _instance_0_u(A.Obx.prototype, "get$build", "build$0", 3);
  })();
  (function inheritance() {
    var _mixin = hunkHelpers.mixin,
      _inheritMany = hunkHelpers.inheritMany,
      _inherit = hunkHelpers.inherit;
    _inheritMany(B.Object, [A.GetStream, A.RxObjectMixin, A.RxInterface, A.NotifyManager]);
    _inherit(A.LightSubscription, B.StreamSubscription);
    _inherit(A.RxNotifier, A.RxInterface);
    _inherit(A.NotifyManager_addListener_closure, B.Closure);
    _inherit(A.NotifyManager_close_closure, B.Closure2Args);
    _inherit(A.__RxImpl_RxNotifier_RxObjectMixin, A.RxNotifier);
    _inherit(A._RxImpl, A.__RxImpl_RxNotifier_RxObjectMixin);
    _inherit(A.Rx0, A._RxImpl);
    _inherit(A.RxInt0, A.Rx0);
    _inherit(A.ObxWidget, B.StatefulWidget);
    _inherit(A._ObxState, B.State);
    _inherit(A._ObxState__updateTree_closure, B.Closure0Args);
    _inherit(A.Obx, A.ObxWidget);
    _mixin(A.RxNotifier, A.NotifyManager);
    _mixin(A.__RxImpl_RxNotifier_RxObjectMixin, A.RxObjectMixin);
  })();
  B._Universe_addRules(init.typeUniverse, JSON.parse('{"LightSubscription":{"StreamSubscription":["1"]},"RxNotifier":{"NotifyManager":["1"],"NotifyManager.T":"1"},"_RxImpl":{"RxNotifier":["1"],"RxObjectMixin":["1"],"NotifyManager":["1"]},"Rx0":{"_RxImpl":["1"],"RxNotifier":["1"],"RxObjectMixin":["1"],"NotifyManager":["1"]},"RxInt0":{"Rx0":["int"],"_RxImpl":["int"],"RxNotifier":["int"],"RxObjectMixin":["int"],"NotifyManager":["int"],"NotifyManager.T":"int","RxObjectMixin.T":"int","Rx0.T":"int"},"ObxWidget":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"_ObxState":{"State":["ObxWidget"],"State.T":"ObxWidget"},"Obx":{"ObxWidget":[],"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]}}'));
  B._Universe_addErasedTypes(init.typeUniverse, JSON.parse('{"RxInterface":1,"__RxImpl_RxNotifier_RxObjectMixin":1}'));
  var type$ = (function rtii() {
    var findType = B.findType;
    return {
      Exception: findType("Exception"),
      GetStream_dynamic: findType("GetStream<@>"),
      GetStream_int: findType("GetStream<int>"),
      JSArray_LightSubscription_int: findType("JSArray<LightSubscription<int>>"),
      JSArray_StreamSubscription_dynamic: findType("JSArray<StreamSubscription<@>>"),
      List_StreamSubscription_dynamic: findType("List<StreamSubscription<@>>"),
      RxInt: findType("RxInt0"),
      dynamic: findType("@"),
      nullable_bool: findType("bool?"),
      nullable_void_Function: findType("~()?"),
      void: findType("~")
    };
  })();
  (function staticFields() {
    $.RxInterface_proxy = null;
  })();
};

$__dart_deferred_initializers__["LtDiHFGzYz4Kz6iHdyOffta2pWY="] = $__dart_deferred_initializers__.current
